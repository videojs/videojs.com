<section class="overview">
  <h1>Getting Started</h1>
  <p class="tagline">
    An overview of how to get started using Video.js, from basic CDN usage to Browserify, along with
    examples.
  </p>
</section>

<div class="row">
  <div class="col-md-2">
    <nav class="affixed-sidebar">
      <ul class="nav">
        <li role="presentation" class="active">
          <a href="#download">Download</a>
          <ul class="nav">
            <li><a href="#download-cdn">CDN</a></li>
            <li><a href="#download-npm">npm</a></li>
            <li><a href="#download-bower">Bower</a></li>
          </ul>
        </li>
        <li role="presentation">
          <a href="#included">What's in the box</a>
          <ul class="nav">
            <li><a href="#included-dist">Distribution</a></li>
            <li><a href="#included-source">Source code</a></li>
          </ul>
        </li>
        <li role="presentation">
          <a href="#build">Build</a>
          <ul class="nav">
            <li><a href="#build-grunt">Install Grunt</a></li>
            <li><a href="#build-fork">Fork &amp; clone Video.js</a></li>
            <li><a href="#build-upstream">Create upstream remote</a></li>
            <li><a href="#build-install">Install dependencies</a></li>
            <li><a href="#build-build">Build it!</a></li>
          </ul>
        </li>
        <li role="presentation">
          <a href="#customize">Customize</a>
          <ul class="nav">
            <li><a href="#skinning">Skinning</a></li>
            <li><a href="#plugins">Plugins</a></li>
          </ul>
        </li>
      </ul>
    </nav>
  </div>
  <div class="col-md-10">
    <section class="download">
      <h2 id="download" class="page-header">Download</h2>

      <p class="lead">
        There are a few ways to get started using Video.js (currently v<span class="vjs-version">$LATEST_VERSION$</span>),
        but you should select the one that best fits your particular use case.
      </p>

      <p>
        There are a few common things you should keep in mind regardless of which way you end up including
        Video.js in your project. The core codebase uses a few modern features of Javascript (ES5), so if you'd like
        to support IE8 you'll need to include an ES5 shim. To make things easier, we created a single file you
        can include for IE8 support. No matter where the core Video.js library is placed, this file needs to be located
        in the <code>&lt;head&gt;</code> of the document.
      </p>

      <h3 id="download-cdn">Video.js CDN</h3>
      <p>
        Our friends at <a href="http://fastly.com" target="_blank">Fastly</a> are nice enough to provide
        hosting for all the necessary files for Video.js on their content delivery network. Using these
        hosted files is probably the easiest way to get started using Video.js, you simply need to include
        the following links in your page.

      <pre><code class="html">&lt;head&gt;
  &lt;link href="http://vjs.zencdn.net/<span class="vjs-version">$LATEST_VERSION$</span>/video-js.css" rel="stylesheet"&gt;

  &lt;!-- If you'd like to support IE8 --&gt;
  &lt;script src="http://vjs.zencdn.net/ie8/<span class="ie8-version">ie8-version</span>/videojs-ie8.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;video id="my-video" class="video-js" controls preload="auto" width="640" height="264"
  poster="MY_VIDEO_POSTER.jpg" data-setup="{}"&gt;
    &lt;source src="MY_VIDEO.mp4" type='video/mp4'&gt;
    &lt;source src="MY_VIDEO.webm" type='video/webm'&gt;
    &lt;p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      &lt;a href="http://videojs.com/html5-video-support/" target="_blank"&gt;supports HTML5 video&lt;/a&gt;
    &lt;/p&gt;
  &lt;/video&gt;

  &lt;script src="http://vjs.zencdn.net/<span class="vjs-version">$LATEST_VERSION$</span>/video.js"&gt;&lt;/script&gt;
&lt;/body&gt;</code></pre>

      <h4>Google Analytics</h4>

      <p>
        We include a stripped down Google Analytics pixel that tracks a random
        percentage (currently 1%) of players loaded from the CDN. This allows
        us to see (roughly) what browsers are in use in the wild, along with
        other useful metrics such as OS and device. If you'd like to disable
        analytics, you can simply include the following global before including
        Video.js via the free CDN:
      </p>

      <pre><code class="javascript">window.HELP_IMPROVE_VIDEOJS = false;</code></pre>

      <h3 id="download-npm">Install via npm</h3>
      <p>For more advanced workflows, installing via <a href="http://npmjs.com">npm</a> is recommended</p>
      <pre><code>$ npm install --save-dev video.js</code></pre>

      <h3 id="download-bower">Install via Bower</h3>
      <p>Video.js is also available on <a href="http://bower.io">Bower.io</a>.</p>
      <pre><code>$ bower install video.js</code></pre>

    </section>

    <section class="included">
      <h2 id="included" class="page-header">What's in the box?</h2>

      <p class="lead">
        If you've downloaded one of the <a href="https://github.com/videojs/video.js/releases">releases</a> or installed via a package manager,
        you've probably noticed that the contents are slightly different from the source code available on Github. The former includes just the compiled
        files necessary to use Video.js, and the other includes the source used to create those files.
      </p>

      <h3 id="included-dist">Distributions</h3>
      <p>A Video.js distribution is what you'll find if you've downloaded a release or installed via a package manager.</p>
      <pre><code>video.js/
├── alt
│   ├── video.novtt.js
│   ├── video.novtt.min.js
│   └── video.novtt.min.js.map
├── examples/
├── font
│   ├── VideoJS.eot
│   ├── VideoJS.svg
│   ├── VideoJS.ttf
│   └── VideoJS.woff
├── ie8
│   ├── videojs-ie8.js
│   └── videojs-ie8.min.js
├── lang/
├── video-js-<span class="vjs-version">$LATEST_VERSION$</span>.zip
├── video-js.css
├── video-js.min.css
├── video-js.swf
├── video.js
├── video.js.map
├── video.min.js
└── video.min.js.map</pre></code>

      <p>
        This package includes everything you'll need to use Video.js on a production site. By default, we bundle Video.js with Mozilla's excellent <a href="https://github.com/mozilla/vtt.js" target="_blank">VTT.js</a>.
        If you don't need VTT.js functionality for whatever reason, you can use one of the Video.js copies that don't include VTT.js. These have <code>novtt</code> in the name and can be found in the <code>alt/</code>
        directory. <code>font/</code> includes all the generated icon font files from the <a href="https://github.com/videojs/font" target="_blank">Videojs Font project</a>. <code>ie8/</code> contains the shim required to
        support IE8, and <code>lang/</code> contains all the generated translation files.
      </p>

      <h3 id="included-source">Source Code</h3>
      <p>
        The source code is everything you'll find when checking out the Video.js git repository. This includes all the source files
        and any tooling necessary to build a production ready version of Video.js, as well as useful development tools such as sandboxed examples.
      </p>

      <pre><code>video.js/
├── CHANGELOG.md
├── CONTRIBUTING.md
├── Gruntfile.js
├── LICENSE
├── README.md
├── bower.json
├── build/
├── component.json
├── composer.json
├── contrib.json
├── dist/
├── docs/
├── lang/
├── package.json
├── sandbox/
├── src/
│   ├── css
│   └── js
└── test/</pre></code>

      <p>
        A lot of the root source directory is JSON configs for various package managers because, Internet. Most likely the important things you're looking for will be in <code>src/</code> and <code>build/</code>.
        <code>src/</code> contains all of the source files for both the player JS and the base skin, while the <code>build/</code> directory contains various grunt tasks as well as the primary build file,
        <code>grunt.js</code>.
      </p>
    </section>

    <section class="build">
      <h2 id="build" class="page-header">Build Tools</h2>

      <p class="lead">
        Video.js uses a taskrunner called <a href="https://gruntjs.com" target="_blank">Grunt</a> for its build
        pipeline. Before getting started, you'll need <a href="https://nodejs.org/" target="_blank">Node.js</a> installed.
      </p>

      <h3 id="build-grunt">Install Grunt</h3>
      <p>This may require <code>sudo</code>.</p>
      <pre><code>$ npm install -g grunt-cli</code></pre>

      <h3 id="build-fork">Fork and clone the repository</h3>
      <p>
        Contributions to Video.js need to be done via your own <a href="https://help.github.com/articles/fork-a-repo/" target="_blank">fork</a>
        of the repository. Even if you don't plan on doing so right away, we suggest <a href="https://help.github.com/articles/fork-a-repo/" target="_blank">creating your own fork</a>
        to work from just in case you want to contribute down the road.
      </p>
      <pre><code>$ git clone https://github.com/YOUR-GITHUB-USERNAME/video.js && cd video.js</code></pre>

      <h3 id="build-upstream">Set up an upstream remote</h3>
      <p>In order to be able to pull upstreams for Video.js in the future, you can set an upstream remote.</p>
      <pre><code>$ git checkout master
$ git remote add upstream https://github.com/videojs/video.js.git
$ git pull upstream master</code></pre>

      <h3 id="build-install">Install dependencies</h3>
      <p>Dependencies are installed via <a href="https://www.npmjs.org/" target="_blank">npm</a>, which is installed along with Node.js</p>
      <pre><code>$ npm install</code></pre>

      <h3 id="build-build">Build away!</h3>
      <h4>For production</h4>
      <p>
        There are a few different ways to build the source depending on what you want to do. When we make a new release, we do
        something like this.
      </pre>
      <pre><code>$ grunt dist</code></pre>
      <p>This lints the code base, runs the tests, builds Video.js, and puts everything you need for production use in the <code>dist</code>directory.</p>

      <h4>For development</h4>
      <p>
        In order to use ES6 features, we need to transpile the source code using <a href="http://babeljs.io/" target="_blank">Babel</a>. This
        means that during development we have to watch the source for changes so we can rebuild when testing.
      </p>
      <pre><code>$ grunt dev</code></pre>
      <p>
        This will keep updated code in the <code>build</code> directory, allowing to use the Sandbox demo files. To make things easier,
        this also runs a local http server so you can access the sandbox via <a href="http://localhost:9999/sandbox" target="_blank">localhost:9999/sandbox</a>.
      </p>

    </section>

    <section class="customize">
      <h2 id="customize">Customize</h2>

      <p>Using Video.js straight out of the box is fine, but we think it's better if you make it your own. Plugins and skins make it possible to completely customize your player.</p>

      <h3 id="skinning">Skinning</h3>

      <p>The player skin is completely built from HTML and CSS, including when Flash and other players like YouTube are used.</p>

      <p>Skin changes can be as simple as centering the play button (you can just add the 'vjs-big-play-centered' class to your video tag), or as complex as creating entirely new layouts. We've built a codepen project where you can explore different changes.</p>


      <p><a href="http://codepen.io/heff/pen/EarCt" target="_blank">Video.js Skin Designer</a></p>

      <p>And if you know CSS, you can always just open your Chrome dev tools and hack away!</p>

      <h3 id="plugins">Plugins</h3>

      <p>Video.js by itself is purposefully very simple. It supports the basic video and audio playback features and ensures they work the same across different playback technologies ("techs"). Any more advanced features are built as plugins, including playlists, analytics, advertising, and support for advanced formats like HLS and DASH. Check out the plugins page to see what's available.</p>

      <p><a href="/plugins/">Video.js Plugins</a></p>

    </section>
  </div>
</div>
