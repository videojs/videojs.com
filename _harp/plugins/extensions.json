[{"name":"fw-videojs-playlist","description":"Playlist plugin for Video.js","author":{"name":"Brightcove, Inc., Filmweb Sp. z o. o."},"keywords":["playlist","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-10-16T12:48:38.917Z","created":"2017-07-27T09:19:07.938Z","4.0.1":"2017-07-27T09:19:07.938Z","4.0.2":"2017-07-27T15:11:12.455Z","4.0.3":"2017-10-16T09:58:04.669Z","4.0.4":"2017-10-16T12:48:38.917Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist)\n\n# Filmweb fork of Brightcove Playlist Plugin for video.js\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Basic Usage](#basic-usage)\n- [Fork changes](#fork-changes)\n  - [playlistautoadvance event](#playlistautoadvance-event)\n  - [Custom setSource function](#custom-setsource-function)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nInstall fw-videojs-playlist via npm (preferred):\n\n```sh\n$ npm install fw-videojs-playlist\n```\n\n## Basic Usage\n\nFor full details on how to use the playlist plugin can be found in [the API documentation](docs/api.md).\n\n```js\nvar player = videojs('video');\n\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://vjs.zencdn.net/v/oceans.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://www.videojs.com/img/poster.jpg'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n\n// Play through the playlist automatically.\nplayer.playlist.autoadvance(0);\n```\n\n## Fork changes\n\n### playlistautoadvance event\nEvent fires on autoadvance, but not in other playlist change circumstances.\n \n### Custom setSource function\nAllows to override default change source behaviour provided by videojs\non item change. Function is used between `beforeplaylistitem`\nand `playlistitem` events, and allows you extend or replace the default\n`player.src()` method.\n```javascript\nplayer.playlist.customSrcFunction(function(player,item) { \n    /*...*/ \n})\n```\n\nUse case - google IMA plugin:\n````javascript\nplayer.playlist.customSrcFunction(function(player, item){\n        if (player.ima && typeof player.ima.setContentWithAdTag === 'function') {\n            player.ima.setContentWithAdTag(item.sources, null, true);\n            player.ima.requestAds();\n        } else {\n            player.src(item.sources);\n        }\n    });\n````\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n","version":"4.0.4","downloads":37},{"name":"generator-videojs-plugin","description":"A Yeoman generator for Video.js plugins","author":{"name":"Pat O'Neill","email":"pgoneill@gmail.com","url":"https://github.com/misteroneill"},"keywords":["yeoman-generator","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-10T15:41:29.855Z","created":"2014-04-26T23:54:17.550Z","0.1.0":"2014-04-26T23:54:17.550Z","0.1.1":"2014-04-27T00:28:12.877Z","0.0.0":"2015-11-06T18:18:54.591Z","0.1.2":"2015-11-06T18:21:43.890Z","1.0.0":"2015-12-05T20:45:56.623Z","1.0.1":"2015-12-05T20:51:44.755Z","1.0.2":"2016-01-05T19:23:46.716Z","1.0.3":"2016-01-11T19:53:41.674Z","1.0.4":"2016-01-30T22:13:04.448Z","2.0.0":"2016-02-12T21:15:11.189Z","2.1.0":"2016-09-13T16:45:48.190Z","2.1.1":"2016-10-13T18:39:28.102Z","2.2.0":"2016-10-14T20:50:58.086Z","3.0.0":"2016-11-18T19:38:41.457Z","2.3.0":"2017-02-09T18:17:23.422Z","3.1.0":"2017-02-12T21:09:18.796Z","3.1.1":"2017-02-22T20:41:20.367Z","3.2.0":"2017-04-12T20:08:09.226Z","3.3.0":"2017-04-26T16:18:53.053Z","3.3.1":"2017-04-26T16:40:43.022Z","4.0.0":"2017-04-26T21:27:10.802Z","4.0.1":"2017-04-27T14:55:30.656Z","4.0.2":"2017-04-27T19:29:57.494Z","5.0.0-0":"2017-05-16T23:53:40.039Z","5.0.0-1":"2017-05-17T02:17:25.947Z","5.0.0-2":"2017-05-17T02:38:31.534Z","5.0.0-3":"2017-05-17T15:44:13.916Z","5.0.0-4":"2017-05-17T15:58:53.009Z","5.0.0-5":"2017-05-17T23:07:55.883Z","5.0.0-6":"2017-05-18T20:27:41.531Z","5.0.0-7":"2017-05-18T23:47:55.193Z","5.0.0":"2017-05-19T19:49:10.463Z","5.0.1":"2017-08-23T18:03:23.002Z","5.0.2":"2017-08-23T18:26:52.689Z","5.0.3":"2017-11-07T19:19:50.272Z","5.0.4":"2017-11-27T15:36:11.178Z","5.1.0":"2017-12-14T21:39:11.291Z","5.1.1":"2017-12-15T20:51:06.441Z","5.2.0":"2018-01-10T15:41:29.855Z"},"readme":"# generator-videojs-plugin\n\nThis is an opinionated [Yeoman][yo] generator for [Video.js][vjs] plugins. It is based on the recommendations of the Video.js core team as well as tools and conventions for developing plugins at [Brightcove][bcov].\n\nLead Maintainer: Pat O'Neill [@misteroneill](https://github.com/misteroneill)\n\nMaintenance Status: Stable\n\nTo learn more about Video.js plugins and this generator's conventions and opinions, check out:\n\n- [Video.js Plugins Guide][plugins-guide].\n- [Video.js Plugin Conventions][conventions].\n\n### Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting Started](#getting-started)\n  - [Options](#options)\n    - [Install](#install)\n    - [Prompt](#prompt)\n    - [Hurry](#hurry)\n- [Updating an Existing Project](#updating-an-existing-project)\n  - [Recommendations](#recommendations)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting Started\n\nIf you don't know what Yeoman is or what generators are, check out the Yeoman [Getting Started][getting-started] document. Long story short, make sure you have Yeoman and this generator installed globally:\n\n```sh\n$ npm install -g yo generator-videojs-plugin\n```\n\nThen, creating the foundation for your Video.js plugin is as simple as:\n\n```sh\n$ yo videojs-plugin\n```\n\nYou will be walked through several options and finish with a working, buildable, testable Video.js plugin. Of course, this plugin won't do anything out of the box - that part is left to your creativity!\n\n### Options\n\n#### Install\n\nBy default, the generator will run `npm install` after it is finished. This can be a slow process and you may not always need it; so, it can be disabled (this option is provided by Yeoman itself, but it's useful and worth documenting here).\n\n```sh\nyo videojs-plugin --skip-install\n```\n\n#### Prompt\n\nBy default, the generator will present the user with a series of prompts to choose various settings. This can be disabled if you've previously selected values and don't want to change them.\n\n```sh\nyo videojs-plugin --skip-prompt\n```\n\n#### Hurry\n\nIf you don't want to change configuration, but just want to update an existing plugin and skip all the other stuff (e.g., prompts, installation), you can use this option to do that. _You may need to run the installation manually if dependencies changed!_\n\n```sh\nyo videojs-plugin --hurry\n```\n\n## Updating an Existing Project\n\nRunning a Yeoman generator in an empty directory poses no difficulties; however, running it against an existing project can cause conflicts. Yeoman provides a mechanism, which can be confusing because it's not clearly documented, for resolving these conflicts. It will prompt you to choose one of: \n\n- `Y`: yes (default)\n- `n`: no\n- `a`: yes to all\n- `x`: exit\n- `d`: diff\n- `h`: help\n\n### Recommendations\n\nMost of what this generator does is localized to the `package.json` file. Luckily, the generator does a good job of merging your existing contents with the generated contents. In general, it's safe to select `Y` for the `package.json` in your project.\n\nOther files you'll usually want to select `n` on - particularly those files plugin authors will edit the most: anything in `src/` or `test/`.\n\nHowever, files that are _not_ commonly edited by plugin authors may deserve a diff check (`d`) if you've made changes to these sorts of files. For example, anything in `scripts/`.\n\n## License\n\n[Apache 2.0][license]\n\n[bcov]: https://www.brightcove.com/\n[getting-started]: http://yeoman.io/learning/index.html\n[license]: LICENSE\n[plugins-guide]: https://github.com/videojs/Video.js/blob/master/docs/guides/plugins.md\n[conventions]: docs/conventions.md\n[vjs]: http://videojs.com/\n[yo]: http://yeoman.io/\n","version":"5.2.0","downloads":667},{"name":"ozon1234-videojs-contrib-ads","description":"A framework that provides common functionality needed by video advertisement libraries working with video.js.","author":{"name":"Brightcove"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-01-30T22:11:54.318Z","created":"2017-01-30T22:06:48.808Z","4.2.1":"2017-01-30T22:06:48.808Z","4.2.2":"2017-01-30T22:11:54.318Z"},"readme":"# videojs-contrib-ads [![Build Status](https://travis-ci.org/videojs/videojs-contrib-ads.svg)](https://travis-ci.org/videojs/videojs-contrib-ads)\n\nThe `videojs-contrib-ads` plugin provides common functionality needed by video advertisement libraries working with [video.js.](http://www.videojs.com/)\nIt takes care of a number of concerns for you, reducing the code you have to write for your ad integration.\n\nLead Maintainer: Greg Smith [https://github.com/incompl](https://github.com/incompl)\n\nMaintenance Status: Stable, in its own interesting way\n\n## Getting Started\n\nIn addition to the video.js library, you'll need two files from this project: `videojs.ads.js` and `videojs.ads.css`.\nAfter you build the project they are both in the `dist` directory.\n\nFor development, include the CSS in your HTML's `<head>` section with a `<link>` tag:\n\n```html\n<link rel=\"stylesheet\" href=\"videojs.ads.css\">\n```\n\nThen, include the JavaScript file after video.js, but before your integration code:\n\n```html\n<video id=\"video\" src=\"movie.mp4\" controls></video>\n<script src=\"video.js\"></script>\n<script src=\"videojs.ads.js\"></script>\n<script>\nvideojs('video', {}, function() {\n  var player = this;\n  player.ads(); // initialize the ad framework\n  // your custom ad integration code\n});\n</script>\n```\n\n### CDN Link\n\nYou may also use the Javascript and CSS links from the following to get started:\n[https://cdnjs.com/libraries/videojs-contrib-ads](https://cdnjs.com/libraries/videojs-contrib-ads)\n\n\nWith this basic structure in place, you're ready to develop an ad integration.\n\n## Developing an Integration\n\nOnce you call `player.ads()` to initialize the plugin, it provides six interaction points (four events and two methods) which you can use in your integration.\n\nHere are the events that communicate information to your integration from the ads plugin:\n\n * `contentupdate` (EVENT) — Fires when a new content video has been assigned to the player, so your integration can update its ad inventory. _NOTE: This will NOT fire while your ad integration is playing a linear Ad._\n * `readyforpreroll` (EVENT) — Fires when a content video is about to play for the first time, so your integration can indicate that it wants to play a preroll.\n\nNote: A `contentplayback` event is sent but should not be used as it is being removed. The `playing` event has the same meaning and is far more reliable.\n \nAnd here are the interaction points you use to send information to the ads plugin:\n\n* `adsready` (EVENT) — Trigger this event after to signal that your integration is ready to play ads.\n* `adplaying` (EVENT) - Trigger this event when an ads starts playing. If your integration triggers `playing` event when an ad begins, it will automatically be redispatched as `adplaying`.\n* `adscanceled` (EVENT) — Trigger this event after starting up the player or setting a new video to skip ads entirely. This event is optional; if you always plan on displaying ads, you don't need to worry about triggering it.\n* `adserror` (EVENT) - Trigger this event to indicate that an error in the ad integration has ocurred and any ad states should abort so that content can resume.\n* `nopreroll` (EVENT) - Trigger this event to indicate that there will be no preroll ad. Otherwise, the player will wait until a timeout occurs before playing content. This event is optional, but can improve user experience.\n* `nopostroll` (EVENT) - Trigger this event to indicate that there will be no postroll ad. Otherwise, contrib-ads will trigger an adtimeout event after content ends if there is no postroll.\n* `ads-ad-started` (EVENT) - Trigger this when each individual ad begins.\n* `contentresumed` (EVENT) - If your integration does not result in a \"playing\" event when resuming content after an ad, send this event to signal that content can resume. This was added to support stitched ads and is not normally necessary.\n* `ads.startLinearAdMode()` (METHOD) — Call this method to signal that your integration is about to play a linear ad. This method triggers `adstart` to be emitted by the player.\n* `ads.endLinearAdMode()` (METHOD) — Call this method to signal that your integration is finished playing linear ads, ready for content video to resume. This method triggers `adend` to be emitted by the player.\n* `ads.skipLinearAdMode()` (METHOD) — Call this method to signal that your integration has received an ad response but is not going to play a linear ad.  This method triggers `adskip` to be emitted by the player.\n* `ads.stitchedAds()` (METHOD) — Get or set the `stitchedAds` setting.\n* `ads.videoElementRecycled()` (METHOD) - Returns true if ad playback is taking place in the content element.\n\nIn addition, video.js provides a number of events and APIs that might be useful to you.\nFor example, the `ended` event signals that the content video has played to completion.\n\n### Additional Events And Properties Your Integration May Want To Include\n\nThis project does not send these events, but these events are a convention used some some integrations that you may want to consider sending for consistency.\n\n#### Events\n\n* `ads-request`: Fired when ad data is requested.\n* `ads-load`: Fired when ad data is available following an ad request.\n* `ads-pod-started`: Fired when a LINEAR ad pod has started.\n* `ads-pod-ended`: Fired when a LINEAR ad pod has completed.\n* `ads-allpods-completed`: Fired when all LINEAR ads are completed.\n* `ads-ad-started`: Fired when the ad starts playing.\n* `ads-ad-ended`: Fired when the ad completes playing.\n* `ads-first-quartile`: Fired when the ad playhead crosses first quartile.\n* `ads-midpoint`: Fired when the ad playhead crosses midpoint.\n* `ads-third-quartile`: Fired when the ad playhead crosses third quartile.\n* `ads-pause`: Fired when the ad is paused.\n* `ads-play`: Fired when the ad is resumed.\n* `ads-mute`: Fired when the ad volume has been muted.\n* `ads-click`: Fired when the ad is clicked.\n\n#### Properties\n\n```\nplayer.ads.provider = {\n  \"type\": `String`,\n  \"event\": `Object`\n}\n\nplayer.ads.ad = {\n  \"type\": `String`,\n  \"index\": `Number`,\n  \"id\": `String`,\n  \"duration\": `Number`,\n  \"currentTime\": `Function`\n}\n```\n\n### Macros\n\nAn optional feature that contrib-ads supports is ad macros. Ad macros are often used by ad integrations\nto support addition of run-time values into a server URL or configuration.\n\nFor example, an ad integration that supports this feature might accept an ad server URL like this:\n\n`'http://example.com/vmap.xml?id={player.id}'`\n\nIn the ad integration, it would use the videojs-contrib-ads macro feature to process that URL like this:\n\n`serverUrl = player.ads.adMacroReplacement(serverUrl, true);`\n\nThis would result in a server URL like this:\n\n`'http://example.com/vmap.xml?id=12345'`\n\nwhere 12345 is the player ID.\n\nadMacroReplacement takes 3 arguments:\n\n1. The string that has macros to be replaced.\n2. `true` if the macro values should be URI encoded when they are inserted, else `false` (default `false`)\n3. An object that defines additional macros, such as `{'{five}': 5}` (default `{}`)\n\n#### Static Macros\n\n| Name                     | Value                          |\n|:-------------------------|:-------------------------------|\n| {player.id}              | The player ID                  |\n| {player.duration}        | The duration of current video* |\n| {timestamp}              | Current epoch time             |\n| {document.referrer}      | Value of document.referrer     |\n| {window.location.href}   | Value of window.location.href  |\n| {random}                 | A random number 0-1 trillion   |\n| {mediainfo.id}           | Pulled from mediainfo object   |\n| {mediainfo.name}         | Pulled from mediainfo object   |\n| {mediainfo.description}  | Pulled from mediainfo object   |\n| {mediainfo.tags}         | Pulled from mediainfo object   |\n| {mediainfo.reference_id} | Pulled from mediainfo object   |\n| {mediainfo.duration}     | Pulled from mediainfo object   |\n| {mediainfo.ad_keys}      | Pulled from mediainfo object   |\n\n\\* Returns 0 if video is not loaded. Be careful timing your ad request with this macro.\n\n#### Dynamic Macro: mediainfo.custom_fields.*\n\nA macro such as {mediainfo.custom_fields.foobar} allows the user to access the value of any property in `mediainfo.custom_fields`.\n\n#### Dynamic Macro: pageVariable.*\n\nA macro such as {pageVariable.foobar} allows the user access the value of any property on the `window` object. Only certain value types are allowed, per this table:\n\n| Type      | What happens                          |\n|:----------|:--------------------------------------|\n| String    | Used without any change               |\n| Number    | Converted to string automatically     |\n| Boolean   | Converted to string automatically     |\n| Null      | Returns the string `\"null\"`           |\n| Undefined | Logs warning and returns empty string |\n| Other     | Logs warning and returns empty string |\n\n## Cue Metadata Tracks\n\nAn optional feature that allows the manipulation of metadata tracks, specifically in the case of working with advertising cue points.\n\nFor example, an ad integration may want to make an ad request when a cuepoint change has been observed. To do this, an ad integration would need to do something like this:\n\n`player.ads.cueTextTracks.processMetadataTracks(player, processMetadataTrack)`\n\nwhere processMetadataTrack could be something like this:\n\n```\nfunction processMetadataTrack(player, track) {\n  track.addEventListener('cuechange', function() {\n    var cues = this.cues;\n    var processCue = function() {\n      // Make an ad request\n      ...\n    };\n    var cancelAds = function() {\n      // Optional method to dynamically cancel ads\n      // This will depend on the ad implementation\n      ...\n    };\n\n    player.ads.cueTextTracks.processAdTrack(player, cues, processCue, cancelAds);\n  });\n}\n```\n\nFor more information on the utility methods that are available, see [cueTextTracks.js](https://github.com/videojs/videojs-contrib-ads/blob/master/src/cueTextTracks.js).\n\n### setMetadataTrackMode\n\nA track is 'enabled' if the track.mode is set to `hidden` or `showing`. Otherwise, a track is `disabled` and is not updated. It is important to note that some tracks may be disabled as a workaround of not being able to remove them, and so should not be re-enabled. Ad integrations should be careful about setting the mode of tracks in these cases and shadow `setMetadataTrackMode` to determine which tracks are safe to change. For example, if all tracks should be hidden:\n\n```\nplayer.ads.cueTextTracks.setMetadataTrackMode = function(track) {\n  // Hide the tracks so they are enabled and get updated\n  // but are not shown in the UI\n  track.mode = 'hidden';\n}\n```\n\n## Single Preroll Example\n\nHere's an outline of what a basic ad integration might look like.\nIt only plays a single preroll ad before each content video, but does demonstrate the interaction points offered by the ads plugin.\n\nThis is not actually a runnable example, as it needs more information as specified in the code comments.\n\n```js\nvideojs('video', {}, function() {\n\n  var player = this;\n  player.ads(); // initialize the ad framework\n\n  // request ads whenever there's new video content\n  player.on('contentupdate', function(){\n    // fetch ad inventory asynchronously, then ...\n    player.trigger('adsready');\n  });\n\n  player.on('readyforpreroll', function() {\n    player.ads.startLinearAdMode();\n    // play your linear ad content\n    player.src('http://url/to/your/ad.content');\n\n    // when all your linear ads have finished… do not confuse this with `ended`\n    player.one('adended', function() {\n      player.ads.endLinearAdMode();\n    });\n  });\n\n});\n```\n\nYour actual integration will be significantly more complex.\nTo implement midroll ads, you'd want to listen to `timeupdate` events to monitor the progress of the content video's playback.\n\nFor a more involved example that plays both prerolls and midrolls, see the [example directory](example) in this project.\n\n## State Diagram\n\nTo manage communication between your ad integration and the video.js player, the ads plugin goes through a number of states.\nHere's a state diagram which shows the states of the ads plugin and how it transitions between them:\n\n![](ad-states.png)\n\n## Plugin Options\n\nThe ad framework can be configured with custom settings by providing a settings object at initialization:\n\n```js\nplayer.ads({\n  timeout: 3000\n});\n```\n\nThe current set of options are described in detail below.\n\n### timeout\n\nType: `number`\nDefault Value: 5000\n\nThe maximum amount of time to wait for an ad implementation to initialize before playback, in milliseconds.\nIf the viewer has requested playback and the ad implementation does not fire `adsready` before this timeout expires, the content video will begin playback.\nIt's still possible for an ad implementation to play ads after this waiting period has finished but video playback will already be in progress.\n\nOnce the ad plugin starts waiting for the `adsready` event, one of these things will happen:\n\n * integration ready within the timeout — this is the best case, preroll(s) will play without the user seeing any content video first.\n * integration ready, but after timeout has expired — preroll(s) still play, but the user will see a bit of content video.\n * integration never becomes ready — content video starts playing after timeout.\n\nThis timeout is necessary to ensure a good viewer experience in cases where the ad implementation suffers an unexpected or irreparable error and never fires an `adsready` event.\nWithout this timeout, the ads plugin would wait forever, and neither the content video nor ads would ever play.\n\nIf the ad implementation takes a long time to initialize and this timeout is too short, then the content video will beging playing before the first preroll opportunity.\nThis has the jarring effect that the viewer would see a little content before the preroll cuts in.\n\nDuring development, we found that five seconds seemed to be long enough to accommodate slow initialization in most cases, but still short enough that failures to initialize didn't look like failures of the player or content video.\n\n### prerollTimeout\n\nType: `number`\nDefault Value: 100\n\nThe maximum amount of time to wait for an ad implementation to initiate a preroll, in milliseconds.\nIf `readyforpreroll` has been fired and the ad implementation does not call `startLinearAdMode()` before `prerollTimeout` expires, the content video will begin playback.\n`prerollTimeout` is cumulative with the standard timeout parameter.\n\nOnce the ad plugin fires `readyforpreroll`, one of these things will happen:\n\n * `startLinearAdMode()` called within the timeout — preroll(s) will play without the user seeing any content video first.\n * `skipLinearAdMode()` is called within the timeout because there are no linear ads in the response or you already know you won't be making a preroll request - content video plays without preroll(s).\n * `startLinearAdMode()` is never called — content video plays without preroll(s).\n * `startLinearAdMode()` is called, but after the prerollTimeout expired — bad user experience; content video plays a bit, then preroll(s) cut in.\n\nThe prerollTimeout should be as short as possible so that the viewer does not have to wait unnecessarily if no preroll is scheduled for a video.\nMake this longer if your ad integration needs a long time to decide whether it has preroll inventory to play or not.\nIdeally, your ad integration should already know if it wants to play a preroll before the `readyforpreroll` event.  In this case, skipLinearAdMode() should be called to resume content quickly.\n\n### postrollTimeout\n\nType: `number`\nDefault Value: 100\n\nThe maximum amount of time to wait for an ad implementation to initiate a postroll, in milliseconds.\nIf `contentended` has been fired and the ad implementation does not call `startLinearAdMode()` before `postrollTimeout` expires, the content video will end playback.\n\nOnce the ad plugin fires `contentended`, one of these things will happen:\n\n * `startLinearAdMode()` called within the timeout — postroll(s) will play without the user seeing any content video first.\n * `skipLinearAdMode()` is called within the timeout - content video stops.\n * `startLinearAdMode()` is never called — content video stops.\n * `startLinearAdMode()` is called, but after the postrollTimeout expired — content video stops\n\nThe postrollTimeout should be as short as possible so that the viewer does not have to wait unnecessarily if no postroll is scheduled for a video.\nMake this longer if your ad integration needs a long time to decide whether it has postroll inventory to play or not.\nIdeally, your ad integration should already know if it wants to play a postroll before the `contentended` event.\n\n### stitchedAds\n\nType: `boolean`\nDefault Value: `false`\n\nSet this to true if you are using ads stitched into the content video. This is necessary for ad events to be sent correctly.\n\n### debug\n\nType: `boolean`\nDefault Value: false\n\nIf debug is set to true, the ads plugin will output additional information about its current state during playback.\nThis can be handy for diagnosing issues or unexpected behavior in an ad integration.\n\n## Plugin Events\nThe plugin triggers a number of custom events on the player during its operation. As an ad provider, you can listen for them to trigger behavior in your implementation. They may also be useful for other plugins to track advertisement playback.\n\n### adstart\nThe player has entered linear ad playback mode. This event is fired directly as a consequence of calling `startLinearAdMode()`. This event only indicates that an ad break has begun; the start and end of individual ads must be signalled through some other mechanism.\n\n### adend\nThe player has returned from linear ad playback mode. This event is fired directly as a consequence of calling `startLinearAdMode()`. Note that multiple ads may have played back between `adstart` and `adend`.\n\n### adskip\nThe player is skipping a linear ad opportunity and content-playback should resume immediately.  This event is fired directly as a consequence of calling `skipLinearAdMode()`. It can indicate that an ad response was made but returned no linear ad content or that no ad call is going to be made at either the preroll or postroll timeout opportunities.\n\n### adtimeout\nA timeout managed by the plugin has expired and regular video content has begun to play. Ad integrations have a fixed amount of time to inform the plugin of their intent during playback. If the ad integration is blocked by network conditions or an error, this event will fire and regular playback resumes rather than stalling the player indefinitely.\n\n## Runtime Settings\nOnce the plugin is initialized, there are a couple properties you can\naccess to inspect the plugin's state and modify its behavior.\n\n### contentSrc\nIn order to detect changes to the content video, videojs-contrib-ads\nmonitors the src attribute of the player. If you need to make a change\nto the src attribute during content playback that should *not* be\ninterpreted as loading a new video, you can update this property with\nthe new source you will be loading:\n\n```js\n// you might want to switch from a low bitrate version of a video to a\n// higher quality one at the user's request without forcing them to\n// re-watch all the ad breaks they've already viewed\n\n// first, you'd update contentSrc on the ads plugin to the URL of the\n// higher bitrate rendition:\nplayer.ads.contentSrc = 'movie-high.mp4';\n\n// then, modify the src attribute as usual\nplayer.src('movie-high.mp4');\n```\n\n### disableNextSnapshotRestore\nPrevents videojs-contrib-ads from restoring the previous video source\n\nIf you need to change the video source during ad playback, you can use _disableNextSnapshotRestore_ to prevent videojs-contrib-ads to restore to the previous video source.\n```js\nif (player.ads.state  === 'ad-playback') {\n    player.ads.disableNextSnapshotRestore = true;\n    player.src('another-video.mp4');\n}\n```\n\n## Migration Guides\n\n* [Migrating to 2.0](migrating-to-2.0.md)\n* [Migrating to 3.0](migrating-to-3.0.md)\n* [Migrating to 4.0](migrating-to-4.0.md)\n\n## Building\n\nThe ads plugin is designed to be built with `npm`.\n\nIf you don't already have `npm`, then download and install [Node.js](http://nodejs.org/) (which comes with npm).\n\nWith NPM ready, you can download the ads plugin's build-time dependencies and then build the ads plugin.\nOpen a terminal to the directory where you've cloned this repository, then:\n\n```sh\n$ npm install\n$ npm run build\n```\n\nWe will run a suite of unit tests and code formatting checks, then create a `dist/` directory.\nInside you'll find the minified ads plugin file `videojs.ads.min.js`, the unminified `videojs.ads.js`, and the CSS `videojs.ads.css`.\n\n## Release History\n\nA short list of features, fixes and changes for each release is available in [CHANGELOG.md](https://github.com/videojs/videojs-contrib-ads/blob/master/CHANGELOG.md).\n\n## License\n\nSee [LICENSE-APACHE2](LICENSE-APACHE2).\n","version":"4.2.2","downloads":14},{"name":"videojs-abloop","description":"A video.js plugin allowing looping of a section of video, with GUI and API interface","keywords":["videojs-plugin","videojs"],"license":"MIT","time":{"modified":"2017-11-17T11:00:33.826Z","created":"2016-12-14T11:35:23.682Z","0.4.2":"2016-12-14T11:35:23.682Z","0.4.3":"2016-12-14T11:36:33.511Z","0.4.4":"2016-12-14T12:02:29.412Z","0.4.5":"2017-08-04T13:02:45.644Z"},"readme":"This is a plugin for video.js (http://videojs.com/)\n\nIt provides an A/B loop function, allowing a section of a video to be looped over repeatedly.\n\nThe settings can be changed dynamically, either programmatically or via a user interface.\n\nExample\n=======\n\nSee https://cdn.rawgit.com/phhu/videojs-abloop/master/sample/basic.html\n\n```html\n<html>\n\t<head>\n\t\t<script src=\"https://vjs.zencdn.net/5.6.0/video.js\"></script>\n\t\t<link href=\"https://vjs.zencdn.net/5.6.0/video-js.css\" rel=\"stylesheet\" /> \n\t\t<script src=\"https://cdn.rawgit.com/phhu/videojs-abloop/master/dist/videojs-abloop.min.js\"></script>\t\t\n\t</head>\n\t<body>\n\t\t<video id=\"vid\" controls class=\"video-js\"  >\n\t\t\t<source src=\"https://vjs.zencdn.net/v/oceans.mp4\" type='video/mp4'>\n\t\t</video>\t\n\t\t<script>\t\n\t\t\tvar video = videojs(\"vid\",{\n\t\t\t\tplugins: {\n\t\t\t\t\tabLoopPlugin: {}\n\t\t\t\t}\n\t\t\t});\n\t\t\tvideo.ready(function(){\n\t\t\t\tthis.abLoopPlugin.setStart(10).setEnd(15).playLoop();\n\t\t\t});\n\t\t</script>\n\t</body>\n</html>\n```\n\nInterface\n=========\n\nGUI\n---\n\nButtons are created on the right hand side of the control bar to set start and end times for the loop, and to enable and disable looping.\n\n![GUI screeshot](/images/interfaceScreenshot.png \"GUI screeshot\")\n\n* Start and end buttons (3rd and 2nd from right, showing times):\n    * Left click: set start/end time to current video position. \n    * Right click: skip the video to start/end position. \n    * Shirt + left / right click: move start / end position back / forward (by 0.5s)\n    * Ctrl  + left / right click: move start / end position back / forward (by 0.05s)\n\n* Loop button (rightmost button):\n    * Left click: enable / disable looping. \n    * right click: cycle settings for pausing automatically before or after looping.  \n    * Shift + left/right click: set/extract URL fragment for current loop settings\n    * Ctrl + left/right click: set/extract full URL for video with current loop settings\n    * Alt + left/right click: set/extract relative URL for video with current loop settings\n\nYou can set the buttons not to create using the ```createButtons``` setup option.\n\nAPI\n---\n\nThe plugin is controlled by an internal opts object that looks something like this.\n\n```javascript\n{\n\t\"start\":0,\n\t\"end\":10,\n\t\"enabled\":false,\n\t\"loopIfBeforeStart\":true,\n\t\"loopIfAfterEnd\":true,\n\t\"pauseBeforeLoop\":false,\n\t\"pauseAfterLoop\":false\n}\n```\n\nThese can be set on plugin setup or dynamically via API commands.\n\nAssuming ```video``` references a videojs player instance:\n* Look at ```video.abLoopPlugin``` for functions to call to control the loop.\n* The API methods can be chained together like this: ```video.abLoopPlugin.setStart().setEnd(8).goToStart().enable();```\n* ```setStart``` and ```setEnd``` will set the start and end positions to the current video position if called with no parameter.\n* Options can be set  with ```video.abLoopPlugin.setOptions({'optionname':value})``` \n* Options can be read with ```video.abLoopPlugin.getOptions()``` or to return some options ```video.abLoopPlugin.getOptions([\"start\",\"end\"])```.\n  * You could save settings by writing this as JSON or whatever (see in samples folder for a crude example).\n* An onLoop callback can be set at ```video.abLoopPlugin.onLoopCallBack``` or in the setup options (see example below).\n* An onOptionsChange callback can be set at ```video.abLoopPlugin.onOptionsChange``` or in the setup options. This is useful if you implement your own interface.\n* You can also get and apply URL fragments to represent the looping section. E.g. ```#t=10,15```. \n\nAPI commands\n------------\n\n| API command |  notes | example |\n|-------------|---------|-------|\n|setOptions(optionsObject)     | Options not specified will not be set  | setOptions({\"start\":40,\"end\":45\"}) |\n|getOptions(ArrayOfOptionNames?)| Call without an argument to get them all.| getOptions([\"start\",\"end\"])|\n|goToStart()                   | set player currentTime to start time |\n|goToEnd()                     ||\n|setStart(startTime?)\t       | Call startTime() to set the startTime to the player's currentTime | startTime() startTime(30) startTime(\"0:34:23\") |  \n|setEnd(endTime?)|   Call endTime() to set the startTime to the player's currentTime\n|adjustStart(adjustmentInSec) | adjustStart(\"1m30s\") or adjustStart(\"1:20:30\") also work | adjustStart(-5)\n|adjustEnd(adjustmentInSec)| \n|enable()|  enable the plugin.\n|disable()| \n|toggle()| change enabled status\n|togglePauseAfterLooping()| ||\n|togglePauseBeforeLooping()| ||\n|cyclePauseOnLooping()| cycle between four different compinations of settings for pausing on looping\n|validateOptions()| set options to valid values if they are not already. This is called every time the loop condition is checked anyway, but you might want to use it manually if setting options while the player is paused or the plugin disabled\n|resetToInitialOptions() | reset options to the ones provided on setup\n|playLoop()|  for convenience, plays the loop from its start. Equivalent to abLoopPlugin.validateOptions().goToStart().enable().player.play()\n|player| reference to parent player object. e.g. video.abLoopPlugin.enable().player.play()\n|version| version number\n|getAbsoluteUrl()| gets the full URL of the loop - e.g. http://domain.com/path/to/video.mp4#t=12,13\n|getUrl()| gets the URL of the loop - e.g. path/to/video.mp4#t=12,13\n|getUrlFragment() | gets the loop URL fragment - e.g. #t=12,13\n|applyUrl(url)  | Set the video source and apply loop start and end as per the t=start,end fragment | applyUrl('http://path/to/video.mp4#t=12,13')|\n|applyUrlFragment(urlFragment)  | As above, but only sets the loop start and end from the URL hash fragment | applyUrlFragment('#t=12,13')  applyUrlFragment('http://path/ignored.mp4#t=12,13')\n|loopRequired()|  returns true or false depending on whether the loop would be activated in the current state. |\n\nKeyboard\n--------\n\nYou could use the existing [hotkeys plugin](https://github.com/ctd1500/videojs-hotkeys) to make keyboard controls. See the samples directory for an example.\n\nSample usage\n============\n\nSee the samples folder for working examples. \n\nInclude the script:\n\n```html\n<script src=\"videojs-abloop.js\"></script>\n```\nAlternatively source it from rawgit.com:\n```html\n<script src=\"https://cdn.rawgit.com/phhu/videojs-abloop/master/dist/videojs-abloop.min.js\">\n```\n\nYou initialise the plugin with defaults, and then can set properties at runtime.\n\n```javascript\n\n//initialise the video with the plugin and initial settings\nvar video = videojs(\"videoid\",{\n\tplugins: {\n\t\tabLoopPlugin: {\n\t\t\tstart:50    \t//in seconds - defaults to 0\n\t\t\t,end:55    \t//in seconds. Set to  false to loop to end of video. Defaults to false\n\t\t\t,enabled:false\t\t\t//defaults to false\n\t\t\t,loopIfBeforeStart:false //allow video to play normally before the loop section? defaults to true\n\t\t\t,loopIfAfterEnd:true\t// defaults to true\n\t\t\t,pauseAfterLooping: false     \t//if true, after looping video will pause. Defaults to false\n\t\t\t,pauseBeforeLooping: false     \t//if true, before looping video will pause. Defaults to false\n\t\t\t,createButtons: true\t\t//defaults to true\n\t\t}\n\t}\n});\n\nvideo.play();\n\nsetTimeout(function() { \n\tconsole.log(\"setting new start and end...\");\n\tvideo.abLoopPlugin.setStart().setEnd(8).enable();\n} , 2000);\n\nvideo.abLoopPlugin.onLoopCallBack = function(api,player){\n\tvar opts = api.getOptions();\n\tconsole.log(\"Looping back to %s sec on %s\",opts.start, player.currentSrc() );\n\tapi.setOptions({'pauseAfterLoop': true}); \n\tapi.setStart(5);\n\tapi.setEnd(15);\n};\n```\n","version":"0.4.5","downloads":54},{"name":"videojs-airplay","description":"Adds an airplay button to a control bar if the browser supports airplay","author":{"name":"Jon Gubman"},"keywords":["videojs","videojs-plugin","plugin","airplay"],"license":"Apache-2.0","time":{"modified":"2017-06-27T00:18:42.868Z","created":"2015-12-16T01:34:55.204Z","0.1.0":"2015-12-16T01:34:55.204Z","1.0.2":"2017-06-20T23:07:15.188Z","1.0.3":"2017-06-27T00:18:42.868Z"},"readme":"# videojs-airplay\nVideojs Plugin that adds an airplay button to the control bar if the browser supports the WebKitPlaybackTargetAvailabilityEvent (currently Safari 9.0)\n\n## NOTES\nBuilt for video.js 5.0 and above.\n\n## Usage\n\nInclude:\n* `videojs-airplayButton.css`\n* `videojs-airplayButton.js`\n\n```js\n  videojs('example-video', plugins: { airplayButton: {} });\n```\n\n## License\n\nLicesned Apache 2. See LICENSE file.\n","version":"1.0.3","downloads":61},{"name":"videojs-analytics","description":"Track Google Analytics events from video.js players","author":{"name":"Adam Oliver","email":"mail@adamoliver.net"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-04-27T15:27:27.242Z","created":"2017-01-16T16:07:57.918Z","0.0.0":"2017-01-16T16:07:57.918Z","0.1.0":"2017-01-18T18:26:50.901Z","0.1.1":"2017-01-19T15:56:38.746Z","0.1.2":"2017-01-19T18:25:22.900Z","0.1.3":"2017-01-20T12:46:56.707Z","1.0.0":"2017-04-27T15:27:27.242Z"},"readme":"# videojs-analytics\n\nTrack Google Analytics events from video.js players\n\n## Installation\n\n```sh\nnpm install --save videojs-analytics\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-analytics\n```\n\n## Usage\n\nTo include videojs-analytics on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-analytics.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.analytics();\n</script>\n```\n\n### Available options\n\nThere are two options you can pass to the plugin. The first is to configure which events you would like to trigger from videojs.\nThis option is an array objects for each event.  Each event contains the name of the event triggered by Video.js and a label and action which will be sent to Google Analytics.  Choose from the list below:\n\n```\nplayer.analytics({\n  events: [\n    {\n      name: 'play',\n      label: 'video play',\n      action: 'play',\n    },\n    {\n      name: 'pause',\n      label: 'video pause',\n      action: 'pause',\n    },\n    {\n      name: 'ended',\n      label: 'video ended',\n      action: 'ended',\n    },\n    {\n      name: 'fullscreenchange',\n      label: {\n        open: 'video fullscreen open',\n        exit: 'video fullscreen exit'\n      },\n      action: 'fullscreen change',\n    },\n    {\n      name: 'volumechange',\n      label: 'volume changed',\n      action: 'volume changed',\n    },\n    {\n      name: 'resize',\n      label: 'resize',\n      action: 'resize',\n    },\n    {\n      name: 'error',\n      label: 'error',\n      action: 'error',\n    },\n    {\n      name: 'resize',\n      label: 'resize',\n      action: 'resize',\n    },\n    {\n      name: 'resolutionchange',\n      action: 'resolution change',\n    },\n    {\n      name: 'timeupdate',\n      action: 'time updated',\n    }\n  ]\n})\n```\n\nYou can also add your own custom events which are not included in the above list. If you include any custom events the event sent to Google Analytics will be the name of the event.\n\n\nTo configure the default category names for audio and video files use the `defaultAudioCategory` `defaultVideoCategory` properties when initialising the plugin.\n\n```\nplayer.analytics({\n  defaultAudioCategory: 'Audio',\n  defaultVideoCategory: 'Video'\n})\n\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-analytics via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-analytics');\n\nvar player = videojs('my-video');\n\nplayer.analytics();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-analytics'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.analytics();\n});\n```\n\n## License\n\nMIT. Copyright (c) Adam Oliver &lt;mail@adamoliver.net&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0","downloads":938},{"name":"videojs-ass","description":"ASS/SSA subtitle overlay for videojs","author":{"name":"Sunny Li"},"keywords":["videojs","videojs-plugin","subtitle","ASS","SSA"],"license":"Apache-2.0","time":{"modified":"2017-08-21T04:44:02.835Z","created":"2014-08-17T04:01:16.110Z","0.2.2":"2014-08-17T04:01:16.110Z","0.2.4":"2015-01-22T04:31:03.985Z","0.2.5":"2015-07-02T04:00:05.782Z","0.3.3":"2015-09-07T23:27:39.015Z","0.5.0":"2015-11-12T05:20:29.643Z","0.5.1":"2015-11-12T05:24:07.378Z","0.5.5":"2016-01-18T06:26:10.015Z","0.5.6":"2016-01-21T06:01:35.849Z","0.6.0":"2016-02-02T03:17:45.350Z","0.6.1":"2016-08-06T03:32:56.434Z","0.6.2":"2016-12-20T16:24:08.959Z","0.6.3":"2017-01-09T01:39:20.621Z","0.7.0":"2017-05-30T16:51:24.653Z","0.8.0":"2017-08-20T16:38:52.584Z"},"readme":"# videojs-ass\r\n\r\nAdd **Advanced SubStation Alpha (ASS)** subtitles support to\r\n[videojs](https://github.com/videojs/video.js) using the\r\n[libjass](https://github.com/Arnavion/libjass) library.\r\n\r\nCheck out the demo\r\n[here](https://sunnyli.github.io/videojs-ass/example.html)\r\n\r\n\r\n## Install\r\n\r\nFor plugin that supports videojs v5.x install using either:\r\n\r\n- `bower install videojs-ass`\r\n\r\nor\r\n\r\n- `npm install videojs-ass`\r\n\r\nFor videojs v4:\r\n\r\nJust specify version to be within:\r\n\r\n```\r\n\"videojs-ass\": \">=0.3.0 < 0.5.0\"\r\n```\r\nfor bower or npm whichever you prefer using.\r\n\r\n\r\n## Usage\r\n\r\nInitialize the `ass` plugin with the `src` field like the following:\r\n\r\n```\r\nvideojs('player_id', {\r\n  plugins: {\r\n    ass: {\r\n      src: 'subs/subtitles.ass'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n| Option      | Default       | Description                                                |\r\n| ----------- | ------------- | ---------------------------------------------------------- |\r\n| src         | -<sup>1</sup> | `.ass` / `.ssa` source.                                    |\r\n| label       | -<sup>2</sup> | subtitle track label that shows up in the subtitles picker |\r\n| delay       | 0<sup>3</sup> | delay subtitle rendering by the specified value in seconds |\r\n| rate        | 1             | subtitle update speed relative to video playback rate      |\r\n| enableSvg   | true          | see [here][svg-effects] regarding SVG filter               |\r\n| fontMap     | -             | see [here][font-map] regarding using custom web fonts      |\r\n| fontMapById | -             | alternate to above, takes id and runs [this][font-map-el]  |\r\n| videoWidth  | -<sup>4</sup> | metadata to assist in determining the optimal (cont below) |\r\n| videoHeight | -<sup>4</sup> | (cont) subtitle letterboxing ratio                         |\r\n\r\n**Footnotes:**\r\n\r\n1. This property is required!\r\n2. Has fallback values but you should provide a better label.\r\n3. Value can be negative\r\n4. Generally, you should set these values when using external videojs providers\r\n   as they might not expose the video dimensions to the player.\r\n\r\n[svg-effects]: https://github.com/Arnavion/libjass/blob/v0.10.0/README.md#what-browser-and-javascript-features-does-libjass-need\r\n[font-map]: https://arnavion.github.io/libjass/api.xhtml#libjass.renderers.RendererSettings.fontMap\r\n[font-map-el]: https://arnavion.github.io/libjass/api.xhtml#libjass.renderers.RendererSettings.makeFontMapFromStyleElement\r\n","version":"0.8.0","downloads":86},{"name":"videojs-ass-es6","description":"ASS/SSA subtitle overlay for videojs","author":{"name":"Yme-Jan Iedema","email":"yme-jan@iedema.me"},"keywords":["videojs","videojs-plugin","subtitle","ASS","SSA"],"license":"Apache-2.0","time":{"modified":"2017-09-27T22:03:45.303Z","created":"2017-09-27T21:46:15.907Z","0.0.1":"2017-09-27T21:46:15.907Z","0.0.2":"2017-09-27T21:48:56.901Z","0.0.3":"2017-09-27T21:57:40.351Z","0.0.4":"2017-09-27T22:03:45.303Z"},"readme":"# videojs-ass-es6\n\nAdd **Advanced SubStation Alpha (ASS)** subtitles support to\n[videojs](https://github.com/videojs/video.js) using the\n[libjass](https://github.com/Arnavion/libjass) library.\n\n\n## Install\n\nFor plugin that supports videojs v5.x install using either:\n\n- `yarn add videojs-ass-es6`\n- `npm install videojs-ass-es6`\n\n## Usage\n\nInitialize the `ass` plugin with the `src` field like the following:\n\n```js\nvideojs('player_id', {\n  plugins: {\n    ass: {\n      subtitles: [\n        {src: 'subs/subtitles.ass', label: 'English', srclang: 'en'}\n      ]\n    }\n  }\n});\n```\n\n| Option      | Default       | Description                                                |\n| ----------- | ------------- | ---------------------------------------------------------- |\n| src         | -<sup>1</sup> | `.ass` / `.ssa` source.                                    |\n| label       | -<sup>2</sup> | subtitle track label that shows up in the subtitles picker |\n| label       | -<sup>3</sup> | subtitle language code                                     |\n\n**Footnotes:**\n\n1. This property is required!\n2. Has fallback values but you should provide a better label.\n3. Should be the 2 character language code of the subtitle\n","version":"0.0.4","downloads":25},{"name":"videojs-bif","description":"Video.js plugin for supporting BIF.","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com","url":"http://www.careyhinoki.me/"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-02-03T19:57:12.309Z","created":"2016-10-31T23:35:36.468Z","1.0.0":"2016-10-31T23:35:36.468Z","1.0.1":"2016-11-03T22:08:20.519Z","1.0.2":"2016-11-10T00:25:54.390Z","1.0.3":"2016-11-11T02:42:57.393Z","1.0.4":"2016-11-23T17:44:26.424Z","1.0.5":"2017-01-18T02:37:48.082Z","1.0.6":"2017-02-03T19:57:12.309Z"},"readme":"# videojs-bif\n\n> Video.js plugin for supporting BIF.\n\nFor more information on BIF, see https://sdkdocs.roku.com/display/sdkdoc/Trick+Mode+Support.\n\n![Example](https://github.com/chemoish/videojs-bif/blob/master/asset/img/example.png?raw=true)\n\n## Getting Started\n\n#### Include\n\n```html\n<script src=\"/path/to/videojs.bif.min.js\"></script>\n```\n\n#### Enable\n\n```js\n// Generally BIF files are large, so you have the ability to manage fetching on your own.\n// If this is the route you take, you can update plugin configuration at any time by rerunning the plugin.\n//\n// See documentation or example for more detail.\nvideojs('player_id').bif({\n  src: '/path/to/bif.bif',\n});\n```\n\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### [createBIFImage]\n\nType: `function`  \nDefault:\n\n```js\ncreateBIFImage() {\n  const BIFImage = document.createElement('img');\n\n  BIFImage.className = 'bif-image';\n\n  return BIFImage;\n}\n```\n\nWill be updated with new image previews—dependent on the current mouse over time in the video.\n\n#### [createBIFTime]\n\nType: `function`  \nDefault:\n\n```js\ncreateBIFTime() {\n  const BIFTime = document.createElement('span');\n\n  BIFTime.className = 'bif-time';\n\n  return BIFTime;\n}\n```\n\nWill be updated with new time—dependent on the current mouse over time in the video.\n\n#### data\n\nType: `ArrayBuffer`  \n\n#### [template]\n\nType: `function`  \nDefault:\n\n```js\ntemplate() {\n  const template = document.createElement('div');\n\n  template.className = 'bif';\n\n  // append image element only if the images are ready\n  if (this.hasImages()) {\n    template.appendChild(this.BIFImage);\n  }\n\n  template.appendChild(this.BIFTime);\n\n  return template;\n}\n```\n\nWill be updated every time configuration changes—default implementation will show time immediately, then show images when available.\n\n#### [src]\n\nType: `string`  \n\nThe source must abide by the [BIF](https://sdkdocs.roku.com/display/sdkdoc/Trick+Mode+Support) format.\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli\n\nnpm install\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-bif/blob/master/LICENSE).\n","version":"1.0.6","downloads":732},{"name":"videojs-bitrate-graph","description":"Shows a bitrate graph above the video controls","author":{"name":"Josh Holmer","email":"jholmer.in@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-13T03:22:33.367Z","created":"2018-01-13T03:22:33.367Z","0.1.0":"2018-01-13T03:22:33.367Z"},"readme":"# videojs-bitrate-graph\n\nShows a bitrate graph above the video controls\n\n## Installation\n\n```sh\nnpm install --save videojs-bitrate-graph\n```\n\n## Usage\n\nTo include videojs-bitrate-graph on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-bitrate-graph.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.bitrateGraph({ bitrates: [4, 8, 3] });\n</script>\n```\n\nEnsure your videojs container has a width set. If you let the width be determined automatically,\nthere may be bugs with the graph not being sized correctly.\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-bitrate-graph via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-bitrate-graph');\n\nvar player = videojs('my-video');\n\nplayer.bitrateGraph();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-bitrate-graph'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.bitrateGraph();\n});\n```\n\n## License\n\nMIT. Copyright (c) Josh Holmer &lt;jholmer.in@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.0","downloads":41},{"name":"videojs-brand","description":"Simple plugin that adds your logo brand in the player controls","author":{"name":"Emmanuel Alves","email":"manel.pb@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-06-01T17:05:11.629Z","created":"2016-07-27T17:49:06.086Z","0.0.1":"2016-07-27T17:49:06.086Z","0.0.2":"2016-07-27T17:51:38.008Z","0.0.3":"2016-07-27T19:23:37.358Z","0.0.4":"2016-07-27T21:07:55.207Z"},"readme":"# videojs-brand\n\nSimple plugin that adds your logo brand in the player controls\n\n![alt tag](https://raw.githubusercontent.com/manelpb/videojs-brand/master/screenshot.png)\n\n## Installation\n\n```sh\nnpm install --save videojs-brand\n```\n\n## Usage\n\nTo include videojs-brand on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-brand.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n  player.brand({\n  \timage: \"/logo-example.png\",\n    title: \"Logo Title\",\n    destination: \"http://www.google.com\",\n    destinationTarget: \"_top\"\n  });\n</script>\n```\n\n## License\n\nMIT. Copyright (c) Emmanuel Alves / http://github.com/manelpb\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.4","downloads":117},{"name":"videojs-bug","description":"Adds a logo bug to the videojs player with adjustable position, size, and opacity","author":{"name":"johndanek","email":"john.danek@teamcoco.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-12-05T20:06:13.546Z","created":"2017-02-17T01:54:14.274Z","0.0.0":"2017-02-17T01:54:14.274Z","0.1.0":"2017-02-17T01:57:31.553Z","0.1.1":"2017-02-17T02:04:40.929Z","0.1.2":"2017-02-17T02:13:40.987Z","1.0.0-rc.1":"2017-02-17T02:29:30.930Z","1.0.0-rc.2":"2017-02-21T19:04:18.839Z","1.0.0-rc.3":"2017-02-21T19:08:50.537Z"},"readme":"# videojs-bug\n\nAdds a [logo bug](https://en.wikipedia.org/wiki/Digital_on-screen_graphic) to your videojs player with adjustable position, size, link, and opacity.\n\nExample screenshot:\n\n![Example Bug Screenshot](http://cdn.teamcococdn.com/file/screen-shot-2017-02-16-at-6-08-20-pm-58a65b5b2f8c7.png \"example bug screenshot\")\n\nOriginally brought to you by Team Coco. Yep, Conan has really been getting into JavaScript lately.\n\n![Conan Typing](http://cdn.teamcococdn.com/file/ezgif-com-792b779215-58a6465534ac5.gif \"Conan Typing\")\n\n## Installation\n\n```sh\nnpm install --save videojs-bug\n```\n\n## Example\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-bug.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.bug({\n    height: 50,\n    imgSrc: 'http://cdn.teamcococdn.com/image/frame:1/teamcoco_twitter_128x128.png',\n    link: \"http://www.teamcoco.com\",\n    opacity: 0.5,\n    padding: '8px',\n    position: 'br',\n    width: 50\n  });\n</script>\n```\n\n## Options\n\n#### height (integer)\nDesired height of your bug. If not provided, original img height is used.\n\n#### imgSrc (String, *mandatory*)\nURL to the image you wish to use as a bug.\n\n#### link (String)\nURL that you would like to use as the `<a>`'s href value. If left blank, no `<a>` is used.\n\n#### opacity (double)\nNumber between 0 and 1 used for the bug's opacity. Defaults to 0.7.\n\n#### padding (String)\nPadding string set on the bug. Accepts any valid CSS padding value. Defaults to '0px'.\n\n#### position (String)\nWhere you want the bug to be placed within the videojs player. Valid values are:\n - 'tl' (top left)\n - 'tr' (top right)\n - 'bl' (bottom left)\n - 'br' (bottom right)\n\nAny other value is changed to the default value 'br'.\n\n#### width (integer)\nDesired height of your bug. If not provided, original img width is used.\n\n## Usage\n\nTo include videojs-bug on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-bug.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n\n  player.bug({\n    height: 50,\n    imgSrc: 'http://cdn.teamcococdn.com/image/frame:1/teamcoco_twitter_128x128.png',\n    link: \"http://www.teamcoco.com\",\n    opacity: 0.5,\n    padding: '8px',\n    position: 'br',\n    width: 50\n  });\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-bug via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-bug');\n\nvar player = videojs('my-video');\n\nplayer.bug({\n  height: 50,\n  imgSrc: 'http://cdn.teamcococdn.com/image/frame:1/teamcoco_twitter_128x128.png',\n  link: \"http://www.teamcoco.com\",\n  opacity: 0.5,\n  padding: '8px',\n  position: 'br',\n  width: 50\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-bug'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.bug({\n    height: 50,\n    imgSrc: 'http://cdn.teamcococdn.com/image/frame:1/teamcoco_twitter_128x128.png',\n    link: \"http://www.teamcoco.com\",\n    opacity: 0.5,\n    padding: '8px',\n    position: 'br',\n    width: 50\n  });\n});\n```\n\n## License\n\nMIT. Copyright (c) johndanek &lt;john.danek@teamcoco.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0-rc.3","downloads":28},{"name":"videojs-chapter-nav","description":"video.js plugin for skip to next/previous chapter buttons.","author":{"name":"Fancy Bits, LLC"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-05-05T00:19:45.527Z","created":"2017-05-05T00:19:45.527Z","1.0.0":"2017-05-05T00:19:45.527Z"},"readme":"# videojs-chapter-nav\n\nvideo.js plugin for skip to next/previous chapter buttons.\n\nBuilt for video.js 5.x and above.\n\n## Usage\n\n```scss\n@import \"~videojs-chapter-nav/src/plugin\";\n```\n\n```js\nrequire('videojs-chapter-nav')\nvideojs(element, {\n  plugins: {\n    chapterNav: {}\n  }\n})\n```\n\n## License\n\nMIT\n","version":"1.0.0","downloads":9},{"name":"videojs-chapter-thumbnails","description":"Video.js plugin for supporting chapter thumbnails","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-04-12T15:49:24.091Z","created":"2015-08-20T20:54:38.969Z","0.3.0":"2015-08-20T20:54:38.969Z","0.3.1":"2015-09-01T20:52:40.896Z","1.0.0":"2015-10-02T21:30:44.771Z","1.0.1":"2015-10-03T00:00:41.721Z","1.0.2":"2015-10-09T03:29:12.957Z","1.1.0":"2015-10-28T01:55:17.534Z","1.1.1":"2015-10-31T01:35:39.486Z","1.1.2":"2015-12-11T03:24:06.037Z","1.1.3":"2016-08-30T19:06:23.751Z","1.1.4":"2016-08-30T19:13:54.962Z","2.0.0":"2016-08-31T01:47:44.726Z","3.0.0":"2016-09-01T03:03:35.007Z","3.1.0":"2016-09-15T00:33:07.835Z","3.1.2":"2017-04-06T00:03:15.978Z","3.2.0":"2017-04-06T00:21:56.358Z"},"readme":"# videojs-chapter-thumbnails\n\n[![Build Status](https://travis-ci.org/chemoish/videojs-chapter-thumbnails.svg)](https://travis-ci.org/chemoish/videojs-chapter-thumbnails)\n\n> Video.js plugin for supporting **WebVTT** chapter thumbnails.\n\n![Example](https://github.com/chemoish/videojs-chapter-thumbnails/blob/master/asset/img/example.png?raw=true)\n\n## Getting Started\n\n#### Include\n\n```html\n<!-- optional: default styles -->\n<link href=\"/path/to/videojs.chapter-thumbnails.min.css\" rel=\"stylesheet\">\n\n<script src=\"/path/to/videojs.chapter-thumbnails.min.js\"></script>\n```\n\n#### Enable\n\n```js\nvideojs('player_id').chapter_thumbnails({\n  src: '/path/to/chapters.vtt'\n});\n```\n\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### label\n\nType: `string`  \nDefault: `English`\n\n#### language\n\nType: `string`  \nDefault: `en`\n\n#### src\n\nType: `string`\n\n#### template\n\nType: `Function`  \nDefault:\n\n```js\ntemplate(cue = {}, textTrack) {\n  let cueText;\n\n  // NOTE: if `cue.text` isn't parseable, just send it through instead of blowing up.\n  // DRAGON: this probably opens up a possible script injection\n  try {\n    cueText = JSON.parse(cue.text || '{}');\n  } catch (e) {\n    cueText = cue.text;\n  }\n\n  const {\n    image,\n    title,\n  } = cueText;\n\n  const template = document.createElement('div');\n  template.className = 'vjs-chapters-thumbnails-item';\n\n  if (image) {\n    const img = document.createElement('img');\n    img.className = 'vjs-chapters-thumbnails-item-image';\n    img.src = image;\n\n    template.appendChild(img);\n  }\n\n  if (title) {\n    const span = document.createElement('span');\n    span.className = 'vjs-chapters-thumbnails-item-title';\n    span.innerHTML = title;\n\n    template.appendChild(span);\n  }\n\n  return template;\n},\n```\n\nProvides for custom chapter templating. Must return either `HTMLElement` or `string`.\n\n## Example WebVTT file\n\n> Define chapters plugin by specifying a [WebVTT](http://dev.w3.org/html5/webvtt/) spec.\n\n```\nWEBVTT\n\nChapter 1\n00:00:00.000 --> 00:00:10.000\n{\n  \"title\":\"Chapter 1\",\n  \"image\":\"asset/img/chapter_1.png\"\n}\n```\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli\n\nnpm install\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-chapter-thumbnails/blob/master/LICENSE).\n","version":"3.2.0","downloads":799},{"name":"videojs-chromecast","description":"Chromecast plugin for videojs","author":{"name":"Benjipott, Inc."},"keywords":["chromecast","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-10-18T13:54:41.828Z","created":"2016-03-18T09:07:02.308Z","1.0.0":"2016-03-18T09:07:02.308Z","2.0.7":"2016-09-05T18:42:38.915Z","2.0.8":"2016-10-18T13:54:41.828Z"},"readme":"[![Build Status](https://travis-ci.org/benjipott/video.js-chromecast.svg?branch=master)](https://travis-ci.org/benjipott/video.js-chromecast)\n\n# Chromecast Plugin for video.js 5.*\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Inclusion](#inclusion)\n- [Basic Usage](#basic-usage)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nInstall videojs-chromecast via npm (preferred):\n\n```sh\n$ npm install videojs-chromecast\n```\n\nOr Bower:\n\n```sh\n$ bower install videojs-chromecast\n```\n\n## Inclusion\n\nInclude videojs-chromecast on your website using the tool(s) of your choice.\n\nThe simplest method of inclusion is a `<script>` tag after the video.js `<script>` tag:\n\n```html\n<script src=\"path/to/video.js/dist/video.js\"></script>\n<script src=\"path/to/videojs-chromecast/dist/videojs-chromecast.js\"></script>\n```\n\nWhen installed via npm, videojs-chromecast supports Browserify-based workflows out of the box.\n\n## Basic Usage\n\nFor full details on how to use the playlist plugin can be found in [the API documentation](docs/api.md).\n\n```js\nvar player = videojs('video');\n```\n\n## License\n\nApache-2.0. Copyright (c) Benjipott, Inc.\n","version":"2.0.8","downloads":1237},{"name":"videojs-concurrence-limiter","description":"A Video.js plugin for concurrency control on played contents","author":{"name":"ToolBox-tve"},"keywords":["player","video","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-04T20:05:32.207Z","created":"2017-04-28T21:02:19.615Z","0.4.2":"2017-04-28T21:02:19.615Z","0.4.3":"2017-05-03T18:08:51.009Z","0.4.4":"2017-07-10T15:23:18.014Z","0.4.5":"2017-07-13T15:48:13.631Z","0.4.6":"2017-08-11T18:03:25.252Z","0.4.7":"2017-08-23T13:08:08.147Z","0.4.8":"2017-08-24T18:58:31.112Z","0.4.9":"2017-09-14T20:29:27.027Z","0.4.10":"2017-09-14T20:41:50.451Z","0.5.0":"2017-09-25T14:00:11.191Z","0.5.1":"2017-11-09T15:39:18.378Z","0.6.0":"2018-01-04T17:53:47.234Z","0.6.1":"2018-01-04T18:39:56.803Z","0.6.2":"2018-01-04T19:05:56.537Z","0.6.3":"2018-01-04T19:43:35.460Z","0.6.4":"2018-01-04T20:05:32.207Z"},"readme":"Video.js Concurrence Limiter\n============================\n\nA Video.js plugin for concurrency control on played contents\n\nContents\n--------\n1. [Installation](#installation)\n1. [Dependencies](#dependencies)\n1. [Usage](#usage)\n1. [Options](#options)\n1. [TODO](#TODO)\n\n### Installation\n----------------\n\nThe *dist* folder contains the library bundles: for debugging or the minfied version.\n\n##### Development:\n- Install the dependencies with npm:\n```sh\n$ npm install\n```\n- You can test with te example folder and using gulp to watch changes:\n```sh\n$ npm run watch\n```\n- To generate a build:\n```sh\n$ npm run build\n```\n- Run linter:\n```sh\n$ npm run lint\n```\n\n##### Testing:\nUnit Test are on test folder, using karma & qunit:\n```sh\n$ npm run test\n```\n- Run Specific browser tests:\n```sh\n$ npm run test:chrome\n$ npm run test:firefox\n$ npm run test:ie\n$ npm run test:safari\n```\n\n### Dependencies\n----------------\n\nThe plugin has the following mandatory dependencies:\n\n- [Video.js](https://github.com/videojs/video.js) - HTML5 media player that provides the user interface.\n\n- [jQuery](http://jquery.com) - Cross-platform Javascript library for client-side scripting.\n\n### Usage\n---------\n\nFirst include video.js library and stylesheet.\n\nThe videojs-concurrence-limiter plugin automatically register itself to Video.JS when include\nthe script on page:\n\n```html\n<script src=\"videojs.concurrence.js\"></script>\n```\nor the minified version:\n```html\n<script src=\"videojs.concurrence.min.js\"></script>\n```\n\n### Options\n-----------\n\nConfigure the player using the Video.js\n[options](https://github.com/videojs/video.js/blob/master/docs/guides/options.md),\nand enable the plugin by adding a `concurrenceview` configuration to `plugins`. For\nexample:\n\n```javascript\nvar player = videojs(\"myVideo\",\n{\n    // video.js options\n    controls: true,\n    loop: false,\n    width: 320,\n    height: 240,\n    plugins: {\n        // videojs-concurrence-limiter plugin options\n        concurrenceLimiter: {\n          // options here\n        }\n    }\n});\n```\n##### Available options:\n| Option | Required | Type | Default | Description |\n| --- | --- | --- | --- | --- |\n| interval | false | number | 10 | Plugin update interval, in seconds |\n| playerID | false | string | _null_ | Current player id, if null, the player generates one |\n| accessurl | true | string | `none` | Server url for access request |\n| updateurl | true | string | `none` | Server update url |\n| disposeurl | true | string | `none` | Server dispose/stop url |\n| startPosition | true | number | `none` | Player starting position for updates |\n| maxUpdateFails | true | number | 1 | Max http failures for 'updateurl' before error event |\n| request | false | object | [see below] | Player http requests configuration |\n\n##### Available options for ```request``` config:\n- Any given options will be deep-merged with the plugin defaults. Allowed configs can be found under https://www.npmjs.com/package/xhr.\n- Defaults options are:\n\n| Option | Value |\n| --- | --- |\n| timeout | ```15000``` |\n| method | ```'POST'``` |\n| headers | ```{ 'Content-Type': 'application/json' }``` |\n\n### Request & Response formats\n-----------\nStandar format:\n\nrequest:\n```json\n{\n  player: 'a player id',\n  position: currentPlayerTime,\n  token: 'SomeHelpfulValidationTokenFromServer',\n  status: 'currentPlayerStatus'\n}\n```\n\nresponse:\n```json\n{\n  success: true|false,\n  player: 'a player id',\n  token: 'SomeHelpfulValidationTokenFromServer',\n  position: positionFromParams,\n  status: statusFromParams\n}\n```\n\n\nSee SimpleLimitServer.js for more information and usage\n\n### TODO\n--------\n\n- [ ] Add Request/Response information.\n- [ ] Create unit test specs.\n","version":"0.6.4","downloads":262},{"name":"videojs-concurrency","description":"Video.js plugin for supporting concurrency","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com","url":"http://www.careyhinoki.me/"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-06-16T03:15:54.649Z","created":"2015-08-27T02:34:28.367Z","0.1.0":"2015-08-27T02:34:28.367Z","0.1.1":"2015-08-27T02:40:28.980Z","1.0.0":"2015-10-01T17:34:32.745Z","1.0.1":"2015-10-09T03:33:09.923Z","2.0.0":"2016-06-10T04:16:56.676Z","2.0.1":"2016-06-10T21:58:41.143Z","2.0.2":"2016-06-15T02:24:25.496Z","2.0.3":"2016-06-16T03:15:54.649Z"},"readme":"# videojs-concurrency\n\n[![Build Status](https://travis-ci.org/chemoish/videojs-concurrency.svg)](https://travis-ci.org/chemoish/videojs-concurrency)\n\n> Video.js plugin for supporting concurrency.\n\n## Getting Started\n\n#### Include\n\n```html\n<script src=\"/path/to/videojs.concurrency.min.js\"></script>\n```\n\n#### Enable\n\n```js\nvideojs('player_id').concurrency({\n    url: '/path/to/concurrency.server',\n\n    success: function (response) {\n        this.poll();\n    }\n});\n```\n\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### data\n\nType: `Object`  \n\n#### debug\n\nType: `boolean`  \nDefault: `false`\n\n#### error\n\nType: `function(error)`  \nDefault: `noop`\n\nEnables polling manipulation on unsuccessful concurrency request.\n\n#### headers\n\nType: `Object`  \n\n#### idleDelay\n\nType: `number`  \nDefault: `1000 * 60 * 30`\n\nWhen paused, become idle after 30 minutes.\n\n#### method\n\nType: `string`  \nDefault: `GET`\n\n#### pollDelay\n\nType: `number`  \nDefault: `1000 * 20`\n\nPoll every 20 seconds.\n\n#### success\n\nType: `function(response)`  \nDefault: `noop`\n\nEnables polling manipulation on successful concurrency request.\n\n#### url\n\nType: `string`  \n\n```js\n{\n    url: '/path/to/concurrency.server?foo=foo'\n}\n\n{\n    url: '/path/to/concurrency.server',\n    data: {\n        foo: 'foo'\n    }\n}\n```\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli # only needed for contributing\n\nnpm install\n\nnpm start\n```\n\n## Testing\n\n```bash\nkarma start\n\n# single run\nnpm test\n\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-concurrency/blob/master/LICENSE).\n","version":"2.0.3","downloads":115},{"name":"videojs-contextmenu","description":"A cross-device context menu implementation for video.js players.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-05-22T16:12:08.103Z","created":"2016-07-11T20:51:20.548Z","1.0.0":"2016-07-11T20:51:20.548Z","1.0.1":"2016-07-18T18:55:01.289Z","1.1.0":"2016-07-19T21:40:47.123Z","1.2.0":"2016-12-20T16:50:14.039Z","1.2.1":"2017-01-27T01:29:11.809Z","1.2.2":"2017-02-08T19:30:26.196Z","2.0.0":"2017-05-19T14:15:37.665Z"},"readme":"# videojs-contextmenu\n\nA cross-device context menu implementation for video.js players.\n\nMost desktop browsers support the [DOM standard `contextmenu` event][contextmenu], but some mobile browsers, lacking a right mouse button, do not. This plugin will fire a custom `vjs-contextmenu` event when it sees a `contextmenu` event _or_ after a long touch.\n\nFor purposes of this plugin, a **long touch** is defined as a single touch which is held for a customizable number of milliseconds. In the intervening time, the touch must not move except within a customizable sensitivity range.\n\n## Installation\n\n```sh\nnpm install --save videojs-contextmenu\n```\n\n## Usage\n\nThe plugin is invoked as a method of a video.js `Player` object:\n\n```js\nplayer.contextmenu();\n```\n\nAfter the plugin is invoked, you can listen to the `vjs-contextmenu` event:\n\n```js\nplayer.on('vjs-contextmenu', function() {\n  alert('open a context menu!');\n});\n```\n\nWhen using the [videojs-contextmenu-ui][ui] plugin, you won't need to listen to this event at all (unless you want to perform additional tasks, of course).\n\n## Options\n\nOptions may be passed to the plugin in a plain object:\n\n```js\nplayer.contextmenu({sensitivity: 15, wait: 1000});\n```\n\n### `cancel`\n\n**Type**: Boolean\n**Default**: `true`\n\nThis option will suppress the native `contextmenu` event if it is seen. This tends to be desirable because the point of this plugin is to normalize this event and the long touch equivalent.\n\n### `sensitivity`\n\n**Type**: Number\n**Default**: `10`\n\n_Only used for detection of a long touch._ The maximum number of pixels a touch can move while waiting for a long touch detection. This value is inclusive; so, by default, if the finger moves by 10 pixels it may still count as a long touch.\n\n### `wait`\n\n**Type**: Number\n**Default**: `500`\n\n_Only used for detection of a long touch._ The minimum number of milliseconds a touch must stay within the `sensitivity` range before it registers as a long touch.\n\n### `disabled`\n\n**Type**: Boolean\n**Default**: `false`\n\nIf set to _true_, this option will disable firing `vjs-contextmenu`. Functionality can be restored at any time by setting **disabled** to false.\n\n## Inclusion\n\nTo include videojs-contextmenu on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-contextmenu.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.contextmenu();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-contextmenu via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-contextmenu');\n\nvar player = videojs('my-video');\n\nplayer.contextmenu();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-contextmenu'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.contextmenu();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[contextmenu]: https://developer.mozilla.org/en-US/docs/Web/Events/contextmenu\n[ui]: https://github.com/brightcove/videojs-contextmenu-ui\n[videojs]: http://videojs.com/\n","version":"2.0.0","downloads":1696},{"name":"videojs-contextmenu-ui","description":"A cross-device context menu UI for video.js players.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-05-22T16:12:09.215Z","created":"2016-07-12T20:17:24.989Z","1.0.0":"2016-07-12T20:17:24.989Z","2.0.0":"2016-07-13T17:42:31.889Z","3.0.0":"2016-07-20T16:12:02.810Z","3.0.1":"2016-07-20T18:18:34.054Z","3.0.2":"2016-07-20T19:40:00.923Z","3.0.3":"2016-08-02T19:12:56.196Z","3.0.4":"2017-01-27T01:37:37.374Z","3.0.5":"2017-02-08T19:37:35.153Z","4.0.0":"2017-05-19T16:35:53.395Z"},"readme":"# videojs-contextmenu-ui\n\nA cross-device context menu UI for video.js players.\n\n**Note:** _This plugin depends on the [videojs-contextmenu][contextmenu] plugin, but that plugin is not included with it!_\n\n## Installation\n\n```sh\nnpm install --save videojs-contextmenu videojs-contextmenu-ui\n```\n\n## Usage\n\nThe plugin is invoked as a method of a video.js `Player` object:\n\n```js\nplayer.contextmenuUI();\n```\n\nOnce the plugin is invoked, a modal will appear with a list of links when the `vjs-contextmenu` event is triggered on the `Player` object.\n\n## Options\n\nOptions may be passed to the plugin in a plain object:\n\n```js\nplayer.contextmenuUI({\n  content: [{\n\n    // A plain old link.\n    href: 'https://www.brightcove.com/',\n    label: 'Brightcove'\n  }, {\n\n    // A link with a listener. Its `href` will automatically be `#`.\n    label: 'Example Link',\n    listener: function() {\n      alert('you clicked the example link!');\n    }\n  }]\n});\n```\n\n### `content`\n\n**Required**\n**Type**: Array\n\nThe plugin requires that `content` be passed as an array. If it is not, an error will be thrown. The array should contain any number of objects which define a series of links that appear in the modal. These objects support the following properties:\n\n- `href`: Defines the value of the `href` attribute of the generated link.\n- `listener`: A function which will be bound to the `click` event of the generated link.\n- `label`: Text for the link.\n\n## Inclusion\n\nTo include videojs-contextmenu-ui on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-contextmenu.min.js\"></script>\n<script src=\"//path/to/videojs-contextmenu-ui.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.contextmenuUI();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-contextmenu-ui via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\nrequire('videojs-contextmenu');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-contextmenu-ui');\n\nvar player = videojs('my-video');\n\nplayer.contextmenuUI();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-contextmenu', 'videojs-contextmenu-ui'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.contextmenuUI();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[contextmenu]: https://github.com/brightcove/videojs-contextmenu\n[videojs]: http://videojs.com/\n","version":"4.0.0","downloads":335},{"name":"videojs-contrib-ads","description":"A framework that provides common functionality needed by video advertisement libraries working with video.js.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-22T17:36:35.413Z","created":"2013-11-19T21:32:23.704Z","0.1.1":"2013-11-19T21:32:28.136Z","0.2.0":"2014-03-20T22:16:54.603Z","0.2.1":"2014-08-15T16:21:15.895Z","0.3.0":"2014-08-28T17:35:25.957Z","0.4.0":"2014-09-27T19:33:44.020Z","0.5.0":"2014-11-10T19:16:34.560Z","0.6.0":"2015-01-08T19:58:42.795Z","0.7.0":"2015-01-21T16:41:32.719Z","1.0.0":"2015-01-27T22:06:39.126Z","1.0.1":"2015-02-17T17:14:19.149Z","1.0.2":"2015-03-03T20:14:59.351Z","1.1.0":"2015-03-12T20:36:33.041Z","2.0.0":"2015-03-31T20:45:49.374Z","2.1.0":"2015-04-10T15:32:30.404Z","2.2.0":"2015-07-31T19:36:09.896Z","2.2.1":"2015-09-09T15:16:37.723Z","3.0.0":"2015-09-28T20:22:35.904Z","3.1.0":"2015-11-23T19:18:15.348Z","3.1.1":"2015-12-08T19:16:47.656Z","3.1.2":"2015-12-11T15:23:10.464Z","2.2.2":"2016-01-25T21:12:14.508Z","3.1.3":"2016-01-28T23:17:35.312Z","3.2.0":"2016-04-20T18:32:03.575Z","3.2.1-0":"2016-05-19T19:44:24.532Z","3.3.0":"2016-05-25T19:47:08.850Z","3.3.1":"2016-05-25T19:53:20.785Z","3.3.2":"2016-05-25T20:02:29.587Z","3.3.3":"2016-05-26T19:35:10.609Z","3.3.4-0":"2016-06-02T18:32:54.810Z","3.3.4":"2016-06-06T17:54:16.089Z","3.3.5":"2016-06-06T18:06:36.764Z","3.3.6":"2016-06-09T20:24:38.201Z","3.3.7":"2016-06-10T21:36:56.169Z","3.3.8":"2016-06-21T20:20:10.322Z","3.3.9":"2016-07-13T19:57:25.909Z","3.3.10-0":"2016-07-26T17:34:14.589Z","3.3.10":"2016-07-27T16:05:51.986Z","3.3.11":"2016-08-03T22:49:04.713Z","3.3.12-0":"2016-08-11T20:23:57.418Z","3.3.12":"2016-08-12T21:59:24.191Z","3.3.13":"2016-09-22T20:38:13.678Z","4.0.0-0":"2016-10-05T21:13:06.262Z","3.4.0-0":"2016-10-21T18:51:58.835Z","4.0.0":"2016-10-24T15:35:10.078Z","4.1.0":"2016-10-31T20:56:42.872Z","4.2.0-0":"2016-11-02T15:00:53.349Z","4.1.1":"2016-11-02T15:10:52.350Z","4.2.0-1":"2016-11-03T17:20:16.238Z","4.2.0-2":"2016-11-03T20:09:20.019Z","4.1.2":"2016-11-07T14:58:54.328Z","4.1.3":"2016-11-10T17:31:35.917Z","4.2.0-3":"2016-11-11T16:49:21.731Z","4.1.4":"2016-11-21T17:07:19.215Z","4.1.5-0":"2016-12-06T15:18:52.677Z","4.1.5-1":"2016-12-07T19:11:29.212Z","4.1.5":"2016-12-08T17:01:29.581Z","4.1.6-0":"2016-12-14T16:43:57.317Z","4.1.6":"2016-12-19T22:58:38.484Z","4.1.7-0":"2016-12-23T16:35:17.018Z","4.2.0":"2017-01-03T17:45:18.500Z","4.2.1-0":"2017-01-17T15:20:23.586Z","4.2.1":"2017-01-19T20:58:58.157Z","4.2.2":"2017-02-02T17:11:44.790Z","4.2.3":"2017-02-03T22:15:15.221Z","4.2.4-0":"2017-02-14T16:58:31.839Z","4.2.4-1":"2017-02-14T23:32:01.579Z","4.2.4-2":"2017-02-23T21:06:18.285Z","4.2.4-vjs6qa.0":"2017-02-24T19:09:40.731Z","4.2.4":"2017-02-28T16:41:22.550Z","4.2.5":"2017-03-08T23:06:27.099Z","4.2.6-0":"2017-03-27T19:36:15.078Z","4.2.6":"2017-04-04T16:29:00.949Z","4.2.7-vjs6qa.0":"2017-05-09T17:42:14.661Z","4.2.7":"2017-05-17T14:46:31.044Z","4.2.8":"2017-05-30T11:45:37.280Z","5.0.0":"2017-06-06T19:54:37.015Z","5.0.1":"2017-06-13T21:56:10.640Z","5.0.2-0":"2017-07-03T18:05:00.219Z","5.0.2":"2017-07-20T14:43:02.770Z","5.0.3":"2017-07-28T17:30:06.300Z","5.0.4-0":"2017-09-05T17:22:38.132Z","5.1.0-0":"2017-09-11T18:57:05.222Z","5.1.0":"2017-09-12T16:30:18.471Z","5.1.1-0":"2017-11-01T15:35:41.369Z","5.1.1-1":"2017-11-01T15:58:26.525Z","5.1.1":"2017-11-02T15:43:34.822Z","5.1.2":"2017-11-03T18:08:43.113Z","5.1.3":"2017-11-13T15:26:58.963Z","5.1.4":"2017-11-17T16:11:00.606Z","5.1.5":"2017-11-21T16:11:59.317Z","5.2.0-0":"2017-12-13T17:14:54.848Z","5.2.0-1":"2018-01-22T15:46:18.203Z","5.1.6":"2018-01-22T17:36:35.413Z"},"readme":"# videojs-contrib-ads [![Build Status](https://travis-ci.org/videojs/videojs-contrib-ads.svg)](https://travis-ci.org/videojs/videojs-contrib-ads)\n\nThe `videojs-contrib-ads` plugin provides common functionality needed by video advertisement libraries working with [video.js.](http://www.videojs.com/)\nIt takes care of a number of concerns for you, reducing the code you have to write for your ad integration.\n\nLead Maintainer: Greg Smith [https://github.com/incompl](https://github.com/incompl)\n\nMaintenance Status: Stabler Than Ever\n\n## Getting Started\n\nIn addition to the video.js library, you'll need two files from this project: `videojs.ads.js` and `videojs.ads.css`.\nAfter you build the project they are both in the `dist` directory.\n\nFor development, include the CSS in your HTML's `<head>` section with a `<link>` tag:\n\n```html\n<link rel=\"stylesheet\" href=\"videojs.ads.css\">\n```\n\nThen, include the JavaScript file after video.js, but before your integration code:\n\n```html\n<video id=\"video\" src=\"movie.mp4\" controls></video>\n<script src=\"video.js\"></script>\n<script src=\"videojs.ads.js\"></script>\n<script>\nvideojs('video', {}, function() {\n  var player = this;\n  player.ads(); // initialize the ad framework\n  // your custom ad integration code\n});\n</script>\n```\n\n### CDN Link\n\nYou may also use the Javascript and CSS links from the following to get started:\n[https://cdnjs.com/libraries/videojs-contrib-ads](https://cdnjs.com/libraries/videojs-contrib-ads)\n\nWith this basic structure in place, you're ready to develop an ad integration.\n\n## Important Note About Initialization\n\nIn order to function correctly, videojs-contrib-ads must be initialized immediately after video.js (in the same [tick](http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/). This is for two reasons:\n\n* This plugin relies on `loadstart` events, and initializing the plugin late means the plugin may miss an initial `loadstart`.\n* For [Redispatch](#redispatch) to function it must be initialized before any other code that listens to media events.\n\nThe plugin will emit an error if it detects that it it missed a `loadstart` event. If this happens, it is likely that downstream failures will occur, so it's important to resolve this issue.\n\n## Developing an Integration\n\nOnce you call `player.ads()` to initialize the plugin, it provides six interaction points (four events and two methods) which you can use in your integration.\n\nHere are the events that communicate information to your integration from the ads plugin:\n\n * `contentupdate` (EVENT) — Fires when a new content video has been assigned to the player, so your integration can update its ad inventory. _NOTE: This will NOT fire while your ad integration is playing a linear Ad._\n * `readyforpreroll` (EVENT) — Fires when a content video is about to play for the first time, so your integration can indicate that it wants to play a preroll.\n\nNote: A `contentplayback` event is sent but should not be used as it is being removed. The `playing` event has the same meaning and is far more reliable.\n \nAnd here are the interaction points you use to send information to the ads plugin:\n\n* `adsready` (EVENT) — Trigger this event after to signal that your integration is ready to play ads.\n* `adplaying` (EVENT) - Trigger this event when an ads starts playing. If your integration triggers `playing` event when an ad begins, it will automatically be redispatched as `adplaying`.\n* `adscanceled` (EVENT) — Trigger this event after starting up the player or setting a new video to skip ads entirely. This event is optional; if you always plan on displaying ads, you don't need to worry about triggering it.\n* `adserror` (EVENT) - Trigger this event to indicate that an error in the ad integration has ocurred and any ad states should abort so that content can resume.\n* `nopreroll` (EVENT) - Trigger this event to indicate that there will be no preroll ad. Otherwise, the player will wait until a timeout occurs before playing content. This event is optional, but can improve user experience.\n* `nopostroll` (EVENT) - Trigger this event to indicate that there will be no postroll ad. Otherwise, contrib-ads will trigger an adtimeout event after content ends if there is no postroll.\n* `ads-ad-started` (EVENT) - Trigger this when each individual ad begins.\n* `contentresumed` (EVENT) - If your integration does not result in a \"playing\" event when resuming content after an ad, send this event to signal that content can resume. This was added to support stitched ads and is not normally necessary.\n* `ads.startLinearAdMode()` (METHOD) — Call this method to signal that your integration is about to play a linear ad. This method triggers `adstart` to be emitted by the player.\n* `ads.endLinearAdMode()` (METHOD) — Call this method to signal that your integration is finished playing linear ads, ready for content video to resume. This method triggers `adend` to be emitted by the player.\n* `ads.skipLinearAdMode()` (METHOD) — Call this method to signal that your integration has received an ad response but is not going to play a linear ad.  This method triggers `adskip` to be emitted by the player.\n* `ads.stitchedAds()` (METHOD) — Get or set the `stitchedAds` setting.\n* `ads.videoElementRecycled()` (METHOD) - Returns true if ad playback is taking place in the content element.\n\nIn addition, video.js provides a number of events and APIs that might be useful to you.\nFor example, the `ended` event signals that the content video has played to completion.\n\n### Public Methods\n\nThese are methods that can be called at runtime to inspect the ad plugin's state. You do\nnot need to implement them yourself.\n\n#### isInAdMode()\n\nReturns true if player is in ad mode.\n\n##### Ad mode definition:\n\n> If content playback is blocked by the ad plugin.\n\n###### Examples of ad mode:\n\n* Waiting to find out if an ad is going to play while content would normally be\n  playing.\n* Waiting for an ad to start playing while content would normally be playing.\n* A linear ad is playing\n* An ad has completed and content is about to resume, but content has not resumed\n  yet.\n\n###### Examples of not ad mode:\n\n* Content playback has not been requested\n* Content playback is paused\n* An asynchronous ad request is ongoing while content is playing\n* A non-linear ad is active\n\n#### isContentResuming()\n\nReturns true if content is resuming after an ad. This is part of ad mode.\n\n#### isAdPlaying()\n\nReturns true if a linear ad is playing. This is part of ad mode.\nThis relies on `startLinearAdMode` and `endLinearAdMode` because that is the\nmost authoritative way of determinining if an ad is playing.\n\n### Additional Events And Properties Your Integration May Want To Include\n\nThis project does not send these events, but these events are a convention used some some integrations that you may want to consider sending for consistency.\n\n#### Events\n\n* `ads-request`: Fired when ad data is requested.\n* `ads-load`: Fired when ad data is available following an ad request.\n* `ads-pod-started`: Fired when a LINEAR ad pod has started.\n* `ads-pod-ended`: Fired when a LINEAR ad pod has completed.\n* `ads-allpods-completed`: Fired when all LINEAR ads are completed.\n* `ads-ad-started`: Fired when the ad starts playing.\n* `ads-ad-ended`: Fired when the ad completes playing.\n* `ads-first-quartile`: Fired when the ad playhead crosses first quartile.\n* `ads-midpoint`: Fired when the ad playhead crosses midpoint.\n* `ads-third-quartile`: Fired when the ad playhead crosses third quartile.\n* `ads-pause`: Fired when the ad is paused.\n* `ads-play`: Fired when the ad is resumed.\n* `ads-mute`: Fired when the ad volume has been muted.\n* `ads-click`: Fired when the ad is clicked.\n\n#### Properties\n\n```\nplayer.ads.provider = {\n  \"type\": `String`,\n  \"event\": `Object`\n}\n\nplayer.ads.ad = {\n  \"type\": `String`,\n  \"index\": `Number`,\n  \"id\": `String`,\n  \"duration\": `Number`,\n  \"currentTime\": `Function`\n}\n```\n\n### Macros\n\nAn optional feature that contrib-ads supports is ad macros. Ad macros are often used by ad integrations\nto support addition of run-time values into a server URL or configuration.\n\nFor example, an ad integration that supports this feature might accept an ad server URL like this:\n\n`'http://example.com/vmap.xml?id={player.id}'`\n\nIn the ad integration, it would use the videojs-contrib-ads macro feature to process that URL like this:\n\n`serverUrl = player.ads.adMacroReplacement(serverUrl, true, additionalMacros);`\n\nThis would result in a server URL like this:\n\n`'http://example.com/vmap.xml?id=12345'`\n\nwhere 12345 is the player ID.\n\nadMacroReplacement takes 3 arguments:\n\n1. The string that has macros to be replaced.\n2. `true` if the macro values should be URI encoded when they are inserted, else `false` (default `false`)\n3. An optional object that defines additional macros, such as `{'{five}': 5}` (default `{}`)\n\n#### Static Macros\n\n| Name                     | Value                          |\n|:-------------------------|:-------------------------------|\n| {player.id}              | The player ID                  |\n| {player.duration}        | The duration of current video* |\n| {timestamp}              | Current epoch time             |\n| {document.referrer}      | Value of document.referrer     |\n| {window.location.href}   | Value of window.location.href  |\n| {random}                 | A random number 0-1 trillion   |\n| {mediainfo.id}           | Pulled from mediainfo object   |\n| {mediainfo.name}         | Pulled from mediainfo object   |\n| {mediainfo.description}  | Pulled from mediainfo object   |\n| {mediainfo.tags}         | Pulled from mediainfo object   |\n| {mediainfo.reference_id} | Pulled from mediainfo object   |\n| {mediainfo.duration}     | Pulled from mediainfo object   |\n| {mediainfo.ad_keys}      | Pulled from mediainfo object   |\n\n\\* Returns 0 if video is not loaded. Be careful timing your ad request with this macro.\n\n#### Dynamic Macro: mediainfo.custom_fields.*\n\nA macro such as {mediainfo.custom_fields.foobar} allows the user to access the value of any property in `mediainfo.custom_fields`.\n\n#### Dynamic Macro: pageVariable.*\n\nA macro such as {pageVariable.foobar} allows the user access the value of any property on the `window` object. Only certain value types are allowed, per this table:\n\n| Type      | What happens                          |\n|:----------|:--------------------------------------|\n| String    | Used without any change               |\n| Number    | Converted to string automatically     |\n| Boolean   | Converted to string automatically     |\n| Null      | Returns the string `\"null\"`           |\n| Undefined | Logs warning and returns empty string |\n| Other     | Logs warning and returns empty string |\n\n## Cue Metadata Tracks\n\nAn optional feature that allows the manipulation of metadata tracks, specifically in the case of working with advertising cue points.\n\nFor example, an ad integration may want to make an ad request when a cuepoint change has been observed. To do this, an ad integration would need to do something like this:\n\n`player.ads.cueTextTracks.processMetadataTracks(player, processMetadataTrack)`\n\nwhere processMetadataTrack could be something like this:\n\n```\nfunction processMetadataTrack(player, track) {\n  track.addEventListener('cuechange', function() {\n    var cues = this.cues;\n    var processCue = function() {\n      // Make an ad request\n      ...\n    };\n    var cancelAds = function() {\n      // Optional method to dynamically cancel ads\n      // This will depend on the ad implementation\n      ...\n    };\n\n    player.ads.cueTextTracks.processAdTrack(player, cues, processCue, cancelAds);\n  });\n}\n```\n\nFor more information on the utility methods that are available, see [cueTextTracks.js](https://github.com/videojs/videojs-contrib-ads/blob/master/src/cueTextTracks.js).\n\n### setMetadataTrackMode\n\nA track is 'enabled' if the track.mode is set to `hidden` or `showing`. Otherwise, a track is `disabled` and is not updated. It is important to note that some tracks may be disabled as a workaround of not being able to remove them, and so should not be re-enabled. Ad integrations should be careful about setting the mode of tracks in these cases and shadow `setMetadataTrackMode` to determine which tracks are safe to change. For example, if all tracks should be hidden:\n\n```\nplayer.ads.cueTextTracks.setMetadataTrackMode = function(track) {\n  // Hide the tracks so they are enabled and get updated\n  // but are not shown in the UI\n  track.mode = 'hidden';\n}\n```\n\n## Single Preroll Example\n\nHere's an outline of what a basic ad integration might look like.\nIt only plays a single preroll ad before each content video, but does demonstrate the interaction points offered by the ads plugin.\n\nThis is not actually a runnable example, as it needs more information as specified in the code comments.\n\n```js\nvideojs('video', {}, function() {\n\n  var player = this;\n  player.ads(); // initialize the ad framework\n\n  // request ads whenever there's new video content\n  player.on('contentupdate', function(){\n    // fetch ad inventory asynchronously, then ...\n    player.trigger('adsready');\n  });\n\n  player.on('readyforpreroll', function() {\n    player.ads.startLinearAdMode();\n    // play your linear ad content\n    player.src('http://url/to/your/ad.content');\n\n    // when all your linear ads have finished… do not confuse this with `ended`\n    player.one('adended', function() {\n      player.ads.endLinearAdMode();\n    });\n  });\n\n});\n```\n\nYour actual integration will be significantly more complex.\nTo implement midroll ads, you'd want to listen to `timeupdate` events to monitor the progress of the content video's playback.\n\nFor a more involved example that plays both prerolls and midrolls, see the [example directory](example) in this project.\n\n## State Diagram\n\nTo manage communication between your ad integration and the video.js player, the ads plugin goes through a number of states.\nHere's a state diagram which shows the states of the ads plugin and how it transitions between them:\n\n![](ad-states.png)\n\n## Plugin Options\n\nThe ad framework can be configured with custom settings by providing a settings object at initialization:\n\n```js\nplayer.ads({\n  timeout: 3000\n});\n```\n\nThe current set of options are described in detail below.\n\n### timeout\n\nType: `number`\nDefault Value: 5000\n\nThe maximum amount of time to wait for an ad implementation to initialize before playback, in milliseconds.\nIf the viewer has requested playback and the ad implementation does not fire `adsready` before this timeout expires, the content video will begin playback.\nIt's still possible for an ad implementation to play ads after this waiting period has finished but video playback will already be in progress.\n\nOnce the ad plugin starts waiting for the `adsready` event, one of these things will happen:\n\n * integration ready within the timeout — this is the best case, preroll(s) will play without the user seeing any content video first.\n * integration ready, but after timeout has expired — preroll(s) still play, but the user will see a bit of content video.\n * integration never becomes ready — content video starts playing after timeout.\n\nThis timeout is necessary to ensure a good viewer experience in cases where the ad implementation suffers an unexpected or irreparable error and never fires an `adsready` event.\nWithout this timeout, the ads plugin would wait forever, and neither the content video nor ads would ever play.\n\nIf the ad implementation takes a long time to initialize and this timeout is too short, then the content video will beging playing before the first preroll opportunity.\nThis has the jarring effect that the viewer would see a little content before the preroll cuts in.\n\nDuring development, we found that five seconds seemed to be long enough to accommodate slow initialization in most cases, but still short enough that failures to initialize didn't look like failures of the player or content video.\n\n### prerollTimeout\n\nType: `number`\nDefault Value: 100\n\nThe maximum amount of time to wait for an ad implementation to initiate a preroll, in milliseconds.\nIf `readyforpreroll` has been fired and the ad implementation does not call `startLinearAdMode()` before `prerollTimeout` expires, the content video will begin playback.\n`prerollTimeout` is cumulative with the standard timeout parameter.\n\nOnce the ad plugin fires `readyforpreroll`, one of these things will happen:\n\n * `startLinearAdMode()` called within the timeout — preroll(s) will play without the user seeing any content video first.\n * `skipLinearAdMode()` is called within the timeout because there are no linear ads in the response or you already know you won't be making a preroll request - content video plays without preroll(s).\n * `startLinearAdMode()` is never called — content video plays without preroll(s).\n * `startLinearAdMode()` is called, but after the prerollTimeout expired — bad user experience; content video plays a bit, then preroll(s) cut in.\n\nThe prerollTimeout should be as short as possible so that the viewer does not have to wait unnecessarily if no preroll is scheduled for a video.\nMake this longer if your ad integration needs a long time to decide whether it has preroll inventory to play or not.\nIdeally, your ad integration should already know if it wants to play a preroll before the `readyforpreroll` event.  In this case, skipLinearAdMode() should be called to resume content quickly.\n\n### postrollTimeout\n\nType: `number`\nDefault Value: 100\n\nThe maximum amount of time to wait for an ad implementation to initiate a postroll, in milliseconds.\nIf `contentended` has been fired and the ad implementation does not call `startLinearAdMode()` before `postrollTimeout` expires, the content video will end playback.\n\nOnce the ad plugin fires `contentended`, one of these things will happen:\n\n * `startLinearAdMode()` called within the timeout — postroll(s) will play without the user seeing any content video first.\n * `skipLinearAdMode()` is called within the timeout - content video stops.\n * `startLinearAdMode()` is never called — content video stops.\n * `startLinearAdMode()` is called, but after the postrollTimeout expired — content video stops\n\nThe postrollTimeout should be as short as possible so that the viewer does not have to wait unnecessarily if no postroll is scheduled for a video.\nMake this longer if your ad integration needs a long time to decide whether it has postroll inventory to play or not.\nIdeally, your ad integration should already know if it wants to play a postroll before the `contentended` event.\n\n### stitchedAds\n\nType: `boolean`\nDefault Value: `false`\n\nSet this to true if you are using ads stitched into the content video. This is necessary for ad events to be sent correctly.\n\n### debug\n\nType: `boolean`\nDefault Value: false\n\nIf debug is set to true, the ads plugin will output additional information about its current state during playback.\nThis can be handy for diagnosing issues or unexpected behavior in an ad integration.\n\n## Plugin Events\nThe plugin triggers a number of custom events on the player during its operation. As an ad provider, you can listen for them to trigger behavior in your implementation. They may also be useful for other plugins to track advertisement playback.\n\n### adstart\nThe player has entered linear ad playback mode. This event is fired directly as a consequence of calling `startLinearAdMode()`. This event only indicates that an ad break has begun; the start and end of individual ads must be signalled through some other mechanism.\n\n### adend\nThe player has returned from linear ad playback mode. This event is fired directly as a consequence of calling `startLinearAdMode()`. Note that multiple ads may have played back between `adstart` and `adend`.\n\n### adskip\nThe player is skipping a linear ad opportunity and content-playback should resume immediately.  This event is fired directly as a consequence of calling `skipLinearAdMode()`. It can indicate that an ad response was made but returned no linear ad content or that no ad call is going to be made at either the preroll or postroll timeout opportunities.\n\n### adtimeout\nA timeout managed by the plugin has expired and regular video content has begun to play. Ad integrations have a fixed amount of time to inform the plugin of their intent during playback. If the ad integration is blocked by network conditions or an error, this event will fire and regular playback resumes rather than stalling the player indefinitely.\n\n## Runtime Settings\nOnce the plugin is initialized, there are a couple properties you can\naccess to inspect the plugin's state and modify its behavior.\n\n### contentSrc\nIn order to detect changes to the content video, videojs-contrib-ads\nmonitors the src attribute of the player. If you need to make a change\nto the src attribute during content playback that should *not* be\ninterpreted as loading a new video, you can update this property with\nthe new source you will be loading:\n\n```js\n// you might want to switch from a low bitrate version of a video to a\n// higher quality one at the user's request without forcing them to\n// re-watch all the ad breaks they've already viewed\n\n// first, you'd update contentSrc on the ads plugin to the URL of the\n// higher bitrate rendition:\nplayer.ads.contentSrc = 'movie-high.mp4';\n\n// then, modify the src attribute as usual\nplayer.src('movie-high.mp4');\n```\n\n### disableNextSnapshotRestore\nPrevents videojs-contrib-ads from restoring the previous video source\n\nIf you need to change the video source during ad playback, you can use _disableNextSnapshotRestore_ to prevent videojs-contrib-ads to restore to the previous video source.\n```js\nif (player.ads.state  === 'ad-playback') {\n    player.ads.disableNextSnapshotRestore = true;\n    player.src('another-video.mp4');\n}\n```\n\n### Redispatch\n\nThis project includes a feature called `redispatch` which will monitor all [media\nevents](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events) and\nmodify them with the goal of making the usage of ads transparent. For example, when an\nad is playing, a `playing` event would be sent as an `adplaying` event. Code that\nlistens to the `playing` event will not see `playing` events that result from an\nadvertisement playing.\n\nIn order for redispatch to work correctly, any ad plugin built using contrib-ads must be\ninitialized as soon as possible, before any other plugins that attach event listeners.\n\nDifferent platforms, browsers, devices, etc. send different media events at different\ntimes. Redispatch does not guarentee a specific sequence of events, but instead ensures\nthat certain expectations are met. The next section describes those expectations.\n\n#### The Law of the Land: Redispatch Event Behavior\n\n##### `play` events\n\n * Play events represent intention to play, such as clicking the play button.\n * Play events do not occur during [ad playback](#isadplaying).\n * Play events can happen during [ad mode](#isinadmode) when [an ad is not currently\n playing](#isadplaying), but content will not play as a result.\n\n##### `playing` events\n\n * Playing events may occur when content plays.\n * If there is a preroll, there is no playing event before the preroll.\n * If there is a preroll, there is at least one playing event after the preroll.\n\n##### `ended` events\n\n * If there is no postroll, there is a single ended event when content ends.\n * If there is a postroll, there is no ended event before the postroll.\n * If there is a postroll, there is a single ended event after the postroll.\n\n##### `loadstart` events\n\n * There is always a loadstart event after content starts loading.\n * There is always a loadstart when the source changes.\n * There is never a loadstart due to an ad loading.\n\n##### Other events\n\n * As a general rule, usual events are not sent if the plugin is in\n [ad mode](#isinadmode).\n\n## Migration Guides\n\n* [Migrating to 2.0](migration-guides/migrating-to-2.0.md)\n* [Migrating to 3.0](migration-guides/migrating-to-3.0.md)\n* [Migrating to 4.0](migration-guides/migrating-to-4.0.md)\n* [Migrating to 5.0](migration-guides/migrating-to-5.0.md)\n\n## Testing\n\n### Using command line\n\n```sh\nnpm run test\n```\n\n### In browser\n\nRun `./node_modules/.bin/karma start --no-single-run --browsers Chrome test/karma.conf.js` then open `localhost:9876/debug.html`\n\n## Building\n\nThe ads plugin is designed to be built with `npm`.\n\nIf you don't already have `npm`, then download and install [Node.js](http://nodejs.org/) (which comes with npm).\n\nWith NPM ready, you can download the ads plugin's build-time dependencies and then build the ads plugin.\nOpen a terminal to the directory where you've cloned this repository, then:\n\n```sh\n$ npm install\n$ npm run build\n```\n\nWe will run a suite of unit tests and code formatting checks, then create a `dist/` directory.\nInside you'll find the minified ads plugin file `videojs.ads.min.js`, the unminified `videojs.ads.js`, and the CSS `videojs.ads.css`.\n\n## Release History\n\nA short list of features, fixes and changes for each release is available in [CHANGELOG.md](https://github.com/videojs/videojs-contrib-ads/blob/master/CHANGELOG.md).\n\n## Roadmap\n\n### Unplanned Major Version Update\n\n* Pause content video if there is a programmatic call to play (prefixed as adplay) while an ad is playing in an ad container (rather than content video element). Prefixing doesn't prevent the videojs behavior, so this would prevent the content from playing behind the ad. Right now, ad integrations I am aware of are doing this on their own, so this would require a migration to move the behavior into this project.\n* `contentended` has a confusing name: real `ended` events are later sent, and that is when content should be considered ended. The `content` prefix is used for events when content is resuming after an ad. A better name would be `readyforpostroll`. That would make it clearer to implementations that the correct response would be to either play a postroll or send the `nopostroll` event.\n\n## License\n\nSee [LICENSE-APACHE2](LICENSE-APACHE2).\n","version":"5.1.6","downloads":5102},{"name":"videojs-contrib-dash-s1","description":"A Video.js source-handler providing MPEG-DASH playback.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin","dashjs","video.js","dash.js","widevine","playready","dash","MPEG-DASH"],"license":"Apache-2.0","time":{"modified":"2016-03-25T14:42:38.610Z","created":"2016-02-16T07:51:55.571Z","2.1.0":"2016-02-16T07:51:55.571Z","2.1.1":"2016-02-16T08:03:33.841Z","2.1.2":"2016-02-16T09:15:20.282Z","2.1.3":"2016-02-17T07:37:36.794Z","2.1.4":"2016-03-02T13:24:16.805Z","2.1.5":"2016-03-25T14:42:38.610Z"},"readme":"# video.js MPEG-DASH Source Handler\n\n[![Build Status](https://travis-ci.org/videojs/videojs-contrib-dash.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-dash)\n\nA video.js source handler for supporting MPEG-DASH playback through a video.js player on browsers with support for Media Source Extensions.\n\n### Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting Started](#getting-started)\n  - [Running Tests](#running-tests)\n  - [Tag and Release](#tag-and-release)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting Started\n\nDownload [videojs-contrib-dash](https://github.com/videojs/videojs-contrib-dash/releases). Include it in your web page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/dash.mpd\"\n     type=\"application/dash+xml\">\n</video>\n<script src=\"video.js\"></script>\n\n<!-- videojs-contrib-dash stylesheet -->\n<link rel=\"stylesheet\" href=\"videojs-contrib-dash.css\"></link>\n<!-- videojs-contrib-dash script -->\n<script src=\"videojs-contrib-dash.min.js\"></script>\n\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nNote that `videojs-contrib-dash` contains the code of Dash.js, so there is no need to load it separately.\n\nCheckout our [live example](http://videojs.github.io/videojs-contrib-dash/) if you're having trouble.\n\n## Protected Content\n\nIf the browser supports Encrypted Media Extensions and includes a Content Decryption Module for one of the protection schemes in the dash manifest, video.js will be able to playback protected content.\n\nFor most protection schemes, the license server information (URL &amp; init data) is included inside the manifest. The notable exception to this is Widevine-Modular (WV). To playback WV content, you must provide the URL to a Widevine license server proxy.\n\nFor this purpose, videojs-contrib-dash adds support for a \"keySystemOptions\" array to the object when using the `player.src()` function:\n\n```javascript\nplayer.src({\n  src: 'http://example.com/my/manifest.mpd',\n  type: 'application/dash+xml',\n  keySystemOptions: [\n    {\n      name: 'com.widevine.alpha',\n      options: {\n        licenseUrl: 'http://m.widevine.com/proxy'\n      }\n    }\n  ]\n});\n```\n\n### Running Tests\n\n- In all available and supported browsers: `npm test`\n- In a specific browser: `npm run test:chrome`, `npm run test:firefox`, etc.\n- While development server is running, navigate to [`http://localhost:9999/test/`](http://localhost:9999/test/) (_note:_ port may vary, check console output)\n\n### Tag and Release\n\n1. Make sure everything is committed.\n1. `npm version *` where `*` is `major`, `minor`, `patch`, etc. [Read more about versioning.](https://github.com/videojs/generator-videojs-plugin/docs/standards.md#versioning)\n1. `npm publish`\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n","version":"2.1.5","downloads":40},{"name":"videojs-contrib-eme","description":"Supports Encrypted Media Extensions for playback of encrypted content in Video.js","keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-13T20:38:21.028Z","created":"2016-09-08T23:57:56.338Z","1.0.0":"2016-09-08T23:57:56.338Z","2.0.0":"2017-02-13T16:51:25.634Z","2.0.1":"2017-02-14T19:52:54.208Z","2.1.0":"2017-12-13T16:54:57.172Z","3.0.0":"2017-12-13T20:38:21.028Z"},"readme":"# videojs-contrib-eme [![Build Status](https://travis-ci.org/videojs/videojs-contrib-eme.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-eme)\n\nSupports Encrypted Media Extensions for playback of encrypted content in Video.js\n\nLead Maintainer: Garrett Singer [@gesinger](https://github.com/gesinger)\nMaintenance Status: Experimental\n\n### Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Using](#using)\n  - [FairPlay](#fairplay)\n  - [Other DRM Systems](#other-drm-systems)\n  - [Source Options](#source-options)\n  - [Plugin Options](#plugin-options)\n  - [emeOptions](#emeoptions)\n  - [Passing methods seems complicated](#passing-methods-seems-complicated)\n- [Getting Started](#getting-started)\n  - [Running Tests](#running-tests)\n  - [Tag and Release](#tag-and-release)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Using\n\nBy default, videojs-contrib-eme is not able to decrypt any audio/video. In order to\ndecrypt audio/video, a user must pass in either relevant license URIs, or methods specific\nto a source and its combination of key system and codec. These are provided to the plugin\nvia either videojs-contrib-eme's plugin options, or source options.\n\n### FairPlay\n\nFor FairPlay, only `keySystems` is used from the options passed into videojs-contrib-eme,\nor provided as part of the source object.\n\nThe required methods to provide are:\n* `getCertificate`\n* `getContentId`\n* `getLicense`\nor, if you are using the default FairPlay methods, the only required parameters are:\n* `certificateUri`\n* `licenseUri`\n\nBelow is an example of videojs-contrib-eme options when only using FairPlay:\n\n```javascript\n{\n  keySystems: {\n    \"com.apple.fps.1_0\": {\n      getCertificate: function(emeOptions, callback) {\n        // request certificate\n        // if err, callback(err)\n        // if success, callback(null, certificate)\n      },\n      getContentId: function(emeOptions, initData) {\n        // return content ID\n      },\n      getLicense: function(emeOptions, contentId, keyMessage, callback) {\n        // request key\n        // if err, callback(err)\n        // if success, callback(null, key) as arraybuffer\n      }\n    }\n  }\n}\n```\n\nBelow is an example of videojs-contrib-eme options when only using FairPlay, and using\nthe default FairPlay methods:\n\n```javascript\n{\n  keySystems: {\n    \"com.apple.fps.1_0\": {\n      certificateUri: \"<CERTIFICATE URI>\",\n      licenseUri: \"<LICENSE URI>\"\n    }\n  }\n}\n```\n\nThe default methods are defined as follows:\n* getCertificate - GET certificateUri with response type of arraybuffer\n* getContentId - gets the hostname from the initData URI\n* getLicense - POST licenseUri with response type of arraybuffer, header of\n'Content-type': 'application/octet-stream', and body of webKitKeyMessage\n\n### PlayReady for IE11 (Windows 8.1+)\n\nPlayReady for IE11 (Windows 8.1+) only requires `keySystems` from the options passed\ninto videojs-contrib-eme, or provided as part of the source object.\n\nThere are four choices for options that may be passed:\n\n1) If the value of `true` is provided, then a POST request will be made to the\n`detinationURI` passed by the message from the browser, with the headers and body\nspecified in the message.\n\nExample:\n```javascript\n  keySystems: {\n    \"com.microsoft.playready\": true\n  }\n```\n\n2/3) If a url is provided, either within an object or as a string, then a POST request\nwill be made to the provided url, with the headers and body specified in the message.\n\nExample:\n```javascript\n  keySystems: {\n    \"com.microsoft.playready\": \"<your url here>\"\n  }\n  // or\n  keySystems: {\n    \"com.microsoft.playready\": {\n      \"url\": \"<your url here>\"\n    }\n  }\n```\n\n4) If a `getKey` function is provided, then the function will be run with the message\nbuffer and destinationURI passed by the browser, and will expect a callback with the key.\n\nExample:\n```javascript\n{\n  keySystems: {\n    \"com.microsoft.playready\": {\n      getKey: function(emeOptions, destinationURI, buffer, callback) {\n        // request key\n        // if err, callback(err)\n        // if success, callback(null, key), where key is a Uint8Array\n      }\n    }\n  }\n}\n```\n\n### Other DRM Systems\n\nFor DRM systems that use the W3C EME specification as of 5 July 2016, only `keySystems`\nand a way of obtaining the license are required.\n\nTo obtain a license requires one of a couple different options:\n1) You may use a string as the license url, or a url as an entry in the options:\n```javascript\n{\n  keySystems: {\n    'org.w3.clearkey': '<your-license-url>',\n    'com.widevine.alpha': {\n      url: '<your-license-url>'\n    }\n  }\n}\n```\n2) You may pass a `getLicense` function:\n```javascript\n{\n  keySystems: {\n    'org.w3.clearkey': {\n      getLicense: function(emeOptions, keyMessage, callback) {\n        // request license\n        // if err, callback(err)\n        // if success, callback(null, license)\n      }\n    }\n  }\n}\n```\n\nAlthough the license acquisition related config is the only required configuration,\n`getCertificate` is also supported if your source needs to retrieve a certificate.\n\nThe `audioContentType` and `videoContentType` properties for non-FairPlay sources are\nused to determine if the system supports that codec, and to create an appropriate\n`keySystemAccess` object. If left out, it is possible that the system will create a\n`keySystemAccess` object for the given key system, but will not be able to play the\nsource due to the browser's inability to use that codec.\n\nBelow is an example of videojs-contrib-eme options when only using one of these DRM\nsystems, and custom `getLicense` and `getCertificate` functions:\n\n```javascript\n{\n  keySystems: {\n    \"org.w3.clearkey\": {\n      audioContentType: 'audio/webm; codecs=\"vorbis\"',\n      videoContentType: 'video/webm; codecs=\"vp9\"',\n      getCertificate: function(emeOptions, callback) {\n        // request certificate\n        // if err, callback(err)\n        // if success, callback(null, certificate)\n      },\n      getLicense: function(emeOptions, keyMessage, callback) {\n        // request license\n        // if err, callback(err)\n        // if success, callback(null, license)\n      }\n    }\n  }\n}\n```\n\n### Source Options\n\nSince each source may have a different set of properties and methods, it is best to use\nsource options instead of plugin options when specifying key systems. To do that, simply\npass the same options as you would as part of the plugin options, but instead pass them\nas part of the source object when specifying `player.src(sourceObject)`.\n\nFor example:\n\n```javascript\nplayer.src({\n  // normal src and type options\n  src: '<URL>',\n  type: 'video/webm',\n  // eme options\n  keySystems: {\n    'org.w3.clearkey': {\n      audioContentType: 'audio/webm; codecs=\"vorbis\"',\n      videoContentType: 'video/webm; codecs=\"vp9\"',\n      getCertificate: function(emeOptions, callback) {\n        // request certificate\n        // if err, callback(err)\n        // if success, callback(null, certificate)\n      },\n      getLicense: function(emeOptions, keyMessage, callback) {\n        // request license\n        // if err, callback(err)\n        // if success, callback(null, license)\n      }\n    }\n  }\n});\n```\n\n### Plugin Options\n\nPlugin options may be provided in one of two ways. Either they are provided in the\nstandard plugins configuration when setting up video.js itself, or they may be set by\nassigning to the options property on the eme object itself:\n\n```javascript\nplayer.eme.options = {\n  // options you want to pass\n};\n```\n\n### emeOptions\n\n`emeOptions` are provided for all methods. This is a reference to the source options for\nthe current source merged with (overwritten by) the latest plugin options. It is available\nto make it easier to access options so that you don't have to maintain them yourself.\n\nFor example. If you need to use a userId for the getCertificate request, you can pass in\nplugin options that have:\n\n```javascript\n{\n  keySystems: {\n    \"org.w3.clearkey\": {\n      getCertificate: function(emeOptions, callback) {\n        var userId = emeOptions.userId; // 'user-id'\n        // ...\n      },\n      getLicense: function(emeOptions, keyMessage, callback) {\n        var userId = emeOptions.userId; // 'user-id'\n        // ...\n      }\n    }\n  },\n  userId: 'user-id'\n}\n```\n\nOr, if you need a source-specific userId, you can overwrite it via the source options:\n\n```javascript\n// plugin options\n{\n  keySystems: {\n    \"org.w3.clearkey\": {\n      getCertificate: function(emeOptions, callback) {\n        var userId = emeOptions.userId; // 'source-specific-user-id'\n        // ...\n      },\n      getLicense: function(emeOptions, keyMessage, callback) {\n        var userId = emeOptions.userId; // 'source-specific-user-id'\n        // ...\n      }\n    }\n  },\n  userId: 'user-id'\n}\n\n// source options\nplayer.src({\n  src: '<URL>',\n  type: 'video/webm',\n  userId: 'source-specific-user-id'\n});\n```\n\n### Passing methods seems complicated\n\nWhile simple URLs are supported for many EME implementations, we wanted to provide as much\nflexibility as possible. This means that if your server has a different structure, you use\na different format for FairPlay content IDs, or you want to test something in the browser\nwithout making a request, we can support that, since you can control the methods.\n\n## Getting Started\n\n1. Clone this repository!\n1. Install dependencies: `npm install`\n1. Run a development server: `npm start`\n\nThat's it! Refer to the [video.js plugin standards](https://github.com/videojs/generator-videojs-plugin/docs/standards.md) for more detail.\n\n### Running Tests\n\n- In all available and supported browsers: `npm test`\n- In a specific browser: `npm run test:chrome`, `npm run test:firefox`, etc.\n- While development server is running, navigate to [`http://localhost:9999/test/`](http://localhost:9999/test/) (_note:_ port may vary, check console output)\n\n### Tag and Release\n\n1. Make sure everything is committed.\n1. `npm version *` where `*` is `major`, `minor`, `patch`, etc. [Read more about versioning.](https://github.com/videojs/generator-videojs-plugin/docs/standards.md#versioning)\n1. `npm publish`\n\n## License\n\nApache License, Version 2.0. [View the license file](LICENSE)\n","version":"3.0.0","downloads":746},{"name":"videojs-contrib-hls","description":"Play back HLS with video.js, even where it's not natively supported","author":{"name":"Brightcove, Inc"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-05T03:11:04.307Z","created":"2014-04-11T22:28:32.355Z","0.4.0":"2014-04-11T22:28:32.355Z","0.4.1":"2014-04-14T21:10:08.474Z","0.5.0":"2014-04-18T15:00:29.624Z","0.6.0":"2014-05-16T19:00:42.402Z","0.7.0":"2014-05-30T15:58:05.491Z","0.7.1":"2014-06-05T16:51:40.300Z","0.7.2":"2014-06-13T16:10:30.138Z","0.8.0":"2014-06-26T17:56:30.403Z","0.8.1":"2014-07-02T19:30:13.980Z","0.8.2":"2014-07-09T17:23:23.340Z","0.8.3":"2014-07-25T15:37:19.103Z","0.8.4":"2014-08-15T19:34:53.355Z","0.9.0":"2014-09-09T13:49:33.023Z","0.9.1":"2014-09-29T20:28:08.751Z","0.9.2":"2014-10-10T16:00:13.816Z","0.10.0":"2014-10-31T14:18:05.863Z","0.10.1":"2014-11-25T22:36:01.876Z","0.10.2":"2015-01-06T19:54:31.001Z","0.10.3":"2015-01-07T22:03:00.685Z","0.10.4":"2015-02-09T18:42:04.793Z","0.11.0":"2015-03-02T23:02:56.436Z","0.11.1":"2015-03-11T21:31:44.454Z","0.11.2":"2015-03-20T18:55:50.510Z","0.12.0":"2015-04-02T21:17:37.146Z","0.13.0":"2015-04-16T20:32:57.125Z","0.13.1":"2015-04-28T22:10:26.719Z","0.14.0":"2015-05-05T19:23:51.624Z","0.15.0":"2015-05-08T18:56:18.939Z","0.16.0":"2015-05-19T21:54:03.708Z","0.16.1":"2015-05-29T20:00:49.667Z","0.17.0":"2015-06-05T22:31:54.308Z","0.17.1":"2015-06-08T23:13:59.171Z","0.17.2-0":"2015-06-10T19:09:04.536Z","0.17.2-1":"2015-06-10T23:38:42.657Z","0.17.2":"2015-06-15T18:53:13.218Z","0.17.3":"2015-06-29T15:32:31.060Z","0.17.4":"2015-07-13T02:55:55.715Z","0.17.5":"2015-07-14T14:54:54.845Z","0.17.6":"2015-07-29T22:13:42.615Z","0.17.7":"2015-08-11T16:34:55.253Z","0.17.8":"2015-08-11T21:57:17.234Z","0.17.9":"2015-09-04T17:29:04.885Z","1.0.1-0":"2015-10-22T05:15:08.579Z","1.1.0":"2015-11-02T22:17:25.792Z","1.2.0":"2015-11-06T23:13:15.401Z","1.2.1":"2015-11-22T02:10:21.137Z","1.2.2":"2015-11-28T00:12:35.692Z","1.3.0":"2015-12-08T19:48:10.255Z","1.3.1":"2015-12-16T18:40:01.648Z","1.3.2":"2015-12-22T23:34:18.578Z","1.3.3":"2015-12-22T23:40:49.483Z","1.3.4":"2016-01-05T19:54:17.538Z","1.3.5":"2016-01-22T18:06:29.571Z","1.3.6":"2016-02-04T21:23:24.605Z","1.3.7":"2016-02-08T19:33:33.321Z","1.3.8":"2016-02-11T15:20:00.267Z","1.3.9":"2016-02-22T19:57:39.846Z","2.0.0":"2016-02-26T22:02:32.501Z","1.3.10":"2016-03-01T22:34:31.950Z","1.3.11":"2016-03-04T19:09:05.469Z","2.0.1":"2016-03-11T21:59:45.407Z","1.3.9-0":"2016-03-24T17:34:49.120Z","2.1.0":"2016-04-01T20:13:01.730Z","2.1.1":"2016-04-01T20:31:10.009Z","1.3.12":"2016-04-07T20:11:48.869Z","2.1.0-0":"2016-04-08T22:24:59.736Z","2.2.0":"2016-05-06T21:27:35.245Z","3.0.0":"2016-05-24T00:37:06.747Z","3.0.1":"2016-05-24T00:45:18.786Z","3.0.2":"2016-05-24T02:18:48.366Z","3.0.3":"2016-05-26T22:12:38.151Z","3.0.4":"2016-05-31T16:23:54.781Z","3.0.5":"2016-06-02T20:56:23.874Z","3.1.0":"2016-06-09T20:54:59.065Z","3.0.6-0":"2016-07-08T23:08:39.418Z","3.2.0":"2016-07-15T23:20:03.005Z","3.3.0":"2016-07-25T22:32:28.719Z","3.0.6-1":"2016-07-27T18:13:05.956Z","3.4.0":"2016-07-29T19:49:42.675Z","3.5.0":"2016-08-15T23:55:13.623Z","3.5.1":"2016-08-16T21:18:03.151Z","3.5.2":"2016-08-17T21:19:08.043Z","3.5.3":"2016-08-24T22:14:09.629Z","3.6.0":"2016-09-27T20:08:58.106Z","3.6.1":"2016-10-13T15:23:36.400Z","3.6.2":"2016-10-17T21:13:06.999Z","3.6.3":"2016-10-18T18:04:05.796Z","3.6.4":"2016-10-18T22:00:08.673Z","3.7.0-beta":"2016-10-19T20:30:38.791Z","3.6.5":"2016-10-19T21:58:09.216Z","3.7.0-beta2":"2016-10-21T21:34:47.992Z","3.7.0-beta3":"2016-10-21T21:58:00.522Z","3.6.6":"2016-10-21T22:12:14.177Z","3.6.7":"2016-11-03T16:21:10.030Z","3.7.0-beta4":"2016-11-04T14:48:17.506Z","3.6.8":"2016-11-09T20:52:23.240Z","3.6.9":"2016-11-10T02:05:07.979Z","3.6.10":"2016-11-10T21:37:39.301Z","3.6.11":"2016-11-11T23:48:47.827Z","3.6.12":"2016-11-14T21:54:00.767Z","3.6.13":"2016-11-18T00:44:10.479Z","4.0.0":"2016-11-22T00:41:52.836Z","4.0.1":"2016-11-23T19:11:05.550Z","4.0.2":"2016-11-29T20:04:38.013Z","3.6.14-experimental":"2016-12-06T02:51:31.711Z","3.6.14":"2016-12-09T18:04:18.921Z","4.0.3":"2016-12-23T19:59:47.038Z","4.1.0":"2017-01-13T23:06:08.981Z","4.1.1":"2017-01-20T18:14:03.192Z","5.0.0":"2017-01-26T00:15:55.762Z","5.1.0":"2017-02-01T00:02:30.342Z","5.1.1":"2017-02-03T22:22:07.022Z","5.2.0":"2017-02-08T19:51:07.539Z","5.2.1":"2017-02-09T17:12:47.807Z","5.3.0":"2017-02-16T22:11:17.459Z","5.3.1":"2017-02-22T23:47:17.699Z","5.3.2":"2017-02-23T16:54:20.225Z","5.3.3":"2017-03-03T20:28:35.680Z","5.4.0":"2017-04-03T19:13:10.089Z","5.4.1":"2017-04-10T23:09:36.957Z","5.5.0":"2017-04-25T17:26:52.882Z","5.5.1":"2017-05-04T20:24:53.896Z","5.5.2":"2017-05-10T20:18:14.216Z","5.5.3":"2017-05-16T22:23:03.359Z","5.6.0":"2017-06-20T22:35:31.020Z","5.7.0":"2017-06-27T18:39:48.335Z","5.8.0":"2017-07-06T19:52:30.933Z","5.8.1":"2017-07-12T21:48:45.438Z","5.8.2":"2017-07-18T14:14:03.568Z","5.8.3":"2017-08-07T16:08:47.668Z","5.9.0":"2017-08-16T18:53:50.975Z","5.10.0":"2017-08-22T21:12:19.724Z","5.10.1":"2017-08-28T19:25:45.930Z","5.11.0":"2017-09-20T22:55:42.230Z","5.11.1":"2017-10-11T19:29:36.320Z","5.12.0":"2017-10-19T18:28:10.613Z","5.12.1":"2017-10-24T23:31:57.850Z","5.12.2":"2017-11-06T18:50:10.099Z"},"readme":"# video.js HLS Source Handler\n\n[![Build Status][travis-icon]][travis-link]\n[![Slack Status][slack-icon]][slack-link]\n\n\nPlay back HLS with video.js, even where it's not natively supported.\n\nLead Maintainer: Jon-Carlos Rivera [@imbcmdth](https://github.com/imbcmdth)\n\nMaintenance Status: Stable\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Installation](#installation)\n  - [NPM](#npm)\n  - [CDN](#cdn)\n  - [Releases](#releases)\n  - [Manual Build](#manual-build)\n- [Contributing](#contributing)\n- [Talk to us](#talk-to-us)\n- [Getting Started](#getting-started)\n  - [Video.js 6](#videojs-6)\n- [Documentation](#documentation)\n  - [Options](#options)\n    - [How to use](#how-to-use)\n      - [Initialization](#initialization)\n      - [Source](#source)\n    - [List](#list)\n      - [withCredentials](#withcredentials)\n      - [useCueTags](#usecuetags)\n      - [overrideNative](#overridenative)\n      - [blacklistDuration](#blacklistduration)\n      - [bandwidth](#bandwidth)\n      - [enableLowInitialPlaylist](#enablelowinitialplaylist)\n  - [Runtime Properties](#runtime-properties)\n    - [hls.playlists.master](#hlsplaylistsmaster)\n    - [hls.playlists.media](#hlsplaylistsmedia)\n    - [hls.segmentXhrTime](#hlssegmentxhrtime)\n    - [hls.bandwidth](#hlsbandwidth)\n    - [hls.bytesReceived](#hlsbytesreceived)\n    - [hls.selectPlaylist](#hlsselectplaylist)\n    - [hls.representations](#hlsrepresentations)\n    - [hls.xhr](#hlsxhr)\n  - [Events](#events)\n    - [loadedmetadata](#loadedmetadata)\n  - [HLS Usage Events](#hls-usage-events)\n    - [Presence Stats](#presence-stats)\n    - [Use Stats](#use-stats)\n  - [In-Band Metadata](#in-band-metadata)\n  - [Segment Metadata](#segment-metadata)\n- [Hosting Considerations](#hosting-considerations)\n- [Known Issues](#known-issues)\n  - [IE10 and Below](#ie10-and-below)\n  - [IE11](#ie11)\n  - [Fragmented MP4 Support](#fragmented-mp4-support)\n  - [Testing](#testing)\n- [Release History](#release-history)\n- [Building](#building)\n- [Development](#development)\n  - [Tools](#tools)\n  - [Commands](#commands)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n### NPM\nTo install `videojs-contrib-hls` with npm run\n\n```bash\nnpm install --save videojs-contrib-hls\n```\n\n### CDN\nSelect a version of HLS from the [CDN](https://cdnjs.com/libraries/videojs-contrib-hls)\n\n### Releases\nDownload a release of [videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls/releases)\n\n### Manual Build\nDownload a copy of this git repository and then follow the steps in [Building](#building)\n\n## Contributing\nSee [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n## Talk to us\nDrop by our slack channel (#playback) on the [Video.js slack][slack-link].\n\n## Getting Started\nGet a copy of [videojs-contrib-hls](#installation) and include it in your page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/index.m3u8\"\n     type=\"application/x-mpegURL\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-contrib-hls.min.js\"></script>\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nCheck out our [live example](http://jsbin.com/vokipos/8/edit?html,output) if you're having trouble.\n\n### Video.js 6\nWith Video.js 6, by default there is no flash support. Instead, flash support is provided\nthrough the [videojs-flash](https://github.com/videojs/videojs-flash) plugin. If you are\ntrying to use Video.js version 6 and want to include flash support, you must include\n[videojs-flash](https://github.com/videojs/videojs-flash) on your page before including\nvideojs-contrib-hls\n\n```html\n<script src=\"https://unpkg.com/videojs-flash/dist/videojs-flash.js\"></script>\n<script src=\"https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js\"></script>\n```\n\nFlash, and the [videojs-flash](https://github.com/videojs/videojs-flash) plugin, are not\nrequired, but are recommended as a fallback option for browsers that don't have a native\nHLS player or support for [Media Source Extensions](http://caniuse.com/#feat=mediasource).\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis project addresses that situation by providing a polyfill for HLS\non browsers that have support for [Media Source\nExtensions](http://caniuse.com/#feat=mediasource), or failing that,\nsupport Flash. You can deploy a single HLS stream, code against the\nregular HTML5 video APIs, and create a fast, high-quality video\nexperience across all the big web device categories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nvideojs-contrib-hls supports a bunch of HLS features. Here\nare some highlights:\n\n- video-on-demand and live playback modes\n- backup or redundant streams\n- mid-segment quality switching\n- AES-128 segment encryption\n- CEA-608 captions are automatically translated into standard HTML5\n  [caption text tracks][0]\n- In-Manifest WebVTT subtitles are automatically translated into standard HTML5\n  subtitle tracks\n- Timed ID3 Metadata is automatically translated into HTML5 metedata\n  text tracks\n- Highly customizable adaptive bitrate selection\n- Automatic bandwidth tracking\n- Cross-domain credentials support with CORS\n- Tight integration with video.js and a philosophy of exposing as much\n  as possible with standard HTML APIs\n- Stream with multiple audio tracks and switching to those audio tracks\n  (see the docs folder) for info\n- Media content in\n  [fragmented MP4s](https://developer.apple.com/videos/play/wwdc2016/504/)\n  instead of the MPEG2-TS container format.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\n\n### Options\n#### How to use\n\n##### Initialization\nYou may pass in an options object to the hls source handler at player\ninitialization. You can pass in options just like you would for other\nparts of video.js:\n\n```javascript\n// html5 for html hls\nvideojs(video, {html5: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\n// flash for flash hls\nvideojs(video, {flash: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\nvar options = {hls: {\n  withCredentials: true;\n}};\n\nvideojs(video, {flash: options, html5: options});\n\n```\n\n##### Source\nSome options, such as `withCredentials` can be passed in to hls during\n`player.src`\n\n```javascript\n\nvar player = videojs('some-video-id');\n\nplayer.src({\n  src: 'https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8',\n  type: 'application/x-mpegURL',\n  withCredentials: true\n});\n```\n\n#### List\n##### withCredentials\n* Type: `boolean`\n* can be used as a source option\n* can be used as an initialization option\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n##### useCueTags\n* Type: `boolean`\n* can be used as an initialization option\n\nWhen the `useCueTags` property is set to `true,` a text track is created with\nlabel 'ad-cues' and kind 'metadata'. The track is then added to\n`player.textTracks()`. Changes in active cue may be\ntracked by following the Video.js cue points API for text tracks. For example:\n\n```javascript\nlet textTracks = player.textTracks();\nlet cuesTrack;\n\nfor (let i = 0; i < textTracks.length; i++) {\n  if (textTracks[i].label === 'ad-cues') {\n    cuesTrack = textTracks[i];\n  }\n}\n\ncuesTrack.addEventListener('cuechange', function() {\n  let activeCues = cuesTrack.activeCues;\n\n  for (let i = 0; i < activeCues.length; i++) {\n    let activeCue = activeCues[i];\n\n    console.log('Cue runs from ' + activeCue.startTime +\n                ' to ' + activeCue.endTime);\n  }\n});\n```\n\n##### overrideNative\n* Type: `boolean`\n* can be used as an initialization option\n\nTry to use videojs-contrib-hls even on platforms that provide some\nlevel of HLS support natively. There are a number of platforms that\n*technically* play back HLS content but aren't very reliable or are\nmissing features like CEA-608 captions support. When `overrideNative`\nis true, if the platform supports Media Source Extensions\nvideojs-contrib-hls will take over HLS playback to provide a more\nconsistent experience.\n\n__NOTE__: If you use this option, you must also set\n`videojs.options.html5.nativeAudioTracks` and\n`videojs.options.html5.nativeVideoTracks` to\n`false`. videojs-contrib-hls relies on audio and video tracks to play\nstreams with alternate audio and requires additional capabilities only\nsupported by non-native tracks in video.js.\n\n##### blacklistDuration\n* Type: `number`\n* can be used as an initialization option\n\nWhen the `blacklistDuration` property is set to a time duration in seconds,\nif a playlist is blacklisted, it will be blacklisted for a period of that\ncustomized duration. This enables the blacklist duration to be configured\nby the user.\n\n##### bandwidth\n* Type: `number`\n* can be used as an initialization option\n\nWhen the `bandwidth` property is set (bits per second), it will be used in\nthe calculation for initial playlist selection, before more bandwidth\ninformation is seen by the player.\n\n##### enableLowInitialPlaylist\n* Type: `boolean`\n* can be used as an initialization option\n\nWhen `enableLowInitialPlaylist` is set to true, it will be used to select\nthe lowest bitrate playlist initially.  This helps to decrease playback start time.\nThis setting is `false` by default.\n\n### Runtime Properties\nRuntime properties are attached to the tech object when HLS is in\nuse. You can get a reference to the HLS source handler like this:\n\n```javascript\nvar hls = player.tech({ IWillNotUseThisInPlugins: true }).hls;\n```\n\nIf you *were* thinking about modifying runtime properties in a\nvideo.js plugin, we'd recommend you avoid it. Your plugin won't work\nwith videos that don't use videojs-contrib-hls and the best plugins\nwork across all the media types that video.js supports. If you're\ndeploying videojs-contrib-hls on your own website and want to make a\ncouple tweaks though, go for it!\n\n#### hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\nOverridding this function with your own is very powerful but is overkill\nfor many purposes. Most of the time, you should use the much simpler\nfunction below to selectively enable or disable a playlist from the\nadaptive streaming logic.\n\n#### hls.representations\nType: `function`\n\nIt is recommended to include the [videojs-contrib-quality-levels](https://github.com/videojs/videojs-contrib-quality-levels) plugin to your page so that videojs-contrib-hls will automatically populate the QualityLevelList exposed on the player by the plugin. You can access this list by calling `player.qualityLevels()`. See the [videojs-contrib-quality-levels project page](https://github.com/videojs/videojs-contrib-quality-levels) for more information on how to use the api.\n\nExample, only enabling representations with a width greater than or equal to 720:\n\n```javascript\nvar qualityLevels = player.qualityLevels();\n\nfor (var i = 0; i < qualityLevels.length; i++) {\n  var quality = qualityLevels[i];\n  if (quality.width >= 720) {\n    quality.enabled = true;\n  } else {\n    quality.enabled = false;\n  }\n}\n```\n\nIf including [videojs-contrib-quality-levels](https://github.com/videojs/videojs-contrib-quality-levels) is not an option, you can use the representations api. To get all of the available representations, call the `representations()` method on `player.hls`. This will return a list of plain objects, each with `width`, `height`, `bandwidth`, and `id` properties, and an `enabled()` method.\n\n```javascript\nplayer.hls.representations();\n```\n\nTo see whether the representation is enabled or disabled, call its `enabled()` method with no arguments. To set whether it is enabled/disabled, call its `enabled()` method and pass in a boolean value. Calling `<representation>.enabled(true)` will allow the adaptive bitrate algorithm to select the representation while calling `<representation>.enabled(false)` will disallow any selection of that representation.\n\nExample, only enabling representations with a width greater than or equal to 720:\n\n```javascript\nplayer.hls.representations().forEach(function(rep) {\n  if (rep.width >= 720) {\n    rep.enabled(true);\n  } else {\n    rep.enabled(false);\n  }\n});\n```\n\n#### hls.xhr\nType: `function`\n\nThe xhr function that is used by HLS internally is exposed on the per-\nplayer `hls` object. While it is possible, we do not recommend replacing\nthe function with your own implementation. Instead, the `xhr` provides\nthe ability to specify a `beforeRequest` function that will be called\nwith an object containing the options that will be used to create the\nxhr request.\n\nExample:\n```javascript\nplayer.hls.xhr.beforeRequest = function(options) {\n  options.uri = options.uri.replace('example.com', 'foo.com');\n\n  return options;\n};\n```\n\nThe global `videojs.Hls` also exposes an `xhr` property. Specifying a\n`beforeRequest` function on that will allow you to intercept the options\nfor *all* requests in every player on a page. For consistency across\nbrowsers the video source should be set at runtime once the video player\nis ready.\n\nExample\n```javascript\nvideojs.Hls.xhr.beforeRequest = function(options) {\n  /*\n   * Modifications to requests that will affect every player.\n   */\n\n  return options;\n};\n\nvar player = videojs('video-player-id');\nplayer.ready(function() {\n  this.src({\n    src: 'https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8',\n    type: 'application/x-mpegURL',\n  });\n});\n```\n\nFor information on the type of options that you can modify see the\ndocumentation at [https://github.com/Raynos/xhr](https://github.com/Raynos/xhr).\n\n### Events\nStandard HTML video events are handled by video.js automatically and\nare triggered on the player object.\n\n#### loadedmetadata\n\nFired after the first segment is downloaded for a playlist. This will not happen\nuntil playback if video.js's `metadata` setting is `none`\n\n### HLS Usage Events\n\nUsage tracking events are fired when we detect a certain HLS feature, encoding setting,\nor API is used. These can be helpful for analytics, and to pinpoint the cause of HLS errors.\nFor instance, if errors are being fired in tandem with a usage event indicating that the\nplayer was playing an AES encrypted stream, then we have a possible avenue to explore when\ndebugging the error.\n\nNote that although these usage events are listed below, they may change at any time without\na major version change.\n\nHLS usage events are triggered on the tech with the exception of the 3 hls-reload-error\nevents, which are triggered on the player.\n\n#### Presence Stats\n\nEach of the following usage events are fired once per source if (and when) detected:\n\n| Name          | Description   |\n| ------------- | ------------- |\n| hls-webvtt    | master manifest has at least one segmented WebVTT playlist |\n| hls-aes       | a playlist is AES encrypted |\n| hls-fmp4      | a playlist used fMP4 segments |\n| hls-demuxed   | audio and video are demuxed by default |\n| hls-alternate-audio | alternate audio available in the master manifest |\n| hls-playlist-cue-tags | a playlist used cue tags (see useCueTags(#usecuetags) for details) |\n\n#### Use Stats\n\nEach of the following usage events are fired per use:\n\n| Name          | Description   |\n| ------------- | ------------- |\n| hls-gap-skip  | player skipped a gap in the buffer |\n| hls-player-access | player.hls was accessed |\n| hls-audio-change | a user selected an alternate audio stream |\n| hls-rendition-disabled | a rendition was disabled |\n| hls-rendition-enabled | a rendition was enabled |\n| hls-rendition-blacklisted | a rendition was blacklisted |\n| hls-timestamp-offset | a timestamp offset was set in HLS (can identify discontinuities) |\n| hls-unknown-waiting | the player stopped for an unknown reason and we seeked to current time try to address it |\n| hls-live-resync | playback fell off the back of a live playlist and we resynced to the live point |\n| hls-video-underflow | we seeked to current time to address video underflow |\n| hls-error-reload-initialized | the reloadSourceOnError plugin was initialized |\n| hls-error-reload | the reloadSourceOnError plugin reloaded a source |\n| hls-error-reload-canceled | an error occurred too soon after the last reload, so we didn't reload again (to prevent error loops) |\n\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are mapped to cue points and their values set as the cue\ntext. Cues are created for all other frame types and the data is\nattached to the generated cue:\n\n```javascript\ncue.value.data\n```\n\nThere are lots of guides and references to using text tracks [around\nthe web](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n### Segment Metadata\nYou can get metadata about the segments currently in the buffer by using the `segment-metadata`\ntext track. You can get the metadata of the currently rendered segment by looking at the\ntrack's `activeCues` array. The metadata will be attached to the `cue.value` property and\nwill have this structure\n\n```javascript\ncue.value = {\n  uri, // The Segment uri\n  timeline, // Timeline of the segment for detecting discontinuities\n  playlist, // The Playlist uri\n  start, // Segment start time\n  end // Segment end time\n};\n```\n\nExample:\nDetect when a change in quality is rendered on screen\n```javascript\nlet tracks = player.textTracks();\nlet segmentMetadataTrack;\n\nfor (let i = 0; i < tracks.length; i++) {\n  if (tracks[i].label === 'segment-metadata') {\n    segmentMetadataTrack = tracks[i];\n  }\n}\n\nlet previousPlaylist;\n\nif (segmentMetadataTrack) {\n  segmentMetadataTrack.on('cuechange', function() {\n    let activeCue = segmentMetadataTrack.activeCues[0];\n\n    if (activeCue) {\n      if (previousPlaylist !== activeCue.value.playlist) {\n        console.log('Switched from rendition ' + previousPlaylist +\n                    ' to rendition ' + activeCue.value.playlist);\n      }\n      previousPlaylist = activeCue.value.playlist;\n    }\n  });\n}\n```\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n\n## Known Issues\nIssues that are currenty know about with workarounds. If you want to\nhelp find a solution that would be appreciated!\n\n### IE10 and Below\nAs of version 5.0.0, IE10 and below are no longer supported.\n\n### IE11\nIn some IE11 setups there are issues working with its native HTML\nSourceBuffers functionality. This leads to various issues, such as\nvideos stopping playback with media decode errors. The known workaround\nfor this issues is to force the player to use flash when running on IE11.\n\n### Fragmented MP4 Support\nEdge has native support for HLS but only in the MPEG2-TS container. If\nyou attempt to play an HLS stream with fragmented MP4 segments, Edge\nwill stall. Fragmented MP4s are only supported on browser that have\n[Media Source Extensions](http://caniuse.com/#feat=mediasource) available.\n\n### Testing\n\nFor testing, you run `npm run test`. This will run tests using any of the\nbrowsers that karma-detect-browsers detects on your machine.\n\n## Release History\nCheck out the [changelog](CHANGELOG.md) for a summary of each release.\n\n## Building\nTo build a copy of videojs-contrib-hls run the following commands\n\n```bash\ngit clone https://github.com/videojs/videojs-contrib-hls\ncd videojs-contrib-hls\nnpm i\nnpm run build\n```\n\nvideojs-contrib-hls will have created all of the files for using it in a dist folder\n\n## Development\n\n### Tools\n* Download stream locally with the [HLS Fetcher](https://github.com/imbcmdth/hls-fetcher)\n* Simulate errors with [Murphy](https://github.com/mrocajr/murphy)\n\n### Commands\nAll commands for development are listed in the `package.json` file and are run using\n```bash\nnpm run <command>\n```\n\n[slack-icon]: http://slack.videojs.com/badge.svg\n[slack-link]: http://slack.videojs.com\n[travis-icon]: https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master\n[travis-link]: https://travis-ci.org/videojs/videojs-contrib-hls\n","version":"5.12.2","downloads":19476},{"name":"videojs-contrib-hls-s1","description":"Play back HLS with video.js, even where it's not natively supported","author":{"name":"Brightcove, Inc"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-02-18T09:52:50.988Z","created":"2016-02-18T09:52:50.988Z","1.3.9":"2016-02-18T09:52:50.988Z"},"readme":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [video.js HLS Source Handler](#videojs-hls-source-handler)\n  - [Getting Started](#getting-started)\n  - [Documentation](#documentation)\n    - [Options](#options)\n      - [withCredentials](#withcredentials)\n    - [Runtime Properties](#runtime-properties)\n      - [hls.playlists.master](#hlsplaylistsmaster)\n      - [hls.playlists.media](#hlsplaylistsmedia)\n      - [hls.segmentXhrTime](#hlssegmentxhrtime)\n      - [hls.bandwidth](#hlsbandwidth)\n      - [hls.bytesReceived](#hlsbytesreceived)\n      - [hls.selectPlaylist](#hlsselectplaylist)\n    - [Events](#events)\n      - [loadedmetadata](#loadedmetadata)\n      - [loadedplaylist](#loadedplaylist)\n      - [mediachange](#mediachange)\n    - [In-Band Metadata](#in-band-metadata)\n  - [Hosting Considerations](#hosting-considerations)\n    - [Testing](#testing)\n  - [Release History](#release-history)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# video.js HLS Source Handler\n\nPlay back HLS with video.js, even where it's not natively supported.\n\n[![Build Status](https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-hls)\n\n## Getting Started\nDownload\n[videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls/releases)\nand include it in your page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/index.m3u8\"\n     type=\"application/x-mpegURL\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-hls.min.js\"></script>\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nCheck out our [live example](http://videojs.github.io/videojs-contrib-hls/) if you're having trouble.\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis project addresses that situation by providing a polyfill for HLS\non browsers that have support for [Media Source\nExtensions](http://caniuse.com/#feat=mediasource), or failing that,\nsupport Flash. You can deploy a single HLS stream, code against the\nregular HTML5 video APIs, and create a fast, high-quality video\nexperience across all the big web device categories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nvideojs-contrib-hls support a bunch of HLS v2 and v3 features. Here\nare some highlights:\n\n- video-on-demand and live playback modes\n- backup or redundant streams\n- mid-segment quality switching\n- AES-128 segment encryption\n- CEA-608 captions are automatically translated into standard HTML5\n  [caption text\n  tracks](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)\n- Timed ID3 Metadata is automatically translated into HTML5 metedata\n  text tracks\n- Highly customizable adaptive bitrate selection\n- Automatic bandwidth tracking\n- Cross-domain credentials support with CORS\n- Tight integration with video.js and a philosophy of exposing as much\n  as possible with standard HTML APIs\n\n### Options\n\nYou may pass in an options object to the hls source handler at player\ninitialization. You can pass in options just like you would for other\nparts of video.js:\n\n```javascript\nvideojs(video, {\n  hls: {\n    withCredentials: true\n  }\n});\n```\n\n#### withCredentials\nType: `boolean`\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n### Runtime Properties\nRuntime properties are attached to the tech object when HLS is in\nuse. You can get a reference to the HLS source handler like this:\n\n```js\nvar hls = player.tech({ IWillNotUseThisInPlugins: true }).hls;\n```\n\nIf you *were* thinking about modifying runtime properties in a\nvideo.js plugin, we'd recommend you avoid it. Your plugin won't work\nwith videos that don't use videojs-contrib-hls and the best plugins\nwork across all the media types that video.js supports. If you're\ndeploying videojs-contrib-hls on your own website and want to make a\ncouple tweaks though, go for it!\n\n#### hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\n### Events\nStandard HTML video events are handled by video.js automatically and\nare triggered on the player object. In addition, there are a couple\nspecialized events you can listen to on the HLS object during\nplayback:\n\n#### loadedmetadata\n\nFired after the first media playlist is downloaded for a stream.\n\n#### loadedplaylist\n\nFired immediately after a new master or media playlist has been\ndownloaded. By default, the tech only downloads playlists as they\nare needed.\n\n#### mediachange\n\nFired when a new playlist becomes the active media playlist. Note that\nthe actual rendering quality change does not occur simultaneously with\nthis event; a new segment must be requested and the existing buffer\ndepleted first.\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are mapped to cue points and their values set as the cue\ntext. Cues are created for all other frame types and the data is\nattached to the generated cue:\n\n```js\ncue.value.data\n```\n\nThere are lots of guides and references to using text tracks [around\nthe web](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n### Testing\n\nFor testing, you can either run `npm test` or use `grunt` directly.\nIf you use `npm test`, it will only run the karma and end-to-end tests using chrome.\nYou can specify which browsers you want the tests to run via grunt's `test` task.\nYou can use either grunt-style arguments or comma separated arguments:\n```\ngrunt test:chrome:firefox\t# grunt-style\ngrunt test:chrome,firefox\t# comma-separated\n```\nPossible options are:\n* `chromecanary`\n* `phantomjs`\n* `opera`\n* `chrome`<sup>1</sup>\n* `safari`<sup>1, 2</sup>\n* `firefox`<sup>1</sup>\n* `ie`<sup>1</sup>\n\n\n_<sup>1</sup>supported end-to-end browsers_<br />\n_<sup>2</sup>requires the [SafariDriver extension]( https://code.google.com/p/selenium/wiki/SafariDriver) to be installed_\n\n## Release History\nCheck out the [changelog](CHANGELOG.md) for a summary of each release.\n","version":"1.3.9","downloads":7},{"name":"videojs-contrib-hls-webpack","description":"Play back HLS with video.js, even where it's not natively supported","author":{"name":"Brightcove, Inc"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-02T08:43:49.938Z","created":"2017-12-02T08:43:49.938Z","5.12.2":"2017-12-02T08:43:49.938Z"},"readme":"# video.js HLS Source Handler\n\n[![Build Status][travis-icon]][travis-link]\n[![Slack Status][slack-icon]][slack-link]\n\n\nPlay back HLS with video.js, even where it's not natively supported.\n\nLead Maintainer: Jon-Carlos Rivera [@imbcmdth](https://github.com/imbcmdth)\n\nMaintenance Status: Stable\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Installation](#installation)\n  - [NPM](#npm)\n  - [CDN](#cdn)\n  - [Releases](#releases)\n  - [Manual Build](#manual-build)\n- [Contributing](#contributing)\n- [Talk to us](#talk-to-us)\n- [Getting Started](#getting-started)\n  - [Video.js 6](#videojs-6)\n- [Documentation](#documentation)\n  - [Options](#options)\n    - [How to use](#how-to-use)\n      - [Initialization](#initialization)\n      - [Source](#source)\n    - [List](#list)\n      - [withCredentials](#withcredentials)\n      - [useCueTags](#usecuetags)\n      - [overrideNative](#overridenative)\n      - [blacklistDuration](#blacklistduration)\n      - [bandwidth](#bandwidth)\n      - [enableLowInitialPlaylist](#enablelowinitialplaylist)\n  - [Runtime Properties](#runtime-properties)\n    - [hls.playlists.master](#hlsplaylistsmaster)\n    - [hls.playlists.media](#hlsplaylistsmedia)\n    - [hls.segmentXhrTime](#hlssegmentxhrtime)\n    - [hls.bandwidth](#hlsbandwidth)\n    - [hls.bytesReceived](#hlsbytesreceived)\n    - [hls.selectPlaylist](#hlsselectplaylist)\n    - [hls.representations](#hlsrepresentations)\n    - [hls.xhr](#hlsxhr)\n  - [Events](#events)\n    - [loadedmetadata](#loadedmetadata)\n  - [HLS Usage Events](#hls-usage-events)\n    - [Presence Stats](#presence-stats)\n    - [Use Stats](#use-stats)\n  - [In-Band Metadata](#in-band-metadata)\n  - [Segment Metadata](#segment-metadata)\n- [Hosting Considerations](#hosting-considerations)\n- [Known Issues](#known-issues)\n  - [IE10 and Below](#ie10-and-below)\n  - [IE11](#ie11)\n  - [Fragmented MP4 Support](#fragmented-mp4-support)\n  - [Testing](#testing)\n- [Release History](#release-history)\n- [Building](#building)\n- [Development](#development)\n  - [Tools](#tools)\n  - [Commands](#commands)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n### NPM\nTo install `videojs-contrib-hls` with npm run\n\n```bash\nnpm install --save videojs-contrib-hls\n```\n\n### CDN\nSelect a version of HLS from the [CDN](https://cdnjs.com/libraries/videojs-contrib-hls)\n\n### Releases\nDownload a release of [videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls/releases)\n\n### Manual Build\nDownload a copy of this git repository and then follow the steps in [Building](#building)\n\n## Contributing\nSee [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n## Talk to us\nDrop by our slack channel (#playback) on the [Video.js slack][slack-link].\n\n## Getting Started\nGet a copy of [videojs-contrib-hls](#installation) and include it in your page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/index.m3u8\"\n     type=\"application/x-mpegURL\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-contrib-hls.min.js\"></script>\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nCheck out our [live example](http://jsbin.com/vokipos/8/edit?html,output) if you're having trouble.\n\n### Video.js 6\nWith Video.js 6, by default there is no flash support. Instead, flash support is provided\nthrough the [videojs-flash](https://github.com/videojs/videojs-flash) plugin. If you are\ntrying to use Video.js version 6 and want to include flash support, you must include\n[videojs-flash](https://github.com/videojs/videojs-flash) on your page before including\nvideojs-contrib-hls\n\n```html\n<script src=\"https://unpkg.com/videojs-flash/dist/videojs-flash.js\"></script>\n<script src=\"https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js\"></script>\n```\n\nFlash, and the [videojs-flash](https://github.com/videojs/videojs-flash) plugin, are not\nrequired, but are recommended as a fallback option for browsers that don't have a native\nHLS player or support for [Media Source Extensions](http://caniuse.com/#feat=mediasource).\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis project addresses that situation by providing a polyfill for HLS\non browsers that have support for [Media Source\nExtensions](http://caniuse.com/#feat=mediasource), or failing that,\nsupport Flash. You can deploy a single HLS stream, code against the\nregular HTML5 video APIs, and create a fast, high-quality video\nexperience across all the big web device categories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nvideojs-contrib-hls supports a bunch of HLS features. Here\nare some highlights:\n\n- video-on-demand and live playback modes\n- backup or redundant streams\n- mid-segment quality switching\n- AES-128 segment encryption\n- CEA-608 captions are automatically translated into standard HTML5\n  [caption text tracks][0]\n- In-Manifest WebVTT subtitles are automatically translated into standard HTML5\n  subtitle tracks\n- Timed ID3 Metadata is automatically translated into HTML5 metedata\n  text tracks\n- Highly customizable adaptive bitrate selection\n- Automatic bandwidth tracking\n- Cross-domain credentials support with CORS\n- Tight integration with video.js and a philosophy of exposing as much\n  as possible with standard HTML APIs\n- Stream with multiple audio tracks and switching to those audio tracks\n  (see the docs folder) for info\n- Media content in\n  [fragmented MP4s](https://developer.apple.com/videos/play/wwdc2016/504/)\n  instead of the MPEG2-TS container format.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\n\n### Options\n#### How to use\n\n##### Initialization\nYou may pass in an options object to the hls source handler at player\ninitialization. You can pass in options just like you would for other\nparts of video.js:\n\n```javascript\n// html5 for html hls\nvideojs(video, {html5: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\n// flash for flash hls\nvideojs(video, {flash: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\nvar options = {hls: {\n  withCredentials: true;\n}};\n\nvideojs(video, {flash: options, html5: options});\n\n```\n\n##### Source\nSome options, such as `withCredentials` can be passed in to hls during\n`player.src`\n\n```javascript\n\nvar player = videojs('some-video-id');\n\nplayer.src({\n  src: 'https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8',\n  type: 'application/x-mpegURL',\n  withCredentials: true\n});\n```\n\n#### List\n##### withCredentials\n* Type: `boolean`\n* can be used as a source option\n* can be used as an initialization option\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n##### useCueTags\n* Type: `boolean`\n* can be used as an initialization option\n\nWhen the `useCueTags` property is set to `true,` a text track is created with\nlabel 'ad-cues' and kind 'metadata'. The track is then added to\n`player.textTracks()`. Changes in active cue may be\ntracked by following the Video.js cue points API for text tracks. For example:\n\n```javascript\nlet textTracks = player.textTracks();\nlet cuesTrack;\n\nfor (let i = 0; i < textTracks.length; i++) {\n  if (textTracks[i].label === 'ad-cues') {\n    cuesTrack = textTracks[i];\n  }\n}\n\ncuesTrack.addEventListener('cuechange', function() {\n  let activeCues = cuesTrack.activeCues;\n\n  for (let i = 0; i < activeCues.length; i++) {\n    let activeCue = activeCues[i];\n\n    console.log('Cue runs from ' + activeCue.startTime +\n                ' to ' + activeCue.endTime);\n  }\n});\n```\n\n##### overrideNative\n* Type: `boolean`\n* can be used as an initialization option\n\nTry to use videojs-contrib-hls even on platforms that provide some\nlevel of HLS support natively. There are a number of platforms that\n*technically* play back HLS content but aren't very reliable or are\nmissing features like CEA-608 captions support. When `overrideNative`\nis true, if the platform supports Media Source Extensions\nvideojs-contrib-hls will take over HLS playback to provide a more\nconsistent experience.\n\n__NOTE__: If you use this option, you must also set\n`videojs.options.html5.nativeAudioTracks` and\n`videojs.options.html5.nativeVideoTracks` to\n`false`. videojs-contrib-hls relies on audio and video tracks to play\nstreams with alternate audio and requires additional capabilities only\nsupported by non-native tracks in video.js.\n\n##### blacklistDuration\n* Type: `number`\n* can be used as an initialization option\n\nWhen the `blacklistDuration` property is set to a time duration in seconds,\nif a playlist is blacklisted, it will be blacklisted for a period of that\ncustomized duration. This enables the blacklist duration to be configured\nby the user.\n\n##### bandwidth\n* Type: `number`\n* can be used as an initialization option\n\nWhen the `bandwidth` property is set (bits per second), it will be used in\nthe calculation for initial playlist selection, before more bandwidth\ninformation is seen by the player.\n\n##### enableLowInitialPlaylist\n* Type: `boolean`\n* can be used as an initialization option\n\nWhen `enableLowInitialPlaylist` is set to true, it will be used to select\nthe lowest bitrate playlist initially.  This helps to decrease playback start time.\nThis setting is `false` by default.\n\n### Runtime Properties\nRuntime properties are attached to the tech object when HLS is in\nuse. You can get a reference to the HLS source handler like this:\n\n```javascript\nvar hls = player.tech({ IWillNotUseThisInPlugins: true }).hls;\n```\n\nIf you *were* thinking about modifying runtime properties in a\nvideo.js plugin, we'd recommend you avoid it. Your plugin won't work\nwith videos that don't use videojs-contrib-hls and the best plugins\nwork across all the media types that video.js supports. If you're\ndeploying videojs-contrib-hls on your own website and want to make a\ncouple tweaks though, go for it!\n\n#### hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\nOverridding this function with your own is very powerful but is overkill\nfor many purposes. Most of the time, you should use the much simpler\nfunction below to selectively enable or disable a playlist from the\nadaptive streaming logic.\n\n#### hls.representations\nType: `function`\n\nIt is recommended to include the [videojs-contrib-quality-levels](https://github.com/videojs/videojs-contrib-quality-levels) plugin to your page so that videojs-contrib-hls will automatically populate the QualityLevelList exposed on the player by the plugin. You can access this list by calling `player.qualityLevels()`. See the [videojs-contrib-quality-levels project page](https://github.com/videojs/videojs-contrib-quality-levels) for more information on how to use the api.\n\nExample, only enabling representations with a width greater than or equal to 720:\n\n```javascript\nvar qualityLevels = player.qualityLevels();\n\nfor (var i = 0; i < qualityLevels.length; i++) {\n  var quality = qualityLevels[i];\n  if (quality.width >= 720) {\n    quality.enabled = true;\n  } else {\n    quality.enabled = false;\n  }\n}\n```\n\nIf including [videojs-contrib-quality-levels](https://github.com/videojs/videojs-contrib-quality-levels) is not an option, you can use the representations api. To get all of the available representations, call the `representations()` method on `player.hls`. This will return a list of plain objects, each with `width`, `height`, `bandwidth`, and `id` properties, and an `enabled()` method.\n\n```javascript\nplayer.hls.representations();\n```\n\nTo see whether the representation is enabled or disabled, call its `enabled()` method with no arguments. To set whether it is enabled/disabled, call its `enabled()` method and pass in a boolean value. Calling `<representation>.enabled(true)` will allow the adaptive bitrate algorithm to select the representation while calling `<representation>.enabled(false)` will disallow any selection of that representation.\n\nExample, only enabling representations with a width greater than or equal to 720:\n\n```javascript\nplayer.hls.representations().forEach(function(rep) {\n  if (rep.width >= 720) {\n    rep.enabled(true);\n  } else {\n    rep.enabled(false);\n  }\n});\n```\n\n#### hls.xhr\nType: `function`\n\nThe xhr function that is used by HLS internally is exposed on the per-\nplayer `hls` object. While it is possible, we do not recommend replacing\nthe function with your own implementation. Instead, the `xhr` provides\nthe ability to specify a `beforeRequest` function that will be called\nwith an object containing the options that will be used to create the\nxhr request.\n\nExample:\n```javascript\nplayer.hls.xhr.beforeRequest = function(options) {\n  options.uri = options.uri.replace('example.com', 'foo.com');\n\n  return options;\n};\n```\n\nThe global `videojs.Hls` also exposes an `xhr` property. Specifying a\n`beforeRequest` function on that will allow you to intercept the options\nfor *all* requests in every player on a page. For consistency across\nbrowsers the video source should be set at runtime once the video player\nis ready.\n\nExample\n```javascript\nvideojs.Hls.xhr.beforeRequest = function(options) {\n  /*\n   * Modifications to requests that will affect every player.\n   */\n\n  return options;\n};\n\nvar player = videojs('video-player-id');\nplayer.ready(function() {\n  this.src({\n    src: 'https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8',\n    type: 'application/x-mpegURL',\n  });\n});\n```\n\nFor information on the type of options that you can modify see the\ndocumentation at [https://github.com/Raynos/xhr](https://github.com/Raynos/xhr).\n\n### Events\nStandard HTML video events are handled by video.js automatically and\nare triggered on the player object.\n\n#### loadedmetadata\n\nFired after the first segment is downloaded for a playlist. This will not happen\nuntil playback if video.js's `metadata` setting is `none`\n\n### HLS Usage Events\n\nUsage tracking events are fired when we detect a certain HLS feature, encoding setting,\nor API is used. These can be helpful for analytics, and to pinpoint the cause of HLS errors.\nFor instance, if errors are being fired in tandem with a usage event indicating that the\nplayer was playing an AES encrypted stream, then we have a possible avenue to explore when\ndebugging the error.\n\nNote that although these usage events are listed below, they may change at any time without\na major version change.\n\nHLS usage events are triggered on the tech with the exception of the 3 hls-reload-error\nevents, which are triggered on the player.\n\n#### Presence Stats\n\nEach of the following usage events are fired once per source if (and when) detected:\n\n| Name          | Description   |\n| ------------- | ------------- |\n| hls-webvtt    | master manifest has at least one segmented WebVTT playlist |\n| hls-aes       | a playlist is AES encrypted |\n| hls-fmp4      | a playlist used fMP4 segments |\n| hls-demuxed   | audio and video are demuxed by default |\n| hls-alternate-audio | alternate audio available in the master manifest |\n| hls-playlist-cue-tags | a playlist used cue tags (see useCueTags(#usecuetags) for details) |\n\n#### Use Stats\n\nEach of the following usage events are fired per use:\n\n| Name          | Description   |\n| ------------- | ------------- |\n| hls-gap-skip  | player skipped a gap in the buffer |\n| hls-player-access | player.hls was accessed |\n| hls-audio-change | a user selected an alternate audio stream |\n| hls-rendition-disabled | a rendition was disabled |\n| hls-rendition-enabled | a rendition was enabled |\n| hls-rendition-blacklisted | a rendition was blacklisted |\n| hls-timestamp-offset | a timestamp offset was set in HLS (can identify discontinuities) |\n| hls-unknown-waiting | the player stopped for an unknown reason and we seeked to current time try to address it |\n| hls-live-resync | playback fell off the back of a live playlist and we resynced to the live point |\n| hls-video-underflow | we seeked to current time to address video underflow |\n| hls-error-reload-initialized | the reloadSourceOnError plugin was initialized |\n| hls-error-reload | the reloadSourceOnError plugin reloaded a source |\n| hls-error-reload-canceled | an error occurred too soon after the last reload, so we didn't reload again (to prevent error loops) |\n\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are mapped to cue points and their values set as the cue\ntext. Cues are created for all other frame types and the data is\nattached to the generated cue:\n\n```javascript\ncue.value.data\n```\n\nThere are lots of guides and references to using text tracks [around\nthe web](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n### Segment Metadata\nYou can get metadata about the segments currently in the buffer by using the `segment-metadata`\ntext track. You can get the metadata of the currently rendered segment by looking at the\ntrack's `activeCues` array. The metadata will be attached to the `cue.value` property and\nwill have this structure\n\n```javascript\ncue.value = {\n  uri, // The Segment uri\n  timeline, // Timeline of the segment for detecting discontinuities\n  playlist, // The Playlist uri\n  start, // Segment start time\n  end // Segment end time\n};\n```\n\nExample:\nDetect when a change in quality is rendered on screen\n```javascript\nlet tracks = player.textTracks();\nlet segmentMetadataTrack;\n\nfor (let i = 0; i < tracks.length; i++) {\n  if (tracks[i].label === 'segment-metadata') {\n    segmentMetadataTrack = tracks[i];\n  }\n}\n\nlet previousPlaylist;\n\nif (segmentMetadataTrack) {\n  segmentMetadataTrack.on('cuechange', function() {\n    let activeCue = segmentMetadataTrack.activeCues[0];\n\n    if (activeCue) {\n      if (previousPlaylist !== activeCue.value.playlist) {\n        console.log('Switched from rendition ' + previousPlaylist +\n                    ' to rendition ' + activeCue.value.playlist);\n      }\n      previousPlaylist = activeCue.value.playlist;\n    }\n  });\n}\n```\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n\n## Known Issues\nIssues that are currenty know about with workarounds. If you want to\nhelp find a solution that would be appreciated!\n\n### IE10 and Below\nAs of version 5.0.0, IE10 and below are no longer supported.\n\n### IE11\nIn some IE11 setups there are issues working with its native HTML\nSourceBuffers functionality. This leads to various issues, such as\nvideos stopping playback with media decode errors. The known workaround\nfor this issues is to force the player to use flash when running on IE11.\n\n### Fragmented MP4 Support\nEdge has native support for HLS but only in the MPEG2-TS container. If\nyou attempt to play an HLS stream with fragmented MP4 segments, Edge\nwill stall. Fragmented MP4s are only supported on browser that have\n[Media Source Extensions](http://caniuse.com/#feat=mediasource) available.\n\n### Testing\n\nFor testing, you run `npm run test`. This will run tests using any of the\nbrowsers that karma-detect-browsers detects on your machine.\n\n## Release History\nCheck out the [changelog](CHANGELOG.md) for a summary of each release.\n\n## Building\nTo build a copy of videojs-contrib-hls run the following commands\n\n```bash\ngit clone https://github.com/videojs/videojs-contrib-hls\ncd videojs-contrib-hls\nnpm i\nnpm run build\n```\n\nvideojs-contrib-hls will have created all of the files for using it in a dist folder\n\n## Development\n\n### Tools\n* Download stream locally with the [HLS Fetcher](https://github.com/imbcmdth/hls-fetcher)\n* Simulate errors with [Murphy](https://github.com/mrocajr/murphy)\n\n### Commands\nAll commands for development are listed in the `package.json` file and are run using\n```bash\nnpm run <command>\n```\n\n[slack-icon]: http://slack.videojs.com/badge.svg\n[slack-link]: http://slack.videojs.com\n[travis-icon]: https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master\n[travis-link]: https://travis-ci.org/videojs/videojs-contrib-hls\n","version":"5.12.2","downloads":22},{"name":"videojs-contrib-media-sources","description":"A Media Source Extensions plugin for video.js","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-11-06T18:07:18.705Z","created":"2013-11-19T15:34:52.707Z","0.0.0":"2013-11-19T15:34:58.811Z","0.2.0":"2014-04-14T17:43:27.519Z","0.3.0":"2014-05-30T15:48:53.073Z","0.3.1":"2015-01-07T20:49:55.539Z","0.3.2":"2015-04-22T17:24:58.359Z","1.0.0":"2015-05-14T14:28:32.110Z","2.0.0":"2015-09-29T20:08:36.309Z","2.0.1":"2015-09-30T19:38:42.584Z","2.1.0":"2015-10-22T04:44:49.232Z","2.0.2":"2015-11-02T18:35:19.066Z","2.1.1":"2015-11-02T18:39:51.306Z","2.2.0":"2015-11-02T21:59:29.677Z","2.3.0":"2015-11-06T23:06:39.733Z","2.4.0":"2015-11-16T16:55:22.525Z","2.4.1":"2015-11-20T23:32:55.098Z","2.4.2":"2015-12-08T19:45:19.733Z","2.4.3":"2015-12-16T18:28:25.369Z","2.4.4":"2016-01-05T19:39:44.888Z","2.4.5":"2016-01-22T18:03:20.002Z","2.4.6":"2016-02-11T15:17:28.737Z","3.0.0":"2016-02-25T22:51:33.421Z","2.5.0":"2016-03-01T22:27:55.515Z","3.0.1":"2016-03-11T20:53:33.817Z","3.1.0-0":"2016-04-08T22:17:27.298Z","3.1.0":"2016-05-06T17:47:33.786Z","3.1.1":"2016-05-24T00:19:52.659Z","3.1.2":"2016-05-26T20:09:16.384Z","3.1.3":"2016-07-25T22:13:53.445Z","3.1.4":"2016-08-15T23:43:01.335Z","3.1.5":"2016-08-24T21:58:32.371Z","3.2.0":"2016-09-09T20:35:06.599Z","3.3.0":"2016-10-17T18:40:14.710Z","4.0.0":"2016-10-17T19:57:54.326Z","4.0.1":"2016-10-18T17:24:08.119Z","3.3.1":"2016-10-18T17:46:16.697Z","4.0.2":"2016-10-18T21:36:15.811Z","4.0.3":"2016-10-21T18:59:02.282Z","4.0.4":"2016-10-21T21:38:31.275Z","4.0.5":"2016-11-03T16:01:12.905Z","4.1.0":"2016-11-10T21:17:53.941Z","4.1.1":"2016-11-18T00:39:12.602Z","4.1.2":"2016-11-21T23:39:43.225Z","4.1.3":"2016-12-22T21:53:19.590Z","4.1.4":"2017-01-13T22:06:53.360Z","4.2.0":"2017-01-31T23:36:46.725Z","4.3.0":"2017-02-08T19:08:30.760Z","4.4.0":"2017-02-16T21:16:47.964Z","4.4.1":"2017-02-28T22:20:24.972Z","4.4.2":"2017-03-03T19:11:28.341Z","4.4.3":"2017-04-10T22:38:22.430Z","4.4.4":"2017-04-24T23:46:47.098Z","4.4.5":"2017-05-16T21:51:55.557Z","4.4.6":"2017-06-27T18:02:20.444Z","4.4.7":"2017-07-12T21:30:02.440Z","4.4.8":"2017-07-17T20:44:01.317Z","4.5.0":"2017-08-18T23:52:20.055Z","4.5.1":"2017-08-28T19:02:00.279Z","4.5.2":"2017-09-20T20:52:45.680Z","4.5.3":"2017-10-11T18:35:57.354Z","4.6.0":"2017-10-17T18:16:46.540Z","4.6.1":"2017-10-24T22:25:35.930Z","4.6.2":"2017-11-06T18:07:18.705Z"},"readme":"# videojs-media-sources\n\nA [Media Source Extensions](https://dvcs.w3.org/hg/html-media/raw-file/tip/media-source/media-source.html) shim for video.js.\n\nMedia Source Extensions (MSE) is a W3C draft specification that makes it possible to feed data directly to a video element.\nMSE allows video developers to build functionality like adaptive streaming directly in javascript.\n\nLead Maintainer: Jon-Carlos Rivera [@imbcmdth](https://github.com/imbcmdth)\n\nMaintenance Status: Stable\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Getting Started](#getting-started)\n- [Options](#options)\n  - [mode](#mode)\n- [Release History](#release-history)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Getting Started\n\nOn browsers that natively support Media Source Extensions, the HTML implementation will be used.\nIf you're running in an environment without MSE, a Flash-backed polyfill will be used.\nCurrently, the Flash polyfill only supports video content encoded in the FLV file format.\nFor information on how FLVs are structured, Adobe hosts the [latest version of the spec](http://www.adobe.com/devnet/f4v.html) on their site.\n\nThe Flash polyfill attempts to balance throughput to the FLV with end-user responsiveness by asynchronously feeding bytes to the SWF at a fixed rate.\nBy default, that rate is capped at 4MB/s.\nIf you'd like to play higher bitrate content, you can adjust that setting:\n\n```javascript\n// 8MB/s at 60fps\nvideojs.MediaSource.BYTES_PER_SECOND_GOAL = 8 * 1024 * 1024;\n```\nSetting the `BYTES_PER_SECOND_GOAL` too high may lead to dropped frames during playback on slower computers.\n\nCheck out an example of the plugin in use in [example.html](example.html).\n\n## Options\nYou can configure some aspects of the MediaSource polyfill by\nspecifying a hash of options when you construct it:\n\n```js\nvar mediaSource = new videojs.MediaSource({ mode: 'html5' });\n```\n\n### mode\nType: `string`\nValues: `'auto'`, `'html5'`, `'flash'`\nDefault Value: `'auto'`\n\nHow to determine the MediaSources implementation to use. With the\ndefault value of `auto`, the presence of native MediaSources is\ndetected at construction time and they're used if available. Choosing\n`html5` or `flash` will force the use of that respective MediaSource\nimplementation, even if it does not appear the browser supports it.\n\n## Release History\n\n * 1.0.0: throw an error if appends are called during an update\n * 0.3.0: Delegate SourceBuffer.abort() calls to the SWF\n * 0.2.0: Improve interactivity by batching communication with Flash.\n * 0.1.0: Initial release\n\n## License\n\nSee [LICENSE-APACHE2](LICENSE-APACHE2).\n","version":"4.6.2","downloads":21025},{"name":"videojs-contrib-media-sources-s1","description":"A Media Source Extensions plugin for video.js","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-02-18T10:46:50.645Z","created":"2016-02-18T09:47:21.405Z","2.4.5":"2016-02-18T09:47:21.405Z","2.4.6":"2016-02-18T10:46:50.645Z"},"readme":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [videojs-media-sources](#videojs-media-sources)\n  - [Getting Started](#getting-started)\n  - [Options](#options)\n    - [mode](#mode)\n  - [Release History](#release-history)\n  - [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# videojs-media-sources\n\nA [Media Source Extensions](https://dvcs.w3.org/hg/html-media/raw-file/tip/media-source/media-source.html) shim for video.js.\n\nMedia Source Extensions (MSE) is a W3C draft specification that makes it possible to feed data directly to a video element.\nMSE allows video developers to build functionality like adaptive streaming directly in javascript.\n\n## Getting Started\n\nOn browsers that natively support Media Source Extensions, the HTML implementation will be used.\nIf you're running in an environment without MSE, a Flash-backed polyfill will be used.\nCurrently, the Flash polyfill only supports video content encoded in the FLV file format.\nFor information on how FLVs are structured, Adobe hosts the [latest version of the spec](http://www.adobe.com/devnet/f4v.html) on their site.\n\nThe Flash polyfill attempts to balance throughput to the FLV with end-user responsiveness by asynchronously feeding bytes to the SWF at a fixed rate.\nBy default, that rate is capped at 4MB/s.\nIf you'd like to play higher bitrate content, you can adjust that setting:\n\n```javascript\n// 8MB/s at 60fps\nvideojs.MediaSource.BYTES_PER_SECOND_GOAL = 8 * 1024 * 1024;\n```\nSetting the `BYTES_PER_SECOND_GOAL` too high may lead to dropped frames during playback on slower computers.\n\nCheck out an example of the plugin in use in [example.html](example.html).\n\n## Options\nYou can configure some aspects of the MediaSource polyfill by\nspecifying a hash of options when you construct it:\n\n```js\nvar mediaSource = new videojs.MediaSource({ mode: 'html5' });\n```\n\n### mode\nType: `string`\nValues: `'auto'`, `'html5'`, `'flash'`\nDefault Value: `'auto'`\n\nHow to determine the MediaSources implementation to use. With the\ndefault value of `auto`, the presence of native MediaSources is\ndetected at construction time and they're used if available. Choosing\n`html5` or `flash` will force the use of that respective MediaSource\nimplementation, even if it does not appear the browser supports it.\n\n## Release History\n\n * 1.0.0: throw an error if appends are called during an update\n * 0.3.0: Delegate SourceBuffer.abort() calls to the SWF\n * 0.2.0: Improve interactivity by batching communication with Flash.\n * 0.1.0: Initial release\n\n## License\n\nSee [LICENSE-APACHE2](LICENSE-APACHE2).\n","version":"2.4.6","downloads":15},{"name":"videojs-contrib-quality-levels","description":"Exposes a list of quality levels available for the source.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-22T21:26:06.479Z","created":"2016-11-21T19:01:15.757Z","1.0.0":"2016-11-21T19:01:15.757Z","2.0.0":"2016-12-12T22:55:53.176Z","2.0.1":"2016-12-13T22:26:26.655Z","2.0.2":"2016-12-23T15:30:19.375Z","2.0.3":"2017-02-21T18:43:32.214Z","2.0.4":"2018-01-22T21:26:06.479Z"},"readme":"# videojs-contrib-quality-levels\n\nExposes a list of quality levels available for the source.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-contrib-quality-levels\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-contrib-quality-levels\n```\n\n## Using\n\nThe list of `QualiyLevel`s can be accessed using `qualityLevels()` on the Player object.\nWith this list, you can:\n * see which quality levels are available for the current source\n * enable or disable specific quality levels to change which levels are selected by ABR\n * see which quality level is currently selected by ABR\n\nExample\n```js\nlet player = videojs('my-video');\n\nlet qualityLevels = player.qualityLevels();\n\n// disable quality levels with less than 720 horizontal lines of resolution when added\n// to the list.\nqualityLevels.on('addqualitylevel', function(event) {\n  let qualityLevel = event.qualityLevel;\n\n  if (qualityLevel.height >= 720) {\n    qualityLevel.enabled = true;\n  } else {\n    qualityLevel.enabled = false;\n  }\n});\n\n// example function that will toggle quality levels between SD and HD, defining and HD\n// quality as having 720 horizontal lines of resolution or more\nlet toggleQuality = (function() {\n  let enable720 = true;\n\n  return function() {\n    for (var i = 0; i < qualityLevels.length; i++) {\n      let qualityLevel = qualityLevels[i];\n      if (qualityLevel.width >= 720) {\n        qualityLevel.enabled = enable720;\n      } else {\n        qualityLevel.enabled = !enable720;\n      }\n    }\n    enable720 = !enable720;\n  };\n})();\n\nlet currentSelectedQualityLevelIndex = qualityLevels.selectedIndex; // -1 if no level selected\n```\n\n### Populating the list\nInitially the list of quality levels will be empty. You can add quality levels to the list by using `QualityLevelList.addQualityLevel` for each quality level specific to your source. `QualityLevelList.addQualityLevel` takes in a `Representation` object (or generic object with the required properties). All properties are required except `width` and `height`.\n\nExample Representation\n```js\nRepresentation {\n  id: string,\n  width: number,\n  height: number,\n  bitrate: number,\n  enabled: function\n}\n```\n\nThe `enabled` function should take an optional boolean to enable or disable the representation and return whether it is currently enabled.\n\n#### HLS\n\nQuality levels for an HLS source will be automatically populated when using [videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls) version 4.1 or greater.\n\n\n## Including the Plugin\n\nTo include videojs-contrib-quality-levels on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-contrib-quality-levels.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.qualityLevels();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-contrib-quality-levels via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-contrib-quality-levels');\n\nvar player = videojs('my-video');\n\nplayer.qualityLevels();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-contrib-quality-levels'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.qualityLevels();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[videojs]: http://videojs.com/\n","version":"2.0.4","downloads":1908},{"name":"videojs-dock","description":"Dock plugin for videojs","author":{"name":"Brightcove, Inc."},"keywords":["dock","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-05-22T12:52:54.435Z","created":"2015-09-22T15:49:28.909Z","0.0.0":"2015-09-22T15:49:28.909Z","1.0.0":"2015-09-22T15:49:53.294Z","1.0.1":"2015-09-22T19:06:49.623Z","1.0.2":"2015-09-23T22:36:04.598Z","1.0.3":"2015-09-25T19:30:38.378Z","1.1.0":"2015-11-02T22:52:28.339Z","1.2.0":"2015-12-02T22:03:14.132Z","1.2.1":"2015-12-04T20:25:17.788Z","1.3.0":"2016-01-29T18:02:21.089Z","2.0.0":"2016-01-29T18:09:46.724Z","2.0.1":"2016-01-29T23:56:09.606Z","2.0.2":"2016-02-25T20:13:11.048Z","2.0.3":"2017-02-09T15:55:32.665Z","2.1.0":"2017-03-30T14:40:00.507Z","2.1.1":"2017-04-04T19:13:56.345Z","2.1.2":"2017-05-19T16:31:25.840Z"},"readme":"# videojs-dock\n\nA dock for videojs\n\n### Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting Started](#getting-started)\n  - [Running Tests](#running-tests)\n  - [Tag and Release](#tag-and-release)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting Started\n\n1. Clone this repository!\n1. Install dependencies: `npm install`\n1. Run a development server: `npm start`\n\nThat's it! Refer to the [video.js plugin standards](https://github.com/videojs/generator-videojs-plugin/docs/standards.md) for more detail.\n\n### Running Tests\n\n- In all available and supported browsers: `npm test`\n- In a specific browser: `npm run test:chrome`, `npm run test:firefox`, etc.\n- While development server is running, navigate to [`http://localhost:9999/test/`](http://localhost:9999/test/) (_note:_ port may vary, check console output)\n\n### Tag and Release\n\n1. Make sure everything is committed.\n1. `npm version *` where `*` is `major`, `minor`, `patch`, etc. [Read more about versioning.](https://github.com/videojs/generator-videojs-plugin/docs/standards.md#versioning)\n1. `npm publish`\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n","version":"2.1.2","downloads":1229},{"name":"videojs-dotsub-captions","description":"Renders rich captions","author":{"name":"Brooks Lyrette","email":"brooks@dotsub.com"},"keywords":["videojs","videojs-plugin","captions","dotsub"],"license":"Apache-2.0","time":{"modified":"2016-10-21T14:23:58.355Z","created":"2016-05-16T16:41:01.605Z","0.1.0":"2016-05-16T16:41:01.605Z","0.1.1":"2016-06-13T17:04:18.313Z"},"readme":"[![Build Status](https://travis-ci.org/dotsub/videojs-dotsub-captions.svg?branch=master)](https://travis-ci.org/dotsub/videojs-dotsub-captions) [![npm version](https://badge.fury.io/js/videojs-dotsub-captions.svg)](https://badge.fury.io/js/videojs-dotsub-captions)\n# videojs-dotsub-captions\n\nRenders rich captions in the video player. Includes support for 3x3 positioning and basic rich formatting (bold, underline, italic). This plugin uses events to drive all its actions.\n\n### events\n\n*captionsready*: Denotes when the plugin is loaded and ready to receive captions.\n\n*captions*: This event is used to notify the plugin that there are new captions to be rendered. The captions should be sent as the data payload of the event. ex: `player.trigger('captions', []);` would load an empty set of captions.\n\n*language*: Used to set what language the captions are in. This helps properly set the text direction when applicable. The data payload should be an object containing the direction of the text: `{direction: 'rtl' or 'ltr'}`\n\n## Installation\n\n```sh\nnpm install --save videojs-dotsub-captions\n```\n\n## Usage\n\nTo include videojs-dotsub-captions on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-dotsub-captions.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.dotsubCaptions();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-dotsub-captions via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-dotsub-captions');\n\nvar player = videojs('my-video');\n\nplayer.dotsubCaptions();\n```\n\n### Browserify ES6\n\nWhen using with Browserify, install videojs-dotsub-captions via npm and `import` the plugin as you would any other module.\n\n```js\nimport videojs from 'video.js';\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nimport 'videojs-dotsub-captions';\n\nconst player = videojs('my-video');\n\nplayer.dotsubCaptions();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-dotsub-captions'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.dotsubCaptions();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Brooks Lyrette &lt;brooks@dotsub.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.1","downloads":55},{"name":"videojs-dotsub-selector","description":"Adds a track selector to the menubar. ","author":{"name":"Dotsub","email":"dev@dotsub.com"},"keywords":["videojs","videojs-plugin","dotsub","captions"],"license":"Apache-2.0","time":{"modified":"2018-01-19T10:50:06.106Z","created":"2016-05-18T15:34:38.056Z","0.1.0":"2016-05-18T15:34:38.056Z","0.1.1":"2016-05-23T16:57:21.196Z","0.1.2":"2016-05-24T14:32:37.865Z","0.1.3":"2016-06-13T17:12:13.662Z","0.2.0":"2018-01-19T10:50:06.106Z"},"readme":"[![Build Status](https://travis-ci.org/dotsub/videojs-dotsub-selector.svg?branch=master)](https://travis-ci.org/dotsub/videojs-dotsub-selector)[![npm version](https://badge.fury.io/js/videojs-dotsub-selector.svg)](https://badge.fury.io/js/videojs-dotsub-selector)\n\n# videojs-dotsub-selector\n\nAdds a track selector to the menubar. This is used in conjunction with [videojs-dotsub-captions](https://github.com/dotsub/videojs-dotsub-captions). This provides a selection menu within the player for which captions to display. The plugin uses Dotsub's API to fetch and list the languages for a video.\n\nThis plugin uses events to drive all it's actions.\n\n### Events\n\n*selectorready*: This event denotes the plugin is loaded and ready to fetch captions.\n\n*loadtracks*: This event tells the plugin to load captions from Dotsub. This expects a video ID as the event data. (ex: `player.trigger('loadtracks', 'trackId');`)\n\n*trackselected*: This event is triggered when the user has selected a track from the list in the control bar. The event data payload contains a track object. If no track object is present 'Captions Off' was selected.\n\n## Installation\n\n```sh\nnpm install --save videojs-dotsub-selector\n```\n\n## Usage\n\nTo include videojs-dotsub-selector on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-dotsub-selector.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.dotsubSelector();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-dotsub-selector via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-dotsub-selector');\n\nvar player = videojs('my-video');\n\nplayer.dotsubSelector();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-dotsub-selector'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.dotsubSelector();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Dotsub &lt;dev@dotsub.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.2.0","downloads":121},{"name":"videojs-dvrseekbar","description":"A Video.js plugin for Seekbar with DVR support.","author":{"name":"ToolBox-tve"},"keywords":["videojs","videojs-plugin","player","video","DVR"],"license":"Apache-2.0","time":{"modified":"2017-05-05T18:55:32.528Z","created":"2017-05-05T18:55:32.528Z","0.2.6":"2017-05-05T18:55:32.528Z"},"readme":"# videojs-dvrseekbar\n\nA Video.js plugin for Seekbar with DVR support.\n\n## Installation\n\n```sh\nnpm install --save videojs-dvrseekbar\n```\n\n## Usage\n\nTo include videojs-dvrseekbar on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-dvrseekbar.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.dvrseekbar();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-dvrseekbar via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-dvrseekbar');\n\nvar player = videojs('my-video');\n\nplayer.dvrseekbar();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-dvrseekbar'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.dvrseekbar();\n});\n```\n\n### VideoJS plugin standards and development flow\nSee https://github.com/videojs/generator-videojs-plugin/blob/master/docs/standards.md\n\n### How to version\nRun ```npm version [patch | minor | major]``` to bump package.json version and generate a new release.\nA new tag with the dist files will be created (run ```git push remote tagname``` to publish the tag).\n\n[videojs]: http://videojs.com/\n\n### License\n\nApache-2.0. Copyright (c) ToolBox-tve\n","version":"0.2.6","downloads":86},{"name":"videojs-dynamic-overlay","description":"Dynamic Overlay Text On Video Js","author":{"name":"Emre Karatasoglu","email":"emre.karatasoglu@hotmail.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-10-20T11:13:59.738Z","created":"2017-10-12T08:06:27.003Z","1.0.0":"2017-10-12T08:06:27.003Z","1.0.1":"2017-10-12T08:12:53.561Z","1.0.2":"2017-10-19T07:56:45.981Z","1.0.3":"2017-10-19T09:01:50.703Z","2.0.0":"2017-10-20T11:13:59.738Z"},"readme":"# videojs-newoverlay\nDynamic Overlay on Video For Education System\nVideo Üzerine Text Vb Dinamik Yer Değiştirme\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-dynamic-overlay\n```\n\n## Usage\nSample Image : https://prnt.sc/gwejew\nTo include videojs-newoverlay on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-newoverlay.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.newoverlay();\n  ################ OR ###############\n  player.newoverlay({\n          contentOfOverlay:\"Sample Content\",\n          changeDuration:1000\n        });\n</script>\n<style>\n.vjs-emre{\n    z-index:9999;\n    color:black;\n    background-color:brown;\n    font-size:20px;\n    position:absolute;\n    right:20px;\n  }\n</style>\n```\n\n### No Need To Build\n\nWorking example with built scripts .\n\nQuaility Selector\nDynamic Overlay that configurable\n\nhttp://cdn.emrekaratasoglu.com/overlay_demo/\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>videojs-newoverlay Demo</title>\n  <link href=\"video-js.css\" rel=\"stylesheet\">\n\n</head>\n<body>\n  <video id=\"videojs-newoverlay-player\" class=\"video-js vjs-default-skin\" controls height=\"480\" width=\"848\" poster=\"http://vjs.zencdn.net/v/oceans.png\">\n    <source src=\"https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8\" type=\"application/x-mpegurl\">\n  </video>\n  <script src=\"es5-shim.js\"></script>\n  <script src=\"video.js\"></script>\n  <script src=\"videojs-newoverlay.js\"></script>\n  <script src=\"videojs-contrib-hls.js\"></script>\n  <script src=\"videojs5-hlsjs-source-handler.js\"></script>\n  <script>\n    (function(window, videojs) {\n      var player = window.player = videojs('videojs-newoverlay-player');\n      player.newoverlay({\n        contentOfOverlay:\"Emre Karataşoğlu ID NUMBER\",\n        changeDuration:10000\n      });\n\t  player.qualityPickerPlugin();\n    }(window, window.videojs));\n  </script>\n</body>\n</html>\n<style>\n  .vjs-emre{\n    z-index:9999;\n    color:black;\n    background-color:brown;\n    font-size:20px;\n    position:absolute;\n    width: 170px; word-break: break-all; word-wrap: break-word;\n\tright:20px;\n\n\n  }\n\n</style>\n```\n\n\n## License\n\nApache-2.0. Copyright (c) Emre Karatasoglu &lt;emre.karatasoglu@hotmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"2.0.0","downloads":38},{"name":"videojs-errors","description":"A Video.js plugin for custom error reporting","author":{"name":"Brightcove, Inc."},"keywords":["flash","html5","player","video","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-13T19:44:16.160Z","created":"2014-06-13T16:27:27.099Z","0.1.1":"2014-06-13T16:27:27.099Z","0.1.5":"2014-09-03T20:34:27.528Z","0.1.6":"2014-09-10T18:19:37.393Z","0.1.7":"2014-10-06T20:29:43.018Z","0.1.8":"2015-05-05T18:10:15.412Z","1.0.0":"2015-11-23T17:49:47.383Z","1.0.2":"2016-01-11T21:52:26.686Z","1.0.3":"2016-03-03T16:36:45.672Z","1.0.4":"2016-04-13T20:18:46.318Z","1.0.5":"2016-08-15T14:27:39.466Z","1.1.0":"2016-09-08T20:41:48.140Z","1.1.1":"2016-11-11T21:26:29.356Z","1.1.2":"2016-12-07T20:14:45.593Z","1.1.3":"2017-01-27T17:43:07.438Z","1.1.4":"2017-02-10T20:35:32.861Z","1.2.0":"2017-02-21T15:46:09.258Z","1.3.0":"2017-04-18T16:12:15.768Z","1.3.1":"2017-04-19T19:23:37.918Z","1.3.2":"2017-04-24T18:15:44.063Z","2.0.0":"2017-05-15T20:13:33.637Z","2.0.1":"2017-05-15T20:38:24.100Z","2.0.2":"2017-05-16T02:53:55.366Z","3.0.0":"2017-05-19T01:05:36.429Z","3.0.1":"2017-05-22T18:17:07.559Z","3.0.2":"2017-06-08T15:46:35.273Z","3.0.3":"2017-09-06T19:15:37.948Z","3.1.0":"2017-12-13T19:44:16.160Z"},"readme":"# videojs-errors\n\n[![Build Status](https://travis-ci.org/brightcove/videojs-errors.svg?branch=master)](https://travis-ci.org/brightcove/videojs-errors)\n\nA plugin that displays user-friendly messages when Video.js encounters an error.\n\n### Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting Started](#getting-started)\n  - [Localization](#localization)\n  - [Supported Errors](#supported-errors)\n  - [Custom Errors](#custom-errors)\n  - [Custom Errors without a Type](#custom-errors-without-a-type)\n  - [`getAll()`](#getall)\n- [Known Issues](#known-issues)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting Started\n\nThe plugin automatically registers itself when you include videojs.errors.js in your page:\n\n```html\n<script src=\"videojs.errors.js\"></script>\n```\n\nYou probably want to include the default stylesheet, too. It displays error messages as a semi-transparent overlay on top of the video element itself. It's designed to match up fairly well with the default Video.js styles:\n\n```html\n<link href=\"videojs.errors.css\" rel=\"stylesheet\">\n```\n\nIf you're not a fan of the default styling, you can drop in your own stylesheet. The only new element to worry about is `vjs-errors-dialog` which is the container for the error messages.\n\n### Localization\nThe plugin supports multiple languages when using Video.JS v4.7.3 or greater. In order to add additional language support, add the language file after your plugin as follows:\n\n```html\n<script src=\"videojs.errors.js\"></script>\n<script src=\"lang/es.js\"></script>\n```\n\n**Note:** A formatted example is available for Spanish under 'lang/es.js'.\n\n### Supported Errors\n\nOnce you've initialized Video.js, you can activate the errors plugin. The plugin has a set of default error messages for the standard HTML5 video errors keyed off their runtime values:\n\n- MEDIA_ERR_ABORTED (numeric value `1`)\n- MEDIA_ERR_NETWORK (numeric value `2`)\n- MEDIA_ERR_DECODE (numeric value `3`)\n- MEDIA_ERR_SRC_NOT_SUPPORTED (numeric value `4`)\n- MEDIA_ERR_ENCRYPTED (numeric value `5`)\n\n### Custom Errors\n\nAdditionally, some custom errors have been added as reference for future extension.\n\n- MEDIA_ERR_UNKNOWN (value `'unknown'`)\n- PLAYER_ERR_NO_SRC (numeric value `-1`)\n- PLAYER_ERR_TIMEOUT (numeric value `-2`)\n- PLAYER_ERR_DOMAIN_RESTRICTED\n- PLAYER_ERR_IP_RESTRICTED\n- PLAYER_ERR_GEO_RESTRICTED\n- FLASHLS_ERR_CROSS_DOMAIN\n\n**Note:**\n\n- Custom errors should reference a code value of a string.\n  - Two of the provided errors use negative numbers for historical reasons, but alpha-numeric/descriptive strings are less likely to cause collision issues.\n- Custom errors should have a `type` beginning with `PLAYER_ERR_` versus the standardized `MEDIA_ERR` to avoid confusion.\n- Custom errors can be chosen to be dismissible (boolean value `true`)\n\nIf the video element emits any of those errors, the corresponding error message will be displayed. You can override and add custom error codes by supplying options to the plugin:\n\n```js\nplayer.errors({\n  errors: {\n    3: {\n      headline: 'This is an override for the generic MEDIA_ERR_DECODE',\n      message: 'This is a custom error message'\n    }\n  }\n});\n```\n\nOr by calling `player.errors.extend` _after_ initializing the plugin:\n\n```js\nplayer.errors();\n\nplayer.errors.extend({\n  3: {\n    headline: 'This is an override for the generic MEDIA_ERR_DECODE',\n    message: 'This is a custom error message'\n  },\n  foo: {\n    headline: 'My custom \"foo\" error',\n    message: 'A custom \"foo\" error message.',\n    type: 'PLAYER_ERR_FOO'\n  }\n});\n```\n\nIf you define custom error messages, you'll need to let Video.js know when to emit them yourself:\n\n```js\nplayer.error({code: 'foo', dismiss: true});\n```\n\nIf an error is emitted that doesn't have an associated key, a generic, catch-all message is displayed. You can override that text by supplying a message for the key `unknown`.\n\n### Custom Errors without a Type\n\nAs of v2.0.0, custom errors can be defined without a code. In these cases, the key provided will be used as the code. For example, the custom `foo` error above could be:\n\n```js\nplayer.errors.extend({\n  PLAYER_ERR_FOO: {\n    headline: 'My custom \"foo\" error',\n    message: 'A custom \"foo\" error message.'\n  }\n});\n```\n\nThe difference here being that one would then trigger it via:\n\n```js\nplayer.error({code: 'PLAYER_ERR_FOO'});\n```\n\n### `getAll()`\n\nAfter the errors plugin has been initialized on a player, a `getAll()` method is available on the `errors()` plugin method. This function returns an object with all the errors the plugin currently understands:\n\n```js\nplayer.errors();\n\nvar errors = player.errors.getAll();\n\nconsole.log(errors['1'].type); // \"MEDIA_ERR_ABORTED\"\n```\n\n## Known Issues\n\nOn iPhones, default errors are not dismissible. The video element intercepts all user interaction so error message dialogs miss the tap events. If your video is busted anyways, you may not be that upset about this.\n","version":"3.1.0","downloads":975},{"name":"videojs-event-tracking","description":"Track events with VideoJS 5 and keep an eye on performance metrics","author":{"name":"spodlecki","email":"s.podlecki@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-11-18T20:05:55.526Z","created":"2017-10-30T01:52:46.522Z","0.0.1":"2017-10-30T01:52:46.522Z","0.0.2":"2017-10-30T14:11:27.173Z","0.0.3":"2017-10-30T16:53:44.794Z","0.0.4":"2017-10-30T18:23:08.346Z","0.0.5":"2017-10-30T18:45:40.582Z","0.0.6":"2017-11-18T20:05:55.526Z"},"readme":"# videojs-event-tracking\n\nTrack events with VideoJS and keep an eye on performance metrics. Currently under development. `1.0.0` or better will signify stable release\n\n## Installation\n\n```sh\nnpm install --save videojs-event-tracking\n```\n\n## Usage\n\nTo include videojs-event-tracking on your website or web application, use any of the following methods.\n\nInitializing just like a normal videojs plugin does.\n\n```javascript\nvideojs('videodomid', {..., plugins: { eventTracking: true } });\n// or\nvideoInstance.eventTracking({... config ...});\n```\n\n## Current Events\n\n\n### Play\n\nThis event is triggered when the video has been played for the first time. If you are looking to track play events, simply listen on the player for a normal \"play\" or \"playing\" event.\n\n```javascript\nplayer.on('tracking:firstplay', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* secondsToLoad: Total number of seconds between the player initializing a play request and when the first frame begins.\n\n### Pausing\n\nTracks when users pause the video.\n\n```javascript\nplayer.on('tracking:pause', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* pauseCount:       Total number of Pause events triggered\n\n### Seeking\n\nDuring playback, we are tracking how many times a person seeks, and the position a user has seeked to.\n\n```javascript\nplayer.on('tracking:seek', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* seekCount: total number of seeks that has occuring during this file\n* seekTo: Position, in seconds, that has been seeked to.\n\n### Buffering\n\nTracks when the video player is marked as buffering and waits until the player has made some progress.\n\n```javascript\nplayer.on('tracking:buffered', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* currentTime:    current second of video playback\n* readyState:     video#readyState value\n* secondsToLoad:  Total amount of time in seconds buffering took\n* bufferCount:    Total buffer events for this source\n\n### Positioning\n\nTrack Overall Percentile (1st, 2nd, 3rd, and 4th) of Completion. This event triggers each quarter of a video.\n\n```javascript\nplayer.on('tracking:first-quarter', (e, data) => console.log(data))\nplayer.on('tracking:second-quarter', (e, data) => console.log(data))\nplayer.on('tracking:third-quarter', (e, data) => console.log(data))\nplayer.on('tracking:fourth-quarter', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* pauseCount:       Total number of Pause events triggered\n* seekCount:        Total number of Seek events triggered\n* currentTime:      Current second video is on\n* duration:         Total duration of video\n\n### Performance\n\n_*note* a little experimental_\n\nThis event triggers when the player has changed sources, has ended, or has been destroyed.\n\n```javascript\nplayer.on('tracking:performance', (e, data) => console.log(data))\n```\n\nData Attributes:\n\n* pauseCount:       Total number of Pause events triggered\n* seekCount:        Total number of Seek events triggered\n* bufferCount:      Total number of Buffer events triggered\n* totalDuration:    Total duration provided by the file\n* watchedDuration:  Total number of seconds watched, this excluses seconds a user has seeked past.\n* bufferDuration:   Total seconds that buffering has occured\n* initialLoadTime:  Seconds it took for the initial frame to appear\n\n*Special Requirement*\nWhen initializing, you'll need to pass a function to the configuration for this plugin.\n\n```javascript\npluginConfig = {\n  performance: function(data) {\n    /** Use your preferred event tracking platform.\n     *  Google Analytics? Amplitude? Piwik? Mixpanel?\n     */\n  }\n}\n```\n","version":"0.0.6","downloads":98},{"name":"videojs-fairplay","description":"Video.js tech for supporting Fairplay streaming.","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com","url":"http://www.careyhinoki.me/"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-12-22T21:02:56.237Z","created":"2016-08-11T23:11:46.489Z","0.1.0":"2016-08-11T23:11:46.489Z","0.1.1":"2016-08-12T00:12:42.001Z","0.1.2":"2016-08-19T00:46:41.461Z","0.2.0":"2016-12-22T21:02:56.237Z"},"readme":"# videojs-fairplay\n\n> Video.js source handler for supporting Fairplay streaming.\n\n## Protected Content\n\nThis source handler **only** supports encrypted HLS playback. It does not contain any fallbacks. The premise is to use this in tandem with [videojs-contrib-dash](https://github.com/videojs/videojs-contrib-dash/) to support encrypted playback in all* browsers.\n\nIf the browser (a.k.a Safari) supports Encrypted Media Extensions and includes a Content Decryption Module, video.js will be able to playback protected content.\n\n## Getting Started\n\n```html\n<script src=\"/path/to/videojs.fairplay.min.js\"></script>\n\n<script>\nvideojs('player_id').ready(function () {\n  this.src({\n    src: '/path/to/file.m3u8',\n    type: 'application/x-mpegURL',\n\n    protection: {\n      keySystem: 'com.apple.fps.1_0',\n\n      certificateUrl: '/path/to/certificate',\n      licenseUrl: '/path/to/license',\n    },\n  });\n});\n</script>\n```\n\n## Known Issues\n\nSEE: https://forums.developer.apple.com/thread/60276\n\n1. Fairplay content cannot be played if `TextTrack`s exist. Beyond embedding them within the manifest, the only way to side load them is after the keys are updated.\n\n  ```js\n  videojs('player_id').ready(function () {\n    var player = this;\n\n    player.on('loadeddata', function () {\n      player.addRemoteTextTrack(...);\n    });\n  });\n  ```\n\n1. New Fairplay content cannot be played once MediaKeys have been attached to the video element (Unless its the same source). To get around this issue we need to clear those keys.\n\n  ```js\n  player.reset();\n\n  player.src(...);\n  ```\n\n1. Combining the issues of #1 and #2. Before you can play *another* source, you must clear out the existing `TextTrack`s.\n\n  ```js\n  player.remoteTextTracks().tracks_.forEach(function (track) {\n    player.removeRemoteTextTrack(track);\n  });\n\n  // the current `TextTrack` implementation operates on events and because of this we have to wait a\n  // tick before executing a reset, otherwise the `TextTrack`s will get picked up in its associated `Tech`.\n  setTimeout(function () {\n    player.reset();\n\n    player.src(...);\n  }, 0);\n  ```\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli # only needed for contributing\n\nnpm install\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-fairplay/blob/master/LICENSE).\n","version":"0.2.0","downloads":813},{"name":"videojs-fairplay-protection","description":"Video.js plugin for playing Fairplay protected content","author":{"name":"Sevag Simonian"},"keywords":["html5","player","video","videojs","videojs-plugin","fairplay","hls"],"license":"MIT","time":{"modified":"2016-06-29T22:48:07.963Z","created":"2016-06-29T21:23:19.231Z","1.0.0":"2016-06-29T21:23:19.231Z","1.0.1":"2016-06-29T22:48:07.963Z"},"readme":"# videojs-fairplay-protection\n\n> Video.js plugin for playing Fairplay protected content\n\n## Getting Started\n\n\n## Options\n\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli # only needed for contributing\n\nnpm install\n\nnpm install --save babel-runtime --save\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/sevagsim/videojs-fairplay-protection/blob/master/LICENSE).\n","version":"1.0.1","downloads":30},{"name":"videojs-flash","description":"The official Flash tech package for Video.js.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin","videojs-tech"],"license":"Apache-2.0","time":{"modified":"2017-12-20T19:37:22.645Z","created":"2017-02-01T21:40:31.965Z","1.0.0-RC.0":"2017-02-01T21:40:31.965Z","1.0.0-RC.1":"2017-02-13T20:07:49.041Z","1.0.0-RC.2":"2017-03-07T16:36:19.341Z","1.0.0":"2017-04-03T21:50:30.690Z","1.0.1":"2017-04-27T17:10:42.131Z","1.1.0":"2017-05-12T19:16:12.736Z","2.0.0":"2017-05-23T18:28:42.106Z","2.0.1":"2017-07-27T14:52:12.519Z","2.0.2":"2017-12-14T21:31:53.215Z","2.1.0":"2017-12-14T22:27:44.383Z","2.0.2-0":"2017-12-20T18:35:23.912Z","2.1.0-0":"2017-12-20T18:59:07.211Z","2.1.0-2":"2017-12-20T19:36:19.435Z","2.1.0-3":"2017-12-20T19:37:22.645Z"},"readme":"# videojs-flash\n\nThe official flash tech for the videojs player.\n\n> NOTE: This should only be used with Video.js >= 6.0.0 as the flash tech is build into versions before that!\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-flash\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-flash\n```\n\nYou can also use it via a CDN:\n ```html\n<script src=\"https://cdn.jsdelivr.net/npm/videojs-flash@2/dist/videojs-flash.min.js\"></script>\n ```\n\n## Adding the Flash Tech to video.js\n\nTo include videojs-flash on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the tech _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-flash.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-flash via npm and `require` the tech as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual tech function is registered to video.js automatically; so, there\n// is no need to assign it to a variable.\nrequire('videojs-flash');\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the tech as you normally would:\n\n```js\nrequire(['video.js', 'videojs-flash'], function(videojs) {\n  var player = videojs('my-video');\n});\n```\n\n## Force Flash playback\n\nBy default techs are used in the order in which they are registered. This means that the HTML5 tech that is buildin to video.js is going to be registered first and thus prioritized. To change this you will have to change the `techOrder` option on video.js. See examples below\n\n> NOTE: video.js and flash are already included in these example\n\nPrioritize the flash tech over the HTML5 tech, but fallback to the HTML5 tech if the Flash tech does not work.\n```js\nvideojs('some-video-id', {techOrder: ['flash', 'html5']});\n```\n\nIf you don't want to fallback to the HTML5 and only want to use the Flash tech you can do this:\n```js\nvideojs('some-video-id', {techOrder: ['flash']});\n```\n\n[See the video.js docs](https://github.com/videojs/video.js/blob/master/docs/guides/setup.md#options) for additional information and other ways to set options in video.js\n[See the video.js docs](https://github.com/videojs/video.js/blob/master/docs/guides/options.md#techorder) for additional information on the `techOrder` option.\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[videojs]: http://videojs.com/\n","version":"2.1.0","downloads":7263},{"name":"videojs-flash-saints","description":"The official flash tech package for the videojs player.","author":{"name":"WhileBlank"},"keywords":["videojs","videojs-plugin","videojs-tech"],"license":"Apache-2.0","time":{"modified":"2017-04-07T06:33:07.982Z","created":"2017-04-07T06:33:07.982Z","1.0.0-RC.2":"2017-04-07T06:33:07.982Z"},"readme":"# videojs-flash\n\nThe official flash tech for the videojs player.\n\n> NOTE: This should only be used with Video.js >= 6.0.0 as the flash tech is build into versions before that!\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-flash\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-flash\n```\n\n## Adding the Flash Tech to video.js\n\nTo include videojs-flash on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the tech _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-flash.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-flash via npm and `require` the tech as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual tech function is registered to video.js automatically; so, there\n// is no need to assign it to a variable.\nrequire('videojs-flash');\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the tech as you normally would:\n\n```js\nrequire(['video.js', 'videojs-flash'], function(videojs) {\n  var player = videojs('my-video');\n});\n```\n\n## Force Flash playback\n\nBy default techs are used in the order in which they are registered. This means that the HTML5 tech that is buildin to video.js is going to be registered first and thus prioritized. To change this you will have to change the `techOrder` option on video.js. See examples below\n\n> NOTE: video.js and flash are already included in these example\n\nPrioritize the flash tech over the HTML5 tech, but fallback to the HTML5 tech if the Flash tech does not work.\n```js\nvideojs('some-video-id', {techOrder: ['flash', 'html5']});\n```\n\nIf you don't want to fallback to the HTML5 and only want to use the Flash tech you can do this:\n```js\nvideojs('some-video-id', {techOrder: ['flash'});\n```\n\n[See the video.js docs](https://github.com/videojs/video.js/blob/master/docs/guides/setup.md#options) for additional information and other ways to set options in video.js\n[See the video.js docs](https://github.com/videojs/video.js/blob/master/docs/guides/options.md#techorder) for additional information on the `techOrder` option.\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0-RC.2","downloads":5},{"name":"videojs-flvjs","description":"Video.js tech for FLV playback in MSE with flv.js","author":{"name":"mister-ben","email":"git@misterben.me"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-02-13T12:07:02.487Z","created":"2017-02-05T16:50:19.179Z","0.1.0":"2017-02-05T16:50:19.179Z","0.1.1":"2017-02-05T18:58:39.341Z","0.1.2":"2017-02-06T17:52:46.411Z","0.1.3":"2017-02-13T12:07:02.487Z"},"readme":"# videojs-flvjs\n\nVideo.js tech to use [flv.js](https://github.com/Bilibili/flv.js) for FLV playback using MSE instead of Flash.\n\nCheck out the flv.js docs for details on its capabilities, browser support etc. Note that you need [CORS headers](https://github.com/Bilibili/flv.js/blob/master/docs/cors.md) if your video is being hosted at a different origin.\n\n[Example](https://github.com/mister-ben/videojs-flvjs)\n\n## Installation\n\n```sh\nnpm install --save videojs-flvjs\n```\n\n## Usage\n\nTo include videojs-flvjs on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available. You also need to include [flv.js](https://github.com/Bilibili/flv.js).\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/flv.js\"></script>\n<script src=\"//path/to/videojs-flvjs.min.js\"></script>\n<script>\n  var player = videojs('my-video', {\n    techOrder: ['html5', 'flvjs']\n  });\n</script>\n```\n\nYou only need to set the techOrder in Video.js version 5. In version 6 techs add themselves to the default techorder. If you are using both the flash and flvjs techs, flvjs should come first.\n\n### Browserify\n\nWhen using with Browserify, install videojs-flvjs via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-flvjs');\n\nvar player = videojs('my-video');\n\nplayer.flvjs();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-flvjs'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.flvjs();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) mister-ben\n\n[videojs]: http://videojs.com/\n","version":"0.1.3","downloads":210},{"name":"videojs-framebyframe","description":"video.js plugin that allows users to step frame-by-frame through a video.","author":{"name":"Eric Rasche"},"keywords":["video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-02-27T00:41:57.898Z","created":"2016-02-24T23:38:36.277Z","1.0.0":"2016-02-24T23:38:36.277Z","1.0.1":"2016-02-27T00:41:57.898Z"},"readme":"videojs-framebyframe\n====================\n\n[![npm version](https://img.shields.io/npm/v/videojs-framebyframe.svg?style=flat)](https://www.npmjs.com/package/videojs-framebyframe)\n[![npm](https://img.shields.io/npm/dm/videojs-framebyframe.svg)]()\n[![License](https://img.shields.io/npm/l/videojs-framebyframe.svg)](LICENSE)\n[![Build Status](https://travis-ci.org/erasche/videojs-framebyframe.svg?branch=master)](https://travis-ci.org/erasche/videojs-framebyframe)\n<a href=\"http://bower.io/search/?q=videojs-framebyframe\">\n<img src=\"https://benschwarz.github.io/bower-badges/badge@2x.png\" width=\"130\" height=\"30\">\n</a>\n\n[Check out the demo!](https://erasche.github.io/videojs-framebyframe)\n\nAllows users to step frame-by-frame through a video.\n\nThis has to make an unfortunate assumption about framerate, but it should be\n\"ok\" for general use. If you can run framerate detection on the server side,\nthis plugin works perfectly for you.\n\n## Installation\n\n```console\n$ npm install videojs-framebyframe\n$ bower install videojs-framebyframe\n```\n\n## Framerate Issues\n\nWe have no easy way to calculate framerate in Javascript, so we make a guess.\nIf you're serving the video yourself or otherwise can calculate the FPS value,\nthen you should use that and supply it to your videojs instance.\n\n- http://stackoverflow.com/questions/20336955/how-to-step-one-frame-forward-and-one-frame-backward-in-video-playback\n- http://stackoverflow.com/questions/4298084/html5-frame-by-frame-viewing-frame-seeking\n- https://github.com/videojs/video.js/issues/692\n\n## Other\n\n- There's 4.X videojs code in the similarly named branch.\n\n\n## Contributors\n\n- Eric Rasche (@erasche)\n- Miguel Grinberg (@miguelgrinberg)\n\n## License\n\nDual licensed under GPLv3 and MIT\n","version":"1.0.1","downloads":257},{"name":"videojs-frankly-ttml","description":"Frankly TTML TextTrack plugin for video.js","author":{"name":"Steven Melendez"},"keywords":["videojs","videojs-plugin","ttml","texttracks","frankly","frankly inc"],"license":"MIT","time":{"modified":"2017-09-21T18:30:35.066Z","created":"2017-09-21T18:28:17.857Z","1.0.0":"2017-09-21T18:28:17.857Z","1.0.1":"2017-09-21T18:30:35.066Z"},"readme":"# Videojs Frankly TTML Plugin\n\n> A TTML plugin for video.js for use with TTML by converting TTML to VTTCue.\n\nThis plugin makes it possible use TTML text tracks on VideoJS. It parses the TTML XML into a VTT Cue. For empty TTML files, it generates a VTT Cue saying Captions Unavailable. If the source TTML fails, it will also generate a track to say Captions Unavailable.\n\n- [Getting Started](#getting-started)\n- [Dependencies](#dependencies)\n\n## Getting Started\n\nDownload videojs-frankly-ttml and include it in your page along with video.js. To use this plugin you must set `nativeTextTracks` to `false`:\n\n```html\n<video id=\"example-video\" width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"http://example.com/index.mp4\"\n     type=\"video/mp4\">\n  <track\n     src=\"http://example.com/captions.xml\"\n     kind=\"captions\"\n     srclang=\"en\"\n     label=\"English Captions\"\n     type=\"application/ttml+xml\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-frankly-ttml.js\"></script>\n<script>\nvar player = videojs('example-video', { plugins: { ttml: {} }, nativeTextTracks: false }, function() {\n    // Print a list of available textracks\n    console.log(this.textTracks());\n});\n</script>\n```","version":"1.0.1","downloads":14},{"name":"videojs-gifplayer","description":"Plays gifs that are in video format automatically with looping only when in viewport in similar fashion to twitter's gif player.","author":{"name":"John D. Johnson II","email":"johnsonjo4531@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-03-24T00:30:20.971Z","created":"2017-02-11T04:10:28.777Z","0.0.0":"2017-02-11T04:10:28.777Z","0.0.2":"2017-02-11T04:58:27.150Z","0.0.3":"2017-02-22T22:23:17.366Z","0.1.1":"2017-03-24T00:30:20.971Z"},"readme":"# videojs-gifplayer\n\nPlays gifs that are in video format automatically with looping only when in viewport in similar fashion to twitter&#39;s gif player.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-gifplayer\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-gifplayer\n```\n\n## Usage\n\nTo include videojs-gifplayer on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-gifplayer.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.gifplayer();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-gifplayer via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-gifplayer');\n\nvar player = videojs('my-video');\n\nplayer.gifplayer();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-gifplayer'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.gifplayer();\n});\n```\n\n### Options\n\ndefault options are:\n\n```js\n{\n  // options for videojs plugin\n  controls: false,\n  loop: true,\n  // options specific to videojs-gifplayer plugin\n  restartOnPause: true\n}\n```\n\n## License\n\nMIT. Copyright (c) John D. Johnson II &lt;johnsonjo4531@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.1","downloads":18},{"name":"videojs-heartbeat-tns-counter","description":"A video.js plugin for heartbeat Mediascope TNS counter","author":{"name":"Sergey Gromkov","email":"sgromkov@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-11-22T14:10:17.381Z","created":"2017-11-21T13:16:05.620Z","0.0.0":"2017-11-21T13:16:05.620Z","1.0.0":"2017-11-22T14:10:17.381Z"},"readme":"# videojs-heartbeat-tns-counter\n\nA video.js plugin for heartbeat Mediascope TNS counter\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-heartbeat-tns-counter\n```\n\n## Usage\n\nTo include videojs-heartbeat-tns-counter on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-heartbeat-tns-counter.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.heartbeatTnsCounter();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-heartbeat-tns-counter via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-heartbeat-tns-counter');\n\nvar player = videojs('my-video');\n\nplayer.heartbeatTnsCounter();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-heartbeat-tns-counter'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.heartbeatTnsCounter();\n});\n```\n\n## License\n\nMIT. Copyright (c) Sergey Gromkov &lt;sgromkov@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0","downloads":20},{"name":"videojs-hls-quality-selector","description":"Adds a quality selector menu for HLS sources played in videojs.  Requires `videojs-contrib-hls` and videojs-contrib-quality-levels plugins.","author":{"name":"Chris Boustead","url":"chris@forgemotion.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-19T18:28:54.377Z","created":"2017-11-20T18:08:48.128Z","0.0.1":"2017-11-20T18:08:48.128Z","0.0.2":"2018-01-19T18:28:54.377Z"},"readme":"# videojs-hls-quality-selector\n\nAdds a quality selector menu for HLS sources played in videojs.  Requires `videojs-contrib-hls` and videojs-contrib-quality-levels plugins.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-hls-quality-selector\n```\n\n## Usage\n\nTo include videojs-hls-quality-selector on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-hls-quality-selector.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.hlsQualitySelector();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-hls-quality-selector via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-hls-quality-selector');\n\nvar player = videojs('my-video');\n\nplayer.hlsQualitySelector();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-hls-quality-selector'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.hlsQualitySelector();\n});\n```\n\n## License\n\nMIT. Copyright (c) Chris Boustead (chris@forgemotion.com)\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.2","downloads":138},{"name":"videojs-hls-source-selector","description":"VideoJS plugin that leverages videojs-contrib-quality-levels plugin to offer manual user-selectable level selection options for adaptive hls streams. ","author":{"name":"Justin Fujita","email":"justin@pivotshare.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-05-08T23:37:47.880Z","created":"2017-05-02T21:18:41.108Z","0.0.0":"2017-05-02T21:18:41.108Z","0.0.1":"2017-05-02T22:43:48.957Z","0.0.2":"2017-05-08T19:53:39.829Z","0.0.3":"2017-05-08T19:59:58.685Z","0.0.4":"2017-05-08T22:39:40.823Z","0.0.5":"2017-05-08T22:54:51.362Z","0.0.6":"2017-05-08T23:20:51.048Z","0.0.7":"2017-05-08T23:37:47.880Z"},"readme":"# videojs-hls-source-selector\n\nVideoJS plugin that leverages videojs-contrib-quality-levels plugin to offer manual user-selectable level selection options for adaptive hls streams. \n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-hls-source-selector\n```\n\n## Usage\n\nTo include videojs-hls-source-selector on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-hls-source-selector.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.hlsSourceSelector();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-hls-source-selector via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-hls-source-selector');\n\nvar player = videojs('my-video');\n\nplayer.hlsSourceSelector();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-hls-source-selector'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.hlsSourceSelector();\n});\n```\n\n## License\n\nMIT. Copyright (c) Justin Fujita <justin@pivotshare.com>\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.7","downloads":59},{"name":"videojs-hlsjs","description":"hls.js playback plugin for videojs","author":{"name":"SRGSSR"},"keywords":["videojs","videojs-plugin","hls","hls.js"],"license":"MIT","time":{"modified":"2017-12-17T11:23:44.458Z","created":"2017-02-14T15:17:17.572Z","1.4.1":"2017-02-14T15:17:17.572Z","1.4.2":"2017-02-15T15:10:31.132Z","1.4.3":"2017-03-02T13:29:19.048Z","1.4.4":"2017-04-26T15:10:36.750Z","1.4.5":"2017-05-01T16:09:29.786Z","1.4.6":"2017-05-03T15:34:35.694Z","1.4.7":"2017-06-06T09:59:46.180Z","1.4.8":"2017-06-06T10:16:18.533Z"},"readme":"# Videojs hls.js Plugin\n\n<img align=\"right\" height=\"30\" src=\"http://www.srgssr.ch/fileadmin/templates/images/SRGLogo.gif\">\n\n> An HLS plugin for video.jas based on hls.js\n\nVideojs hls.js offers hls playback using [hls.js](https://github.com/dailymotion/hls.js). For more details on browser compatibility see th hls.js github page.\n\n- [Getting Started](#getting-started)\n- [Documentation](#documentation)\n  - [Dependencies](#dependencies)\n  - [CORS Considerations](#cors-considerations)\n  - [Options](#options)\n  - [Event Listeners](#event-listeners)\n- [Original Author](#original-author)\n\n## Getting Started\n\nDownload videojs-hlsjs and include it in your page along with video.js:\n\n```html\n<video id=\"video\" preload=\"auto\" class=\"video-js vjs-default-skin\" controls>\n    <source src=\"http://www.streambox.fr/playlists/x36xhzz/x36xhzz.m3u8\" type=\"application/vnd.apple.mpegurl\">\n</video>\n<script src=\"hlsjs.min.js\"></script>\n<script src=\"video.min.js\"></script>\n<script src=\"videojs-hlsjs.min.js\"></script>\n<script>\n    var player = videojs('video', {\n        // hlsjs tech should come before html5, if you want to give precedence to native HLS playback\n        // use the favorNativeHLS option.\n        techOrder: [\"hlsjs\", \"html5\", \"flash\"]\n    });\n</script>\n```\n\nThere's also a [demo](https://srgssr.github.io/videojs-hlsjs/demo) of the plugin that you can check out.\n\n## Changelog\n\n- 1.4.5: Added text and audio tracks compatibility.\n\n## Documentation\n\n### Dependencies\nThis project depends on:\n\n- [video.js](https://github.com/videojs/video.js) 5.8.5+.\n- [hls.js](https://github.com/dailymotion/hls.js) 0.7.0+.\n\n### CORS Considerations\n\nAll HLS resources must be delivered with\n[CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) allowing GET requests.\n\n### Options\n\nYou may pass in an options object to the hls playback technology at player initialization.\n\n#### hlsjs.favorNativeHLS\nType: `Boolean`\n\nWhen the `favorNativeHLS` property is set to `true`, the plugin will prioritize native hls\nover MSE. Note that in the case native streaming is available other options won't have any effect.\n\n#### hlsjs.disableAutoLevel\nType: `Boolean`\n\nWhen the `disableAutoLevel` property is set to `true`, the plugin will completely disable auto leveling based on bandwidth and remove it from the list of available level options.\nIf no level is specified in `hlsjs.startLevelByHeight` or `hlsjs.setLevelByHeight` the plugin will start with the best quality available when this property is set to true.\nUseful for browsers that have trouble switching between different qualities.\n\n#### hlsjs.startLevelByHeight\nType: `Number`\n\nWhen the `startLevelByHeight` property is present, the plugin will start the video on the closest quality to the\nspecified height but the auto leveling will still be enabled unless `hlsjs.disableAutoLevel` was set to `true`. If height metadata is not present in the HLS playlist this property will be ignored.\n\n#### hlsjs.setLevelByHeight\nType: `Number`\n\nWhen the `setLevelByHeight` property is present, the plugin will start the video on the closest quality to the\nspecified height. The auto leveling will be disabled but it will still be selectable unless `hlsjs.disableAutoLevel` was set to `true`. If height metadata is not present in the HLS playlist this property will be ignored.\n\nThis property takes precedence over `hlsjs.startLevelByHeight`.\n\n#### hlsjs.hls\nType `object`\n\nAn object containing hls.js configuration parameters, see in detail:\n[Hls.js Fine Tuning](https://github.com/dailymotion/hls.js/blob/master/doc/API.md#fine-tuning).\n\n**Exceptions:**\n\n* `autoStartLoad` the loading is done through the `preload` attribute of the video tag. This property is always set to `false` when using this plugin.\n* `startLevel` if you set any of the level options above this property will be ignored.\n\n### Event listeners\n\nThis plugin offers the possibility to attach a callback to any hls.js runtime event, see the documetation\nabout the different events here: [Hls.js Runtime Events](https://github.com/dailymotion/hls.js/blob/master/doc/API.md#runtime-events). Simply precede the name of the event in camel case by `on`, see an example:\n\n```js\nvar player = videojs('video', {\n    hlsjs: {\n        /**\n         * Will be called on Hls.Events.MEDIA_ATTACHED.\n         *\n         * @param {Hls} hls      The hls instance from hls.js\n         * @param {Object} data  The data from this HLS runtime event\n         */\n        onMediaAttached: function(hls, data) {\n            // do stuff...\n        }\n    }\n});\n```\n\n## Original Author\n\nThis project was orginally forked from: [videojs-hlsjs](https://github.com/benjipott/videojs-hlsjs), credits to the\noriginal author.","version":"1.4.8","downloads":142},{"name":"videojs-hotkeys","description":"Adds more hotkey support to video.js","author":{"name":"Chris Dougherty"},"keywords":["videojs","videojs-plugin","hotkeys"],"license":"Apache-2.0","time":{"modified":"2017-08-02T23:24:21.368Z","created":"2015-08-25T16:49:20.161Z","0.2.6":"2015-08-25T16:49:20.161Z","0.2.7":"2015-09-05T01:38:23.970Z","0.2.8":"2015-09-24T09:52:57.973Z","0.2.9":"2015-10-06T08:52:46.151Z","0.2.10":"2015-10-13T02:09:25.961Z","0.2.11":"2015-10-31T02:20:32.542Z","0.2.12":"2015-11-06T08:57:25.620Z","0.2.13":"2015-12-21T10:25:05.353Z","0.2.14":"2016-02-20T02:01:03.578Z","0.2.15":"2016-08-09T00:00:01.637Z","0.2.16":"2016-10-11T21:13:41.683Z","0.2.17":"2016-11-10T02:31:34.312Z","0.2.18":"2017-04-13T02:05:21.296Z","0.2.19":"2017-07-19T07:04:05.827Z","0.2.20":"2017-08-02T23:24:21.368Z"},"readme":"videojs-hotkeys\n========================\n\n>---\n- **[Introduction](#introduction)**\n- **[Usage](#usage)**\n  - [CDN version](#cdn-version)\n  - [Self hosted](#self-hosted)\n  - **[Enable the plugin](#enable-the-plugin)**\n- **[Options](#options)**\n- **[Custom Hotkeys and Overrides](#custom-hotkeys-and-overrides)**\n  - [Override existing hotkeys](#override-existing-hotkeys)\n  - [Create new custom hotkeys](#create-new-custom-hotkeys)\n\n>---\n\n## Introduction\n\nA plugin for Video.js that enables keyboard hotkeys when the player has focus.\n* Space bar toggles play/pause.\n* Right and Left Arrow keys seek the video forwards and back.\n* Up and Down Arrow keys increase and decrease the volume.\n* M key toggles mute/unmute.\n* F key toggles fullscreen off and on. (Does not work in Internet Explorer, it seems to be a limitation where scripts\ncannot request fullscreen without a mouse click)\n* Double-clicking with the mouse toggles fullscreen off and on.\n* Number keys from 0-9 skip to a percentage of the video. 0 is 0% and 9 is 90%.\n\n**Note: clicking any of the control buttons such as Play/Pause, Fullscreen, or Mute, will remove focus on the player\nwhich appears to \"break\" the hotkeys.  This is for accessibility reasons so that people who do not use or know about\nthe hotkeys can still properly use the `Tab` key to highlight the control buttons and press `space` to toggle them.**\n\n**To restore focus, just click on the video, or an empty part of the control bar at the bottom of the video player.**\n\n**To override this behaviour, set the flag `alwaysCaptureHotkeys` to `true`.\nThis will \"fix\" hotkeys. For accessibility, the `Tab` key may be used in combination with the `Enter`/`Return` key to navigate and activate control buttons.**\n\n![Empty control bar space](http://i.imgur.com/18WMTUw.png)\n\n## Usage\nInclude the plugin:\n\n### CDN version\nYou can either load the current release:\n```html\n<script src=\"//cdn.sc.gl/videojs-hotkeys/0.2/videojs.hotkeys.min.js\"></script>\n```\nOr always load the latest version:\n```html\n<script src=\"//cdn.sc.gl/videojs-hotkeys/latest/videojs.hotkeys.min.js\"></script>\n```\n\n### Self hosted\n```html\n<script src=\"/path/to/videojs.hotkeys.js\"></script>\n```\n\n### Enable the plugin\nAdd hotkeys to your Videojs ready function.\nCheck the [Options](#options) section below for the available options and their meaning.\n```js\nvideojs('vidId').ready(function() {\n  this.hotkeys({\n    volumeStep: 0.1,\n    seekStep: 5,\n    enableModifiersForNumbers: false\n  });\n});\n```\n\n## Options\n\n- `volumeStep` (decimal): The percentage to increase/decrease the volume level when using the Up and Down Arrow keys (default: `0.1`)\n- `seekStep` (integer): The number of seconds to seek forward and backwards when using the Right and Left Arrow keys (default: `5`)\n- `enableMute` (boolean): Enables the volume mute to be toggle by pressing the **M** key (default: `true`)\n- `enableVolumeScroll` (boolean): Enables increasing/decreasing the volume by scrolling the mouse wheel (default: `true`)\n- `enableFullscreen` (boolean): Enables toggling the video fullscreen by pressing the **F** key (default: `true`)\n- `enableNumbers` (boolean): Enables seeking the video by pressing the number keys (default `true`)\n- `enableModifiersForNumbers` (boolean): Enables the use of Ctrl/Alt/Cmd + Number keys for skipping around in the video, instead of switching browser tabs. This is enabled by default due to backwards compatibility [PR #35](https://github.com/ctd1500/videojs-hotkeys/pull/35) (default: `true`)\n- `alwaysCaptureHotkeys` (boolean): Forces the capture of hotkeys, even when control elements are focused.\nThe **Enter**/**Return** key may be used instead to activate the control elements (default: `false`)\n- `enableInactiveFocus` (boolean): This reassigns focus to the player when the control bar fades out after a user has clicked a button on the control bar (default: `true`)\n- `skipInitialFocus` (boolean): This stops focusing the player on initial Play under unique autoplay situations. More information in [Issue #44](https://github.com/ctd1500/videojs-hotkeys/issues/44) (default: `false`)\n- `enableJogStyle` (boolean): Enables seeking the video in a broadcast-style jog by pressing the Up and Down Arrow keys.\n`seekStep` will also need to be changed to get a proper broadcast-style jog.\nThis feature and the changes for seekStep are explained a bit more in [PR #12](https://github.com/ctd1500/videojs-hotkeys/pull/12) (default `false`)\n(**Note:** This isn't a feature for everyone, and enabling JogStyle will disable the volume hotkeys)\n\n**There are more options specifically for customizing hotkeys described below.**\n\n## Custom Hotkeys and Overrides\n\nThere are 2 methods available here.  Simply overriding existing hotkeys, and creating new custom hotkeys.\n\n### Override existing hotkeys\n\nOverride functions are available for changing which, or adding additional, keys that are used as hotkeys to trigger an action.\n\nAny override functions that you build **must** return a boolean.\n`true` if the matching key(s) were pressed, or `false` if they were not.\n\n- `playPauseKey` (function): This function can be used to override the Play/Pause toggle hotkey (Default key: **Space**)\n- `rewindKey` (function): This function can override the key for seeking backward/left in the video (Default key: **Left Arrow**)\n- `forwardKey` (function): This function can override the key for seeking forward/right in the video (Default key: **Right Arrow**)\n- `volumeUpKey` (function): This function can override the key for increasing the volume (Default key: **Up Arrow**)\n- `volumeDownKey` (function): This function can override the key for decreasing the volume (Default key: **Down Arrow**)\n- `muteKey` (function): This function can override the key for the volume muting toggle (Default key: **M**)\n- `fullscreenKey` (function): This function can override the key for the fullscreen toggle (Default key: **F**)\n\nThese allow you to change keys such as, instead of, or in addition to, \"F\" for Fullscreen, you can make Ctrl+Enter trigger fullscreen as well.\nExample usage:\n```js\nvideojs('vidId').ready(function() {\n  this.hotkeys({\n    volumeStep: 0.1,\n    fullscreenKey: function(event, player) {\n      // override fullscreen to trigger when pressing the F key or Ctrl+Enter\n      return ((event.which === 70) || (event.ctrlKey && event.which === 13));\n    }\n  });\n});\n```\n\n### Create new custom hotkeys\n\n- `customKeys` (object): Create an object containing 1 or more sub-objects.  Each sub-object must contain a `key` function and `handler` function\n    - `key` (function):  This function checks if the chosen keys were pressed.  It **must** return a boolean, `true` if the keys match.\n    - `handler` (function):  This function runs your custom code if the result of the `key` function was `true`.\n\n```js\nvideojs('vidId').ready(function() {\n  this.hotkeys({\n    volumeStep: 0.1,\n    customKeys: {\n      // Create custom hotkeys\n      ctrldKey: {\n        key: function(event) {\n          // Toggle something with CTRL + D Key\n          return (event.ctrlKey && event.which === 68);\n        },\n        handler: function(player, options, event) {\n          // Using mute as an example\n          if (options.enableMute) {\n            player.muted(!player.muted());\n          }\n        }\n      }\n    }\n  });\n});\n```\nThere are more usage examples available in the source code of the [example file](https://github.com/ctd1500/videojs-hotkeys/blob/master/example.html).\n","version":"0.2.20","downloads":3576},{"name":"videojs-ima","description":"## Introduction The IMA SDK Plugin for Video.js provides a quick and easy IMA SDK integration for the Video.js player.","author":{"name":"Google Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-17T15:10:46.565Z","created":"2014-07-21T19:34:42.370Z","0.1.0":"2014-07-21T19:34:42.370Z","0.4.0":"2016-02-16T21:14:16.063Z","0.5.0":"2016-09-20T17:16:42.392Z","0.6.0":"2017-05-24T18:49:25.778Z","0.7.0":"2017-09-14T17:30:55.873Z","0.8.0":"2017-11-16T14:53:11.033Z","1.0.0":"2017-12-12T17:51:27.315Z","1.0.1":"2017-12-13T16:08:54.563Z","1.0.3":"2018-01-03T15:54:00.993Z","1.0.4":"2018-01-17T15:10:46.565Z"},"readme":"# IMA SDK Plugin for Video.js\n\n## Introduction\nThe IMA SDK Plugin for Video.js provides a quick and easy IMA SDK integration\nfor the Video.js player.\n\nTo see the plugin in action, check out our\n[samples](//googleads.github.io/videojs-ima/).\n\n## Features\n- Easily integrate the Google IMA SDK into Video.js to enable advertising on\nyour video content.\n\n## Requirements\n  - Your favorite text editor\n  - A JavaScript enabled browser\n\n## Getting started\nThe easiest way to get started is by using [npm](//www.npmjs.org/).\n\n```\nnpm install videojs-ima\n```\n\nIf you don't use npm, you can download the source from the dist/ folder and\ninclude it directly in your project. You'll also need to download the source for\nthe [videojs-contrib-ads plugin](//github.com/videojs/videojs-contrib-ads).\n\nIn your index.html file, create a new video.js player and load a (currently\nempty) javascript file:\n\n```html\n<html>\n  <head>\n    <!-- Load dependent stylesheets. -->\n    <link href=\"path/to/video-js.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"path/to/videojs-contrib-ads.css\" />\n    <link rel=\"stylesheet\" href=\"path/to/videojs.ima.css\" />\n  </head>\n\n  <body>\n    <video id=\"content_video\" class=\"video-js vjs-default-skin\"\n        controls preload=\"auto\" width=\"YOUR_VIDEO_WIDTH\" height=\"YOUR_VIDEO_HEIGHT\">\n      <source src=\"PATH_TO_YOUR_CONTENT_VIDEO\" type=\"YOUR_CONTENT_VIDEO_TYPE\" />\n    </video>\n    <!-- Load dependent scripts -->\n    <script src=\"/path/to/video.js\"></script>\n    <script src=\"//imasdk.googleapis.com/js/sdkloader/ima3.js\"></script>\n    <script src=\"/path/to/videojs-contrib-ads.js\"></script>\n    <script src=\"/path/to/videojs.ima.js\"></script>\n    <script src=\"player.js\"></script>\n  </body>\n</html>\n```\n\nIn player.js, load the ads library and set up the IMA plugin:\n\n```javascript\nvar player = videojs('content_video');\n\nvar options = {\n  id: 'content_video',\n  adTagUrl: 'YOUR_AD_TAG'\n};\n\nplayer.ima(options);\n// On mobile devices, you must call initializeAdDisplayContainer as the result\n// of a user action (e.g. button click). If you do not make this call, the SDK\n// will make it for you, but not as the result of a user action. For more info\n// see our examples, all of which are set up to work on mobile devices.\n// player.ima.initializeAdDisplayContainer();\n```\n\nThat's all there is to it!\n\n## Playground\nCheck out the snippet above in-action [on CodePen](https://codepen.io/imasdk/pen/wpyQXP).\n\n## Additional settings\nThe plugin accepts additional settings beyond the two required settings shown in\nthe previous snippet. A summary of all settings follows:\n\n\n| Settings | Type | Description |\n|----------|------|-------------|\n| id                     | string       | REQUIRED The id of your video player |\n| adTagUrl               | string       | REQUIRED IF adsResponse IS NOT PROVIDED A URL which returns a VAST, VMAP or ad rules,response. |\n| adsResponse            | string       | REQUIRED IF adTagUrl IS NOT PROVIDED The VAST, VMAP, or ad rules response to use,in lieu of fetching one an ad tag. |\n| adLabel                | string       | Replaces the \"Advertisement\" text in the ad label. Added for multilingual UI support. |\n| adsRenderingSettings   | object       | JSON object with ads rendering settings as defined in the IMA SDK,Docs(1). |\n| autoPlayAdBreaks       | boolean      | Whether or not to automatically play VMAP or ad rules ad breaks. Defaults,to true. |\n| adWillPlayMuted        | boolean      | Notifies the SDK whether the player intends to start ad while muted. Changing this setting will have no impact on ad playback. Defaults,to false. |\n| contribAdsSettings     | object       | Additional settings to be passed to the contrib-ads plugin(2), used by,this IMA plugin. |\n| debug                  | boolean      | True to load the debug version of the plugin, false to load the non-debug version.,Defaults to false. |\n| disableFlashAds        | boolean      | True to disable Flash ads - Flash ads will be considered an unsupported ad type. Defaults to false. |\n| disableCustomPlaybackForIOS10Plus | boolean      | Sets whether to disable custom playback on iOS 10+ browsers. If true, ads will play inline if the content video is inline. Defaults to false. |\n| forceNonLinearFullSlot | boolean      | True to force non-linear AdSense ads to render as linear fullslot.,If set, the content video will be paused and the non-linear text or image ad will be rendered as,fullslot. The content video will resume once the ad has been skipped or closed. |\n| locale                 | string       | Locale for ad localization. This may be any,ISO 639-1 (two-letter) or ISO 639-2,(three-letter) code(3). Defaults to 'en'. |\n| nonLinearWidth         | number       | Desired width of non-linear ads. Defaults to player width. |\n| nonLinearHeight        | number       | Desired height for non-linear ads. Defaults to 1/3 player height. |\n| numRedirects           | number       | Maximum number of VAST redirects before the subsequent redirects will be denied,,and the ad load aborted. The number of redirects directly affects latency and thus user experience.,This applies to all VAST wrapper ads. |\n| showControlsForJSAds   | boolean      | Whether or not to show the control bar for VPAID JavaScript ads. Defaults to true. |\n| showCountdown          | boolean      | Whether or not to show the ad countdown timer. Defaults to true. |\n| vpaidAllowed           | boolean      | (DEPRECATED, please use vpaidMode). |\n| vpaidMode              | VpaidMode(4) | VPAID Mode. Defaults to ENABLED. This setting,overrides vpaidAllowed. |\n\n\n(1) [IMA SDK Docs](//developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdsRenderingSettings)\n<br />\n(2) [contrib-ads plugin](//github.com/videojs/videojs-contrib-ads)\n<br />\n(3) [Valid locale codes](http://www.loc.gov/standards/iso639-2/php/English_list.php)\n<br />\n(4) [google.ima.ImaSdkSettings.VpaidMode](//developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.ImaSdkSettings.VpaidMode)\n\n## Disable automatic ad break playback\nIn some circumstances you may want to prevent the SDK from playing ad breaks\nuntil you're ready for them. In this scenario, you can disable automatic\nplayback of ad breaks in favor of letting the SDK know when you're ready for an\nad break to play. To do so:\n\n1. Set ```autoPlayAdBreaks``` to false in the initial options.\n2. Provide an ad break ready listener via ```setAdBreakReadyListener```.\n3. Call ```player.ima.playAdBreak()``` in your ad break ready listener when\n   you're ready to play the ads.\n\n## API Docs\nFor a list of methods exposed by the plugin, see our full [API\nDocs](https://github.com/googleads/videojs-ima/wiki/API-Docs).\n\n## Where do I report issues?\nPlease report issues on the [issues page](../../issues).\n\n## Terms of Service\nThe IMA SDK plugin for Video.js uses the IMA SDK, and as such is subject to the\n[IMA SDK Terms of Service](https://developers.google.com/interactive-media-ads/terms).\n\n## Support\nIf you have questions about the framework, you can ask them at\nhttps://groups.google.com/d/forum/google-media-framework\n\n## How do I contribute?\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n","version":"1.0.4","downloads":1306},{"name":"videojs-immerxon","description":"Immerxon connector for VideoJS","author":{"name":"Immerxon","url":"dev@immerxon.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-11T02:42:10.229Z","created":"2017-12-11T02:08:42.699Z","0.0.1":"2017-12-11T02:08:42.699Z","0.0.2":"2017-12-11T02:42:10.229Z"},"readme":"# videojs-immerxon\n\nImmerxon connector for VideoJS\n\n## Installation\n\n```sh\nnpm install --save videojs-immerxon\n```\n\n## Usage\n\nTo include videojs-immerxon on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-immerxon.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.immerxon();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-immerxon via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-immerxon');\n\nvar player = videojs('my-video');\n\nplayer.immerxon();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-immerxon'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.immerxon();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Immerxon (adam@immerxon.com)\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.2","downloads":23},{"name":"videojs-language-switch","description":"Control for switching between video language versions","author":{"name":"Adam Oliver","email":"mail@adamoliver.net"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-11-28T17:13:53.081Z","created":"2017-01-24T15:58:08.825Z","0.0.1":"2017-01-24T15:58:08.825Z","0.0.2":"2017-01-24T16:46:53.930Z","0.0.3":"2017-09-21T15:21:40.552Z","0.0.4":"2017-09-21T15:24:14.614Z","0.0.6":"2017-10-02T15:18:33.992Z","1.0.0":"2017-11-22T15:15:17.877Z","1.1.0":"2017-11-28T17:13:53.081Z"},"readme":"# videojs-language-switch\n\nControl for switching between video language versions\n\n## Installation\n\n```sh\nnpm install --save videojs-language-switch\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-language-switch\n```\n\n## Usage\n\nTo include videojs-language-switch on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\nInclude an array of languages with sources. This plugin is created to work alongside other quality video controls so you can provide several resoulutions as well as types with each language.\n\nThe name property used for each language will be what appears within the menu item.\n\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-language-switch.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.languageSwitch({\n    languages: [\n      {\n        name: 'English',\n        sources: [\n          {\n            src: 'http://bit.ly/2iJXRec',\n            type: 'video/mp4',\n            res: 'Medium'\n          },\n          {\n            src: 'http://bit.ly/2jxmfwI',\n            type: 'video/webm',\n            res: 'Medium'\n          }\n        ]\n      },\n      {\n        name: 'Portuguese',\n        sources: [\n          {\n            src: 'http://bit.ly/2jVlmho',\n            type: 'video/mp4',\n            res: 'Medium'\n          },\n          {\n            src: 'http://bit.ly/2jVlTzx',\n            type: 'video/webm',\n            res: 'Medium'\n          }\n        ]\n      }\n    ]\n  });\n</script>\n```\n\nYou can provide an option for `buttonClass` which will add a CSS class to the button icon placeholder element so that you can style it as you wish.\n\n\n```\n  player.languageSwitch({\n    languages: [\n      ...\n    ],\n    buttonClass: 'icon-globe' // Default\n  });\n```\n\nYou can also provide an option for `positionIndex` which will position button among the control bar items. Some of the default control bar items are hidden so you need to inspect the bar to find correct index.\n\n\n```\n  player.languageSwitch({\n    languages: [\n      ...\n    ],\n    positionIndex: 5 // Default - item added at the end of the item list.\n  });\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-language-switch via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-language-switch');\n\nvar player = videojs('my-video');\n\nplayer.languageSwitch();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-language-switch'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.languageSwitch();\n});\n```\n\n## License\n\nMIT. Copyright (c) Adam Oliver &lt;mail@adamoliver.net&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.1.0","downloads":901},{"name":"videojs-marquee-overlay","description":"marquee plugin on video ","author":{"name":"Emre Karatasoglu","url":"emre.karatasoglu@hotmail.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-10-24T07:43:47.561Z","created":"2017-10-12T09:57:47.978Z","1.0.1":"2017-10-12T09:57:47.978Z","1.0.4":"2017-10-12T11:45:02.198Z","2.0.0":"2017-10-20T11:18:07.543Z","2.0.1":"2017-10-24T07:43:47.561Z"},"readme":"# videojs-marquee-overlay\n\nmarquee plugin on video \n\nSample image : http://prntscr.com/gwflh5\n\nThis will provide scrolling text on video both normal screen & full screen.\nHls.js included\nJquery included\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nYou can add to your project with\nnpm install --save videojs-marquee-overlay\nOr\nyou can download\nhttps://github.com/Lethea/videojs-marquee-overlay-scrolling-text or clone\ngit clone git@github.com:Lethea/videojs-marquee-overlay-scrolling-text.git then\nnpm install\n```\n\n## Usage\n\nTo include videojs-marquee-overlay on your website or web application, use any of the following methods.\n\nvideojs-marquee-overlay has 2 more examples with hls quaility selector + watermark addon.\n\nBoth of examples works. You can check in examples directory\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"node_modules/video.js/dist/video.js\"></script>\n<script src=\"dist/videojs-marquee-overlay.js\"></script>\n<script src=\"node_modules/videojs-contrib-hls/dist/videojs-contrib-hls.js\"></script>\n<script src=\"node_modules/jquery/dist/jquery.js\"></script>\n<script src=\"node_modules/jquery.marquee/jquery.marquee.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.marqueeOverlay({\n      contentOfMarquee: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n      position: \"bottom\",\n      direction: \"left\",\n      duration: 15000,\n      backgroundcolor: \"red\",\n      color: \"#fefefe\"\n    });\n</script>\n```\n### No Need to build\nWorking Example Included Built Scripts in Working_sample Directory\nWith\nQuailty Selector\nScroll Text ( Marquee Plugin )\nWatermark\nPlayback Speed\n\nhttp://cdn.emrekaratasoglu.com/marquee_demo/\n\n### Samples\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>videojs-marquee-overlay Demo</title>\n  <link href=\"video-js.css\" rel=\"stylesheet\">\n  <link href=\"videojs.watermark.css\" rel=\"stylesheet\">\n\n</head>\n<body>\n<video id=\"videojs-marquee-overlay-player\" class=\"video-js vjs-default-skin\" controls width=\"848\" height=\"480\"  data-setup='{\"playbackRates\": [1, 1.5, 2] }'>\n  <source src=\"http://sample.vodobox.net/skate_phantom_flex_4k/skate_phantom_flex_4k.m3u8\" type=\"application/x-mpegurl\">\n</video>\n\n<script src=\"video.js\"></script>\n<script src=\"videojs-marquee-overlay.js\"></script>\n<script src=\"videojs-contrib-hls.js\"></script>\n<script src=\"jquery.js\"></script>\n<script src=\"videojs5-hlsjs-source-handler.js\"></script>\n<script src=\"jquery.marquee.js\"></script>\n<script src=\"videojs.watermark.js\"></script>\n<script>\n  (function (window, videojs) {\n    var player = window.player = videojs('videojs-marquee-overlay-player');\n    player.marqueeOverlay({\n      contentOfMarquee: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n      position: \"bottom\",\n      direction: \"left\",\n      duration: 15000,\n      backgroundcolor: \"red\",\n      color: \"#fefefe\"\n    });\n    player.qualityPickerPlugin();\n    player.watermark({\n      file: 'Owned_Stamp.png',\n      xpos: 100,\n      ypos: 0,\n      clickable:true,\n      url:\"http://emrekaratasoglu.com\",\n      xrepeat: 0,\n      opacity: 0.5\n    });\n  }(window, window.videojs));\n\n</script>\n<style>\n  .vjs-emre-marquee {\n    width: 100%;\n    overflow: hidden;\n    border: 1px solid #ccc;\n    z-index:9998;\n    position:absolute;\n    font-size: 20px;\n  }\n  .vjs-control{\n    z-index:9999;\n  }\n</style>\n\n</body>\n</html>\n```\n\n\n## License\n\nApache-2.0. Copyright (c) Emre Karatasoglu (emre.karatasoglu@hotmail.com)\n\n\n[videojs]: http://videojs.com/\n","version":"2.0.1","downloads":34},{"name":"videojs-media-session","description":"Media Sessions API","author":{"name":"Gary Katsevman","email":"git@gkatsev.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-08-24T17:32:20.923Z","created":"2017-02-17T06:13:39.004Z","1.0.0":"2017-02-17T06:13:39.004Z"},"readme":"# videojs-media-session\n\nMedia Sessions API\n\nThis is an experimental videojs plugin that interfaces videojs, [videojs-playlist][], and Chrome's newly announced [Media Session API] [implementation][].\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-media-session\n```\n\n## Usage\n\nTo include videojs-media-session on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-media-session.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.mediaSession();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-media-session via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-media-session');\n\nvar player = videojs('my-video');\n\nplayer.mediaSession();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-media-session'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.mediaSession();\n});\n```\n\n## License\n\nMIT. Copyright (c) Gary Katsevman &lt;git@gkatsev.com&gt;\n\n\n[videojs]: http://videojs.com/\n[videojs-playlist]: https://github.com/brightcove/videojs-playlist\n[Media Session API]: https://wicg.github.io/mediasession/\n[implementation]: https://developers.google.com/web/updates/2017/02/media-session\n","version":"1.0.0","downloads":15},{"name":"videojs-mirror-plugin","description":"Mirror selection for video.js","author":{"name":"Vitaly Domnikov","email":"dotcypress@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-02-15T20:06:21.648Z","created":"2016-02-15T20:06:21.648Z","0.0.0":"2016-02-15T20:06:21.648Z"},"readme":"[![Build Status](https://travis-ci.org/dotcypress/videojs-mirror-plugin.svg?branch=master)](https://travis-ci.org/dotcypress/videojs-mirror-plugin)\n\n# videojs-mirror-plugin\n\nInternet mirror for video.js\n\n## Installation\n\n```sh\nnpm install --save videojs-mirror-plugin\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-mirror-plugin\n```\n\n## Usage\n\nTo include videojs-mirror-plugin on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<link href='//path/to/videojs-mirror.css' rel='stylesheet'>\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-mirror-plugin.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.mirrorPlugin();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-mirror-plugin via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-mirror-plugin');\n\nvar player = videojs('my-video');\n\nplayer.mirrorPlugin();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-mirror-plugin'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.mirrorPlugin();\n});\n```\n\n## License\n\nMIT. Copyright (c) Vitaly Domnikov <dotcypress@gmail.com>;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.0","downloads":6},{"name":"videojs-movipbox-playlist","description":"A simple playlist support for hola player","author":{"name":"Miguel González","email":"miguel.gonzalezsosa@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-09-28T15:30:50.647Z","created":"2017-05-27T01:14:34.584Z","0.0.0":"2017-05-27T01:14:34.584Z","1.0.0":"2017-05-27T01:17:03.864Z","2.0.0":"2017-09-26T23:52:21.815Z","1.0.1":"2017-09-27T00:04:02.043Z","1.1.0":"2017-09-27T17:19:55.502Z","1.1.1":"2017-09-27T20:15:54.393Z","1.1.2":"2017-09-28T15:30:50.647Z"},"readme":"# videojs-movipbox-playlist\n\nThe simplest playlist support for video.js player.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-movipbox-playlist\n```\n\n## Usage\n\nTo include videojs-movipbox-playlist on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-movipbox-playlist.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.playlist({\n  \tplaylist: [\n\t  \t{\n\t\t  sources: [{\n\t\t    src: 'URL_TO_FIRST_VIDEO_FILE',\n\t\t    type: 'video/mp4'\n\t\t  }],\n\t\t  poster: 'URL_TO_FIRST_VIDEO_POSTER'\n\t\t},\n\t\t{\n\t\t  sources: [{\n\t\t    src: 'URL_TO_SECOND_VIDEO_FILE',\n\t\t    type: 'video/mp4'\n\t\t  }],\n\t\t  poster: 'URL_TO_SECOND_VIDEO_POSTER'\n\t\t}\n\t]\n  });\n</script>\n```\nYou can also pass an optional ```ìnitialIndex``` to the object parameter to set the video to start with, and also an ```ads``` object to use the IMA ads plugin feature ([videojs IMA plugin](https://github.com/googleads/videojs-ima) and [videojs ads plugin](https://github.com/videojs/videojs-contrib-ads) are required. Consult IMA manual to set the options).\n\n## Examples\n\nThere is a provided example at ```index.html```.\n\n## License\n\nApache-2.0. Copyright (c) Miguel González &lt;miguel.gonzalezsosa@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.1.2","downloads":45},{"name":"videojs-mux","description":"Mux analytics plugin for Video.js","author":{"name":"Mux, Inc."},"keywords":["videojs","videojs-plugin"],"time":{"modified":"2018-01-10T06:41:01.926Z","created":"2016-10-04T23:54:17.471Z","2.0.14":"2016-10-04T23:54:17.471Z","2.0.15":"2016-10-06T18:31:51.622Z","2.0.16-0":"2016-10-14T23:21:24.289Z","2.0.16-1":"2016-10-14T23:41:38.862Z","2.0.17":"2016-10-15T00:00:54.767Z","2.0.18":"2016-10-17T21:04:42.920Z","2.0.19-0":"2016-10-20T20:19:40.732Z","2.0.19":"2016-10-20T22:26:27.625Z","2.0.20":"2016-11-23T01:25:20.678Z","2.0.21":"2016-11-29T02:26:51.949Z","2.0.22":"2016-11-29T02:43:46.188Z","2.0.23":"2016-12-10T00:24:59.207Z","2.0.24":"2017-01-04T23:17:50.288Z","2.0.25":"2017-01-13T23:12:47.783Z","2.0.26":"2017-01-18T23:22:23.188Z","2.0.27":"2017-01-20T23:49:36.085Z","2.0.28":"2017-02-09T01:26:19.047Z","2.0.29":"2017-04-21T19:52:00.207Z","2.1.1":"2017-06-20T01:22:38.279Z","2.1.3":"2017-07-28T21:56:00.220Z","2.1.4":"2017-08-16T00:56:17.593Z","2.2.0":"2017-10-03T04:02:29.117Z","2.2.1":"2017-10-18T18:22:30.356Z","2.2.2":"2018-01-10T06:41:01.926Z"},"readme":"# videojs-mux\n\nThe VideoJS plugin for Mux Analytics\n\n## Using\n\nInstall the package:\n\n`npm install videojs-mux`\n\nInclude videojs-mux where needed, e.g.:\n\n`import 'videojs-mux';`\n\nThere is no need to make any direct calls to `videojs-mux`, as it will register itself as a videojs plugin.\n\nSee our [docs page](https://docs.mux.com) for instructions to initialize the plugin.\n\n## Using directly in an HTML page\n\nThe above directions are for including within an NPM project. If, however, you want to include the script file directly in a web page, make sure that you use the `/node_modules/videojs-mux/dist/videojs-mux.js` file in your `<script>` tag.\n","version":"2.2.2","downloads":527},{"name":"videojs-offset","description":"VideoJs plugin to virtually \"cut\" an ondemand video","author":{"name":"Carles Galan Cladera","email":"cgcladera@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-12-12T10:18:58.571Z","created":"2016-05-31T07:47:27.042Z","1.0.0":"2016-05-31T07:47:27.042Z","1.0.1":"2016-05-31T08:01:06.947Z","2.0.0-beta.0":"2017-05-12T14:19:43.827Z","2.0.0-beta.1":"2017-09-27T07:23:14.049Z","2.0.0-beta.2":"2017-12-12T10:18:58.571Z"},"readme":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [videojs-offset](#videojs-offset)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [`<script>` Tag](#script-tag)\n    - [Browserify](#browserify)\n    - [RequireJS/AMD](#requirejsamd)\n  - [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# videojs-offset\n\n[![Build Status](https://travis-ci.org/cladera/videojs-offset.svg?branch=master)](https://travis-ci.org/cladera/videojs-offset)\n\n[![npm version](https://badge.fury.io/js/videojs-offset.svg)](https://badge.fury.io/js/videojs-offset)\n\n## Installation\n\n```sh\nnpm install --save videojs-offset\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-offset\n```\n\n## Usage\n\nTo include videojs-offset on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-offset.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.offset({\n    start: 10,\n    end: 300,\n    restart_beginning: false //Should the video go to the beginning when it ends\n  });\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-offset via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-offset');\n\nvar player = videojs('my-video');\n\nplayer.offset({\n  start: 10,\n  end: 300,\n  restart_beginning: false //Should the video go to the beginning when it ends\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-offset'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.offset({\n    start: 10,\n    end: 300,\n    restart_beginning: false //Should the video go to the beginning when it ends\n  });\n});\n```\n\n## License\n\nMIT. Copyright 2017(c) Carles Galan Cladera &lt;cgcladera@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"2.0.0-beta.2","downloads":609},{"name":"videojs-ogvjs","description":"A Video.js Tech plugin for Ogv.js","author":{"name":"Derk-Jan Hartman"},"keywords":["audio","ogg","ogv","ogv.js","ogvjs","opus","techplugin","video","videojs","videojs-plugin","vorbis","webm"],"license":"(MIT OR Apache-2.0)","time":{"modified":"2016-10-14T10:33:23.037Z","created":"2015-12-25T14:17:53.355Z","1.0.0":"2015-12-25T14:17:53.355Z","1.0.3":"2015-12-25T15:14:10.329Z","1.0.4":"2015-12-25T15:17:09.195Z","1.0.5":"2015-12-25T16:24:36.297Z","1.0.6":"2015-12-25T16:38:43.298Z","1.1.0":"2016-04-18T23:11:23.994Z","1.1.1":"2016-04-24T17:05:05.526Z","1.1.2":"2016-05-11T18:36:21.126Z","1.2.0":"2016-05-23T21:04:53.930Z","1.3.0":"2016-10-07T11:40:12.375Z","1.3.1":"2016-10-14T10:33:23.037Z"},"readme":"# videojs-ogvjs\n\n[![Current version](https://img.shields.io/npm/v/videojs-ogvjs.svg)](https://www.npmjs.com/package/videojs-ogvjs) [![Dependencies](https://img.shields.io/versioneye/d/nodejs/videojs-ogvjs.svg)](https://www.versioneye.com/nodejs/videojs-ogvjs)\n\nA [Video.js](https://www.videojs.com) Tech plugin for [Ogv.js](https://github.com/brion/ogv.js/).\n\nWith this module, you can playback Ogg Vorbis/Theora file with the VideoJS player on browsers that do not support this format, like Safari and Internet Explorer.\n\nMany thanks to the great work of the Video.js developers and to Brion Vibber for his relentless efforts to bring unencumbered video to the entire world.\n\n## Demo\n\nTry out [the demo](https://cdn.rawgit.com/hartman/videojs-ogvjs/v1.1.2/example.html) !!\n\n## License\n\nMIT and Apache-2.0\n","version":"1.3.1","downloads":111},{"name":"videojs-ooyala","description":"Video.js plugin to fetch videos from Ooyala","author":{"name":"Peter Mekhaeil","email":"peter.mekhaeil@news.com.au"},"keywords":["videojs","videojs-plugin","ooyala","video","player"],"license":"MIT","time":{"modified":"2015-10-27T00:24:38.945Z","created":"2015-10-19T03:58:01.044Z","0.2.0":"2015-10-19T03:58:01.044Z","0.3.0":"2015-10-26T23:50:04.295Z","0.3.1":"2015-10-26T23:58:05.827Z","0.3.2":"2015-10-27T00:24:38.945Z"},"readme":"# videojs.ooyala.js\r\n\r\nVideo.js plugin to fetch videos from Ooyala. By supplying an Ooyala EmbedCode, the plugin will call the Ooyala API and fetch the video source of that EmbedCode.\r\n\r\n## Demo\r\n\r\nRun ```grunt``` on the project folder will serve up a server at ```localhost:3000/demo``` which provides a demo page.\r\n\r\n## Usage\r\n\r\nInclude ```./dist/videojs.ooyala.js``` after video.js.\r\n\r\nEnable the plugin once your player has been initialised:\r\n\r\n```js\r\nplayer.ooyala({\r\n    playerBrandingId: (String), // Ooyala Player Branding ID (Required)\r\n    pcode: (String),             // Ooyala Provider ID (Required)\r\n    enableHls: (Boolean),        // Tweak force returning m3u8 from Ooyala if available (Optional)\r\n    mobileProfile: (String)     // SAS profile to narrow down streams for mobile devices (Optional)\r\n});\r\n```\r\n\r\n### Set an Ooyala video to the player:\r\nIf you want to set an Ooyala video to the player and prepare it for playback:\r\n\r\n```js\r\nplayer.ooyala.setSource(embedCode, callback);\r\n// embedCode: (String) The Ooyala video EmbedCode (Required)\r\n// callback: (Function) Returns the results of getVideoSource(), see below (Optional).\r\n```\r\n\r\n### Get video source from Ooyala\r\nIf you need to get the video source from ooyala for other use:\r\n\r\n```js\r\nplayer.ooyala.getVideoSource(embedCodes, callback);\r\n// embedCodes: (String/Array) The Ooyala video EmbedCodes. Can be multiple videos. (Required)\r\n// callback: (Function) Callback function once data is fetched. (Required)\r\n```\r\nCallback function will have `err` and `res` as argument, here is an example of callback results:\r\n\r\n```javascript\r\n{\r\n    apiResponse: 'the complete response from the Ooyala API as a JSON object'\r\n    videoUrls: {\r\n        embedCode1: {\r\n                authorized: 'true',         // If we are authorised to use this video\r\n                src: 'Video URL',           // If authorised is true, this is defined.\r\n                type: 'Video Type'          // If authorised is true, this is defined.\r\n        },\r\n        embedCode2: {\r\n                authorized: 'false',\r\n                message: 'Error Message',   // If authorised is false, this is defined.\r\n                code: 'Error Code'          // If authorised is false, this is defined.\r\n        }\r\n    }\r\n}\r\n```\r\n`src` and `type` are only set if `authorized` is true. You can then set these to the player, for example:\r\n\r\n```js\r\nplayer.ooyala.getVideoSource('myEmbedCode1, myEmbedCode2', function(err, res) {\r\n    var videoResult = res && res['myEmbedCode1'];\r\n\r\n    if (videoResult.authorized) {\r\n      player.src({\r\n          type: videoResult.type,\r\n          src: videoResult.src\r\n      });\r\n    }\r\n})\r\n```\r\n\r\n### Get the meta data of an Ooyala video\r\nOoyala videos have meta data that we can extract based on the embedCode.\r\n\r\n```js\r\nplayer.ooyala.getMetadata(embedCode, callback)\r\n// embedCodes: (String/Array) The Ooyala video EmbedCodes. Can be multiple videos. (Required)\r\n// callback: (Function) Callback function once metadata is fetched (Required)\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nplayer.ooyala.getMetadata(embedCode, function(err, res) {\r\n    console.log('metadata', embedCode, res);\r\n})\r\n```\r\n\r\n## Player support\r\n\r\nThis plugin has been tested with:\r\n\r\n- Video.Js 4.12.15\r\n- Brightcove Perform Player v1.24.22\r\n\r\n## IE Browser compatibility\r\n\r\nThis plugin uses the following functions so if you need support for a particular version of IE, you will need to implement a polyfill within your application.\r\n\r\n| Function      | IE Version Supported  |\r\n|-------------  |---------------------- |\r\n| Object.keys   | IE9+                  |\r\n| window.atob   | IE10+                 |\r\n\r\n## Contributing\r\n\r\nBug fixes are always welcome, though for new functionality it's best to raise an issue first.\r\nWe appreciate that all contribution follow our style guide set in our JSHint and JSCS using  [Grunt](http://gruntjs.com/).\r\n\r\n## History\r\n\r\n### v0.3.0\r\n* Retry XHR calls on timeout\r\n* Add video.js error messages on failed XHR calls\r\n\r\n### v0.2.0\r\n* Add enableHls and mobileProfile option.\r\n* Add prepareSettingSource() to allow developer to prepare video source before setting to video player.\r\n\r\n### v0.1.0\r\n* First release","version":"0.3.2","downloads":27},{"name":"videojs-overlay","description":"A plugin to display simple overlays during video playback.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-08-24T16:31:14.605Z","created":"2014-04-29T23:47:08.757Z","0.1.0":"2014-04-29T23:47:08.757Z","0.1.1":"2014-08-22T13:42:55.059Z","1.0.0":"2016-02-12T22:26:16.047Z","1.0.1":"2016-03-08T17:39:46.632Z","1.0.2":"2016-06-10T21:05:11.185Z","1.1.0":"2016-07-27T21:18:48.147Z","1.1.1":"2016-12-28T15:10:39.933Z","1.1.2":"2017-02-27T20:56:38.129Z","1.1.3":"2017-02-27T21:02:51.161Z","1.1.4":"2017-04-03T19:02:08.562Z","2.0.0":"2017-08-24T16:31:14.605Z"},"readme":"# Video.js Overlay\n\n[![Build Status](https://travis-ci.org/brightcove/videojs-overlay.svg?branch=master)](https://travis-ci.org/brightcove/videojs-overlay)\n\nA plugin to display simple overlays - similar to YouTube's \"Annotations\" feature in appearance - during video playback.\n\n_Note_: This meaning of an \"overlay\" is distinct from that of a modal dialog, which can overlay the entire player. This is built into video.js as [the `ModalDialog` component](http://docs.videojs.com/docs/api/modal-dialog.html).\n\n## Getting Started\n\nOnce you've added the plugin script to your page, you can use it with any video:\n\n```html\n<script src=\"path/to/videojs-overlay.js\"></script>\n<script>\n  videojs(document.querySelector('video')).overlay();\n</script>\n```\n\nThere's also a [working example](https://github.com/brightcove/videojs-overlay/blob/master/index.html) of the plugin you can check out if you're having trouble.\n\n## Documentation\n\n### Plugin Options\n\nYou may pass in an options object to the plugin upon initialization. This\nobject may contain any of the following properties:\n\n#### `align`\n\n__Type:__ `String`\n__Default:__ `\"top-left\"`\n\n_This setting can be overridden by being set on individual overlay objects._\n\nWhere to display overlays, by default. Assuming the included stylesheet is used, the following values are supported: `\"top-left\"`, `\"top\"`, `\"top-right\"`, `\"right\"`, `\"bottom-right\"`, `\"bottom\"`, `\"bottom-left\"`, `\"left\"`.\n\n#### `showBackground`\n\n__Type:__ `Boolean`\n__Default:__ `true`\n\n_This setting can be overridden by being set on individual overlay objects._\n\nWhether or not to include background styling & padding around the overlay.\n\n#### `attachToControlBar`\n\n__Type:__ `Boolean`\n__Default:__ `false`\n\n_This setting can be overridden by being set on individual overlay objects._\n\nIf set to true, bottom aligned overlays will adjust positioning when the control bar minimizes. This has no effect on overlays that are not aligned to bottom, bottom-left, or bottom-right. For use with the default control bar, it may not work for custom control bars.\n\n#### `class`\n\n__Type:__ `String`\n__Default:__ `\"\"`\n\n_This setting can be overridden by being set on individual overlay objects._\n\nA custom HTML class to add to each overlay element.\n\n#### `content`\n\n__Type:__ `String`, `Element`, `DocumentFragment`\n__Default:__ `\"This overlay will show up while the video is playing\"`\n\n_This setting can be overridden by being set on individual overlay objects._\n\nThe default HTML that the overlay includes.\n\n#### `overlays`\n\n__Type:__ `Array`\n__Default:__ an array with a single example overlay\n\nAn array of overlay objects. An overlay object should consist of:\n\n- `start` (`String` or `Number`): When to show the overlay. If its value is a string, it is understood as the name of an event. If it is a number, the overlay will be shown when that moment in the playback timeline is passed.\n- `end` (`String` or `Number`): When to hide the overlay. The values of this property have the same semantics as `start`.\n\nAnd it can optionally include `align`, `class`, and/or `content` to override top-level settings.\n\nAll properties are currently optional. That is, you may leave `start` or `end` off and the plugin will not complain, but you should always pass a `start` and an `end`. This will be required in a future release.\n\n### Examples\n\nYou can setup overlays to be displayed when particular events are emitted by the player, including your own custom events:\n\n```js\nplayer.overlay({\n  overlays: [{\n\n    // This overlay will appear when a video is playing and disappear when\n    // the player is paused.\n    start: 'playing',\n    end: 'pause'\n  }, {\n\n    // This overlay will appear when the \"custom1\" event is triggered and\n    // disappear when the \"custom2\" event is triggered.\n    start: 'custom1',\n    end: 'custom2'\n  }]\n});\n```\n\nMultiple overlays can be displayed simultaneously. You probably want to specify an alignment for one or more of them so they don't overlap:\n\n```js\nplayer.overlay({\n  overlays: [{\n\n    // This overlay appears at 3 seconds and disappears at 15 seconds.\n    start: 3,\n    end: 15\n  }, {\n\n    // This overlay appears at 7 seconds and disappears at 22 seconds.\n    start: 7,\n    end: 22,\n    align: 'bottom'\n  }]\n});\n```\n","version":"2.0.0","downloads":1537},{"name":"videojs-panning-slider","description":"Panning Slider for VideoJS","author":{"name":"Samuel Tschümperlin","email":"samuel.tschuemperlin@zeix.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-07-04T12:20:59.705Z","created":"2017-05-09T12:20:46.313Z","0.0.0":"2017-05-09T12:20:46.313Z","0.0.1":"2017-05-10T15:29:00.669Z","0.0.2":"2017-05-15T13:43:28.991Z","0.0.3":"2017-05-19T14:49:36.704Z","0.0.4":"2017-05-19T15:07:16.536Z","0.0.5":"2017-07-04T12:20:59.705Z"},"readme":"# IN WORK!\n# videojs-panning-slider\n\nPanning Slider for VideoJS\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-panning-slider\n```\n\n## Usage\n\nTo include videojs-panning-slider on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-panning-slider.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.panningSlider();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-panning-slider via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-panning-slider');\n\nvar player = videojs('my-video');\n\nplayer.panningSlider();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-panning-slider'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.panningSlider();\n});\n```\n\n## License\n\nMIT. Copyright (c) Samuel Tschümperlin <samuel.tschuemperlin@zeix.com>\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.5","downloads":35},{"name":"videojs-panorama","description":"a plugin for videojs run a full 360 degree panorama video. ","author":{"name":"yanwsh@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-09-15T12:50:57.128Z","created":"2016-04-27T03:32:49.261Z","0.0.1":"2016-04-27T03:32:49.261Z","0.0.2":"2016-04-27T03:42:32.408Z","0.0.5":"2016-05-31T17:36:40.410Z","0.0.8":"2016-10-17T18:51:48.517Z","0.0.9":"2016-10-24T01:05:59.693Z","0.1.0":"2016-11-08T01:58:59.098Z","0.1.1":"2016-11-15T18:13:53.943Z","0.1.2":"2016-11-19T03:37:25.222Z","0.1.3":"2016-12-17T22:06:28.432Z","0.1.4":"2017-03-05T22:44:17.235Z","0.1.5":"2017-03-06T03:42:35.330Z","0.1.6":"2017-04-12T15:07:04.617Z","0.1.7":"2017-07-27T05:58:29.427Z"},"readme":"# videojs-panorama\n\nA [VideoJS][videojs] and [MediaElement](https://github.com/mediaelement/mediaelement) plugin to run a full 180, 360 degree, 3d 360 degree panorama, fisheye and 3d fisheye video. Fully support VR device.\n\n#### [DEMO HERE](http://yanwsh.github.io/videojs-panorama/)\n\n# videojs-panorama v1.0.0 is coming soon\n#### [DOWNLOAD HERE](https://github.com/yanwsh/videojs-panorama/releases/tag/v1.0.0-beta)\n\n### Please help me test this new version. Keep in mind, this is beta version, so don't use it on production site.\n\n## New Features\n1. Support Media Element Player\n2. Black screen detector\n3. Keyboard control. (Left, Right, Up and Down arrow)\n4. Hotspot support\n5. Animation support\n6. All in one (videojs 4, videojs 5 and media element player will detect automatically)\n7. 180 video support\n8. 360 Thumbnail support\n\n## Usage\n\n```javascript\nvar panorama = player.panorama({\n            PanoramaThumbnail: true, //enable panorama thumbnail\n            KeyboardControl: true,\n            clickToToggle: true,\n            Notice: {\n                Enable: true,\n                Message: (isMobile())? \"please drag and drop the video\" : \"please use your mouse drag and drop the video\"\n            },\n            Markers: [\n                {\n                    location: {\n                        lat: 0,\n                        lon: 180\n                    },\n                    radius: 500,\n                    element: \"This is text 1 with long text\"\n                },\n                {\n                    location: {\n                        lat: 20,\n                        lon: 160\n                    },\n                    radius: 500,\n                    element: \"This is text 2 with long text\",\n                    onShow: function(){\n                        console.log(\"text 2 is shown\");\n                    },\n                    onHide: function(){\n                        console.log(\"text 2 is hidden\");\n                    }\n                }\n            ],\n            Animation: [\n                {\n                    keyPoint: 0,\n                    from: {\n                        lon: 180,\n                    },\n                    to:{\n                        lon: 540,\n                    },\n                    duration: 8000,\n                    ease: \"linear\",\n                    onComplete: function () {\n                        console.log(\"animation 1 is completed\");\n                    }\n                },\n                {\n                    keyPoint: 0,\n                    from: {\n                        fov: 75,\n                    },\n                    to:{\n                        fov: 90,\n                    },\n                    duration: 5000,\n                    ease: \"linear\",\n                }\n            ],\n        });\n```\n#### Full documentation comming soon! If you have any question, feel free to post it on issues board.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-panorama\n```\n\nor\n\n```sh\nbower install --save videojs-panorama\n```\n\nor\n\n#### [DOWNLOAD HERE](https://github.com/yanwsh/videojs-panorama/releases)\n\n## Integration with video.js 4 and 5\n\n###1. If you don't have video.js, add its scripts and stylesheet to your page:\n\n```html\n<!-- video.js 4 -->\n<link href=\"http://vjs.zencdn.net/4.12/video-js.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/4.12/video.js\"></script>\n```\nor\n\n```html\n<!-- video.js 5 -->\n<link href=\"http://vjs.zencdn.net/5.8/video-js.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/5.8/video.js\"></script>\n```\n\n###2. Add three.js after video.js script\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.js\"></script>\n```\n###3. Add the plugin stylesheet and script\n\n```html\n<!-- Common -->\n<link href=\"//path/to/videojs-panorama.min.css\" rel=\"stylesheet\">\n```\nand the videojs version-specific plugin, available in the **dist** folder\n```html\n<!-- video.js 4 -->\n<script src=\"//path/to/videojs-panorama.v4.min.js\"></script>\n```\nor\n```html\n<!-- video.js 5 -->\n<script src=\"//path/to/videojs-panorama.v5.min.js\"></script>\n```\n###4. Set up the video.js panorama plugin\n```js\nplayer.panorama({\n    clickAndDrag: true,\n    callback: function () {\n      player.play();\n    }\n});\n```\n\n## Cross domain issue\nIn order to avoid a cross domain issue, please keep the code and video within same domain. videojs-panorama uses canvas and includes the video as a resource, so it should be at the same domain. For details, please see: [https://forums.developer.apple.com/thread/36725](https://forums.developer.apple.com/thread/36725)\n\nIf you really want to use a video hosted on a different domain, there are two solutions. \n(If you have alternatives, please let me know.)\n\n## Video player in iframe\nIn order to avoid the cross-domain issue, we need to put the video player inside an iframe. However, mobile acceleration and fullscreen do not work in iframes, so you will have to set it up manually. Please check `iframe.html` and `iframe-video.html` for details, they include examples to allow mobile acceleration and fullscreen functionality to work in iframes. \n\n### Put it inside an iframe and use iframe in different domain. (Best solution)\n### Experimental, only works in Chrome and Firefox; does not work in Safari!\nPlease make sure to add `crossorigin=\"anonymous\"` attribute in video tag:\n```js\n        <video id=\"videojs-panorama-player\" class=\"video-js vjs-default-skin\" poster=\"assets/poster.jpg\"  crossorigin=\"anonymous\" controls>\n            <source src=\"assets/shark.mp4\" type='video/mp4'>\n        </video>\n```\nOn the server side, you have to set a cross-origin header, like `Access-Control-Allow-Origin: *`.\n\n## Resize problem\n\nSometimes the video will need to be resized and/or go fullscreen. For performance, this plugin doesn't handle resize automatically. \nHere's the solution:\n```js\nvar player = window.player = videojs('videojs-panorama-player', {}, function () {\n    window.addEventListener(\"resize\", function () {\n        var canvas = player.getChild('Canvas');\n        canvas.handleResize();\n    });\n});\n```\n\n\n## Fisheye video support\n\nIn some cases, you get the video like below. \n\n![Image of fisheye poster](assets/poster-2.jpg)\n\nYou don't have to use tools to convert video to equirectangular video, you can use this plugin to play directly.\n\nThere are two cases for fisheye video.\nOne case is the camera took from top to bottom. You may need to restrict user only view the bottom half of the sphere\n```js\nplayer.panorama({\n    maxLat: -10,\n    initLat: -10,\n    rotateX: -Math.PI,\n});\n```\n\nAnother case is the camera took from bottom to top.\n```js\nplayer.panorama({\n    minLat: 10,\n    initLat: 10,\n    rotateX: 0,\n});\n    \n```\n\n## Options\n\n### clickAndDrag\nBy default, video will be rotated when user rollover their mouse. If clickAndDrag set to true, video rotation will only happen on user drag and drop the video. `Defaults to false`\n\n### callback\ncallback function fired when panorama video is ready.\n\n### showNotice\nA notice label show on the beginning of the video to notice user to drag the player to see whole video. If showNotice set to false, notice label will not be shown. `Defaults to true`\n\n### NoticeMessage\nCustomize your own notice message. \n\n### autoHideNotice\nHow long the notice message should be shown. `Defaults to 3000`, indicate it will hide after 3000ms.\n\n### initLat\ninitial lat for camera angle, `Defaults value is 0`, range between -90 to 90.\n\n### initLon\ninitial lot for camera angle, `Defaults value is -180`, don't have range. \n\n### backToVerticalCenter\nautomatically back to vertical center when user inactive the video frame. `Defaults value depends on running platform, true on desktop, false on mobile`.\n\n### returnStepLat\nIf backToVerticalCenter is set to true, you can customize the return back speed. `Defaults value is 0.5`. The larger the faster.\n\n### backToHorizonCenter\nautomatically back to horizontal center when user inactive the video frame. Default value the same as `backToVerticalCenter`.\n\n### returnStepLon\nIf backToHorizonCenter is set to true, you can customize the return back speed. `Defaults value is 2`.\n\n### clickToToggle\nclick to toggle the video. If video is playing, it will be paused. If video is paused, it will be played. `Defaults to false`.\n\nIt's possible to customize the viewable zoom\n### minLat\nminimum Lat value for camera angle. `Defaults value is -85`.\n\n### maxLat\nmax Lat value for camera angle. `Defaults value is 85`.\n\n### autoMobileOrientation\nThis feature only works on mobile device. Auto moving 360 video when user move their phone. `Defaults value is false`.\n\n### videoType\nThis plugin can play two types of video, equirectangular and fisheye. `Defaults value is equirectangular`. \n\n## The properties below only support fisheye video.\n\n### rotateX\nrotate video view by x axis. `Defaults value is 0`. Value should be radian.\n\n### rotateY\nrotate video view by y axis. `Defaults value is 0`. Value should be radian.\n\n### rotateZ\nrotate video view by z axis. `Defaults value is 0`. Value should be radian.\n\n## VREnable\nwhether VR button shows on control panel.  `Defaults value is true`.\n\n\n## browser support\nIE 11, Edge 12, 13, chrome, firefox, safari, iphone ios 9, ipad ios 9, android 4.4 and above.\n\n## License\n\nApache-2.0. Copyright (c) yanwsh@gmail.com\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.7","downloads":665},{"name":"videojs-panorama-ypp","description":"a plugin for videojs run a full 360 degree panorama video. ","author":{"name":"staff@yupiteru.plus"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-09-15T00:16:04.687Z","created":"2017-09-15T00:13:36.715Z","0.1.7":"2017-09-15T00:13:36.715Z","0.1.8":"2017-09-15T00:16:04.687Z"},"readme":"# videojs-panorama\n\nA [VideoJS][videojs] and [MediaElement](https://github.com/mediaelement/mediaelement) plugin to run a full 180, 360 degree, 3d 360 degree panorama, fisheye and 3d fisheye video. Fully support VR device.\n\n#### [DEMO HERE](http://yanwsh.github.io/videojs-panorama/)\n\n# videojs-panorama v1.0.0 is coming soon\n#### [DOWNLOAD HERE](https://github.com/yanwsh/videojs-panorama/releases/tag/v1.0.0-beta)\n\n### Please help me test this new version. Keep in mind, this is beta version, so don't use it on production site.\n\n## New Features\n1. Support Media Element Player\n2. Black screen detector\n3. Keyboard control. (Left, Right, Up and Down arrow)\n4. Hotspot support\n5. Animation support\n6. All in one (videojs 4, videojs 5 and media element player will detect automatically)\n7. 180 video support\n8. 360 Thumbnail support\n\n## Usage\n\n```javascript\nvar panorama = player.panorama({\n            PanoramaThumbnail: true, //enable panorama thumbnail\n            KeyboardControl: true,\n            clickToToggle: true,\n            Notice: {\n                Enable: true,\n                Message: (isMobile())? \"please drag and drop the video\" : \"please use your mouse drag and drop the video\"\n            },\n            Markers: [\n                {\n                    location: {\n                        lat: 0,\n                        lon: 180\n                    },\n                    radius: 500,\n                    element: \"This is text 1 with long text\"\n                },\n                {\n                    location: {\n                        lat: 20,\n                        lon: 160\n                    },\n                    radius: 500,\n                    element: \"This is text 2 with long text\",\n                    onShow: function(){\n                        console.log(\"text 2 is shown\");\n                    },\n                    onHide: function(){\n                        console.log(\"text 2 is hidden\");\n                    }\n                }\n            ],\n            Animation: [\n                {\n                    keyPoint: 0,\n                    from: {\n                        lon: 180,\n                    },\n                    to:{\n                        lon: 540,\n                    },\n                    duration: 8000,\n                    ease: \"linear\",\n                    onComplete: function () {\n                        console.log(\"animation 1 is completed\");\n                    }\n                },\n                {\n                    keyPoint: 0,\n                    from: {\n                        fov: 75,\n                    },\n                    to:{\n                        fov: 90,\n                    },\n                    duration: 5000,\n                    ease: \"linear\",\n                }\n            ],\n        });\n```\n#### Full documentation comming soon! If you have any question, feel free to post it on issues board.\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-panorama\n```\n\nor\n\n```sh\nbower install --save videojs-panorama\n```\n\nor\n\n#### [DOWNLOAD HERE](https://github.com/yanwsh/videojs-panorama/releases)\n\n## Integration with video.js 4 and 5\n\n###1. If you don't have video.js, add its scripts and stylesheet to your page:\n\n```html\n<!-- video.js 4 -->\n<link href=\"http://vjs.zencdn.net/4.12/video-js.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/4.12/video.js\"></script>\n```\nor\n\n```html\n<!-- video.js 5 -->\n<link href=\"http://vjs.zencdn.net/5.8/video-js.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/5.8/video.js\"></script>\n```\n\n###2. Add three.js after video.js script\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.js\"></script>\n```\n###3. Add the plugin stylesheet and script\n\n```html\n<!-- Common -->\n<link href=\"//path/to/videojs-panorama.min.css\" rel=\"stylesheet\">\n```\nand the videojs version-specific plugin, available in the **dist** folder\n```html\n<!-- video.js 4 -->\n<script src=\"//path/to/videojs-panorama.v4.min.js\"></script>\n```\nor\n```html\n<!-- video.js 5 -->\n<script src=\"//path/to/videojs-panorama.v5.min.js\"></script>\n```\n###4. Set up the video.js panorama plugin\n```js\nplayer.panorama({\n    clickAndDrag: true,\n    callback: function () {\n      player.play();\n    }\n});\n```\n\n## Cross domain issue\nIn order to avoid a cross domain issue, please keep the code and video within same domain. videojs-panorama uses canvas and includes the video as a resource, so it should be at the same domain. For details, please see: [https://forums.developer.apple.com/thread/36725](https://forums.developer.apple.com/thread/36725)\n\nIf you really want to use a video hosted on a different domain, there are two solutions. \n(If you have alternatives, please let me know.)\n\n## Video player in iframe\nIn order to avoid the cross-domain issue, we need to put the video player inside an iframe. However, mobile acceleration and fullscreen do not work in iframes, so you will have to set it up manually. Please check `iframe.html` and `iframe-video.html` for details, they include examples to allow mobile acceleration and fullscreen functionality to work in iframes. \n\n### Put it inside an iframe and use iframe in different domain. (Best solution)\n### Experimental, only works in Chrome and Firefox; does not work in Safari!\nPlease make sure to add `crossorigin=\"anonymous\"` attribute in video tag:\n```js\n        <video id=\"videojs-panorama-player\" class=\"video-js vjs-default-skin\" poster=\"assets/poster.jpg\"  crossorigin=\"anonymous\" controls>\n            <source src=\"assets/shark.mp4\" type='video/mp4'>\n        </video>\n```\nOn the server side, you have to set a cross-origin header, like `Access-Control-Allow-Origin: *`.\n\n## Resize problem\n\nSometimes the video will need to be resized and/or go fullscreen. For performance, this plugin doesn't handle resize automatically. \nHere's the solution:\n```js\nvar player = window.player = videojs('videojs-panorama-player', {}, function () {\n    window.addEventListener(\"resize\", function () {\n        var canvas = player.getChild('Canvas');\n        canvas.handleResize();\n    });\n});\n```\n\n\n## Fisheye video support\n\nIn some cases, you get the video like below. \n\n![Image of fisheye poster](assets/poster-2.jpg)\n\nYou don't have to use tools to convert video to equirectangular video, you can use this plugin to play directly.\n\nThere are two cases for fisheye video.\nOne case is the camera took from top to bottom. You may need to restrict user only view the bottom half of the sphere\n```js\nplayer.panorama({\n    maxLat: -10,\n    initLat: -10,\n    rotateX: -Math.PI,\n});\n```\n\nAnother case is the camera took from bottom to top.\n```js\nplayer.panorama({\n    minLat: 10,\n    initLat: 10,\n    rotateX: 0,\n});\n    \n```\n\n## Options\n\n### clickAndDrag\nBy default, video will be rotated when user rollover their mouse. If clickAndDrag set to true, video rotation will only happen on user drag and drop the video. `Defaults to false`\n\n### callback\ncallback function fired when panorama video is ready.\n\n### showNotice\nA notice label show on the beginning of the video to notice user to drag the player to see whole video. If showNotice set to false, notice label will not be shown. `Defaults to true`\n\n### NoticeMessage\nCustomize your own notice message. \n\n### autoHideNotice\nHow long the notice message should be shown. `Defaults to 3000`, indicate it will hide after 3000ms.\n\n### initLat\ninitial lat for camera angle, `Defaults value is 0`, range between -90 to 90.\n\n### initLon\ninitial lot for camera angle, `Defaults value is -180`, don't have range. \n\n### backToVerticalCenter\nautomatically back to vertical center when user inactive the video frame. `Defaults value depends on running platform, true on desktop, false on mobile`.\n\n### returnStepLat\nIf backToVerticalCenter is set to true, you can customize the return back speed. `Defaults value is 0.5`. The larger the faster.\n\n### backToHorizonCenter\nautomatically back to horizontal center when user inactive the video frame. Default value the same as `backToVerticalCenter`.\n\n### returnStepLon\nIf backToHorizonCenter is set to true, you can customize the return back speed. `Defaults value is 2`.\n\n### clickToToggle\nclick to toggle the video. If video is playing, it will be paused. If video is paused, it will be played. `Defaults to false`.\n\nIt's possible to customize the viewable zoom\n### minLat\nminimum Lat value for camera angle. `Defaults value is -85`.\n\n### maxLat\nmax Lat value for camera angle. `Defaults value is 85`.\n\n### autoMobileOrientation\nThis feature only works on mobile device. Auto moving 360 video when user move their phone. `Defaults value is false`.\n\n### videoType\nThis plugin can play two types of video, equirectangular and fisheye. `Defaults value is equirectangular`. \n\n## The properties below only support fisheye video.\n\n### rotateX\nrotate video view by x axis. `Defaults value is 0`. Value should be radian.\n\n### rotateY\nrotate video view by y axis. `Defaults value is 0`. Value should be radian.\n\n### rotateZ\nrotate video view by z axis. `Defaults value is 0`. Value should be radian.\n\n## VREnable\nwhether VR button shows on control panel.  `Defaults value is true`.\n\n\n## browser support\nIE 11, Edge 12, 13, chrome, firefox, safari, iphone ios 9, ipad ios 9, android 4.4 and above.\n\n## License\n\nApache-2.0. Copyright (c) yanwsh@gmail.com\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.8","downloads":11},{"name":"videojs-per-source-behaviors","description":"A Video.js plugin for enhancing a player with behaviors related to changing media sources.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-05-19T01:39:18.403Z","created":"2016-06-03T16:21:41.581Z","1.0.0-0":"2016-06-03T16:21:41.581Z","1.0.0-1":"2016-06-07T15:31:36.681Z","1.0.0-2":"2016-06-15T14:41:03.396Z","1.0.0":"2016-06-22T01:07:58.335Z","1.1.0":"2017-01-31T22:33:19.483Z","1.1.1":"2017-02-10T19:56:53.618Z","1.1.2":"2017-02-27T20:54:10.798Z","1.1.3":"2017-03-23T15:22:51.774Z","1.1.4":"2017-04-27T19:58:13.782Z","2.0.0":"2017-05-19T01:39:18.403Z"},"readme":"# videojs-per-source-behaviors\n\nA video.js plugin for enhancing a player with behaviors related to changing media sources.\n\n## Why?\n\nDetecting when the media source of a player has changed or is about to change is an inexact operation because the resource selection algorithm is asynchronous.\n\nFor the most part, Video.js users will be familiar with using the `Player#src()` method to change the source of the player. One might wonder why we don't simply trigger an event from that function to signal that the source is going to change.\n\nThe problem with that is that `src()` is not the only way to change the source. The underlying `<video>` element has multiple methods of changing the source as well and we aim to support those here.\n\nThis plugin provides events and other tools that aim to make that uncertainty a little less daunting.\n\n## Installation\n\n```sh\nnpm install --save videojs-per-source-behaviors\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-per-source-behaviors\n```\n\n## Usage\n\nTo include videojs-per-source-behaviors on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-per-source-behaviors.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.perSourceBehaviors();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-per-source-behaviors via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-per-source-behaviors');\n\nvar player = videojs('my-video');\n\nplayer.perSourceBehaviors();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-per-source-behaviors'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.perSourceBehaviors();\n});\n```\n\n## API\n\nOnce the plugin is invoked on a player - by calling `player.perSourceBehaviors()` - it begins firing a new event, gains two new methods, and replaces `perSourceBehaviors` with an object.\n\n### `sourceunstable` Event\n\nThe `sourceunstable` event will be fired when the plugin detects a condition that suggests the video player is in the process of changing sources, but that it's too early to know what the new source is or will be.\n\nThis is not a guarantee that the source will even change, but it's close - and one of the goals of this project is to continually improve this detection.\n\n### `sourcechanged` Event\n\nThe `sourcechanged` event will be fired once the call stack is cleared after the first of a subset of standard [`HTMLMediaElement` events][standard-events] is encountered where the `currentSrc()` returned by the player has changed from the previously cached value.\n\n| previous src | current src | ad state | triggered? |\n|:------------:|:-----------:|:--------:|:----------:|\n| null | null | :x: | :x: |\n| null | foo.mp4 | :x: | :white_check_mark: |\n| null | ad.mp4 | :white_check_mark: | :x: |\n| foo.mp4 | foo.mp4 | :x: | :x: |\n| foo.mp4 | foo.mp4 | :white_check_mark: | :x: |\n| foo.mp4 | bar.mp4 | :x: | :white_check_mark: |\n| foo.mp4 | bar.mp4 | :white_check_mark: | :x: |\n| foo.mp4 | ad.mp4 | :white_check_mark: | :x: |\n| ad.mp4 | foo.mp4 | :white_check_mark: | :x: |\n\n#### Extra Event Data\n\nAn object with the following properties is passed along with `sourcechanged` events as the second argument to any listeners:\n\n- `from`: The source URL _before_ the event.\n- `to`: The source URL _after_ the event (and currently).\n- `interimEvents`: An array of _all_ the events that occurred in the player between the event that triggered the check to the last event that fired before the call stack cleared. \n\nPut another way, the object follows the following schema:\n\n```js\n{\n  from: <String>,\n  to: <String>,\n  interimEvents: [{\n    time: <Number>,\n    event: <Event>\n  }, ...]\n}\n```\n\n### `player.onPerSrc()`\n\nThe `onPerSrc()` method has the same behavior as `on()` with the crucial exception that it will unbind itself if the listener is ever called with a different source than when it was bound.\n\nAdditionally, these listeners will be removed immediately before the plugin triggers a `sourcechanged` event. This is done because one of the core use-cases is adding new per-source listeners on the `sourcechanged` event and there is a chance they can double-up otherwise.\n\n### `player.onePerSrc()`\n\nThe `onePerSrc()` method has the same behavior as `onPerSrc()` except that it can only be called _once_.\n\n### `player.perSourceBehaviors.disable()`/`player.perSourceBehaviors.enable()`\n\nThese methods will disable and enable (respectively) the per-source behaviors on this player.\n\nThis is useful in more complex use-cases where you might want to manipulate the player state without triggering per-source behaviors. A good example of this might be advertising playback.\n\n#### What happens when per-source behaviors are disabled?\n\n- The `sourcechanged` event will not be fired even if the source changes.\n- Any `onPerSrc()`/`onePerSrc()` listeners will not be called.\n- Binding new `onPerSrc()`/`onePerSrc()` listeners will be prevented.\n\n### `player.perSourceBehaviors.disabled()`/`player.perSourceBehaviors.enabled()`\n\nUse these methods to inspect the current enabled/disabled state of the player as pertains to per-source behaviors. Both return a `Boolean`.\n\n### `player.perSourceBehaviors.VERSION`\n\nExposes the semantic version number of the plugin. This is also exposed on the plugin function (i.e. `videojs.getComponent('Player').prototype.perSourceBehaviors`).\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[standard-events]: https://www.w3.org/TR/html5/embedded-content-0.html#mediaevents\n[videojs]: http://videojs.com/\n","version":"2.0.0","downloads":899},{"name":"videojs-pip","description":"video.js plugin to add a PIP button if the browser supports webkitSupportsPresentationMode","author":{"name":"Fancy Bits, LLC"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-05-04T00:46:51.450Z","created":"2017-05-02T23:35:47.592Z","1.0.0":"2017-05-02T23:35:47.592Z","1.0.1":"2017-05-03T02:22:41.835Z","1.0.2":"2017-05-03T19:41:27.331Z","1.0.3":"2017-05-04T00:46:51.450Z"},"readme":"# videojs-pip\n\nvideo.js plugin to add a PIP button if the browser supports webkitSupportsPresentationMode\n\nBuilt for video.js 5.x and above.\n\n## Usage\n\n```scss\n$icon-font-path: '~videojs-pip/fonts/';\n@import \"~videojs-pip/videojs-pip\";\n```\n\n```js\nrequire('videojs-pip')\nvideojs(element, {\n  pipButton: {}\n})\n```\n\n## License\n\nMIT\n","version":"1.0.3","downloads":26},{"name":"videojs-playbackrate-adjuster","description":"A Video.js 6 middleware that adjusts controls based on playback rate","author":{"name":"Gary Katsevman","email":"me@gkatsev.com"},"keywords":["videojs","videojs-middleware","videojs-plugin"],"license":"MIT","time":{"modified":"2017-08-24T17:32:22.218Z","created":"2017-03-13T21:59:13.405Z","1.0.0":"2017-03-13T21:59:13.405Z"},"readme":"# videojs-playbackrate-adjuster\n\nA Video.js 6 middleware that adjusts controls based on playback rate\n\n## Installation\n\n```sh\nnpm install --save videojs-playbackrate-adjuster\n```\n\n## Usage\n\nTo include videojs-playbackrate-adjuster on your website or web application, use any of the following methods.\nSince it's a middleware and attaches itself to Video.js automatically,\nit only needs to be included or required.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-playbackrate-adjuster.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-playbackrate-adjuster via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual middleware function is exported by this module, but it is also\n// attached to Video.js; so, there is no need to assign it to a variable.\nrequire('videojs-playbackrate-adjuster');\n\nvar player = videojs('my-video');\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-playbackrate-adjuster'], function(videojs) {\n  var player = videojs('my-video');\n});\n```\n\n## License\n\nMIT. Copyright (c) Gary Katsevman <me@gkatsev.com>\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0","downloads":17},{"name":"videojs-playlist","description":"Playlist plugin for Video.js","author":{"name":"Brightcove, Inc."},"keywords":["playlist","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-25T18:28:55.347Z","created":"2015-03-30T19:36:21.025Z","1.0.0":"2015-03-30T19:36:21.025Z","1.0.1":"2015-03-30T19:56:41.488Z","1.0.2":"2015-04-09T16:34:07.887Z","1.0.3":"2015-08-24T17:17:53.588Z","2.0.0":"2015-11-23T17:49:31.294Z","2.1.0":"2015-12-30T20:21:17.425Z","2.2.0":"2016-01-29T23:51:02.654Z","2.3.0":"2016-04-19T20:35:41.309Z","2.3.1":"2016-04-21T19:27:03.039Z","2.4.0":"2016-05-09T18:21:17.376Z","2.4.1":"2016-05-12T18:35:36.440Z","2.5.0":"2016-09-12T17:30:07.561Z","3.0.0":"2016-09-12T17:32:38.188Z","3.0.1":"2017-01-30T17:16:51.436Z","3.0.2":"2017-02-10T21:42:00.487Z","3.0.3-0":"2017-03-09T18:35:12.272Z","3.0.3-1":"2017-03-09T19:56:31.428Z","3.1.0":"2017-04-03T20:29:48.041Z","3.1.1":"2017-04-27T16:55:58.675Z","4.0.0":"2017-05-19T14:57:39.015Z","4.0.1":"2017-10-16T16:23:26.827Z","4.0.2":"2017-11-13T21:42:56.881Z","4.1.0-0":"2017-11-20T19:11:44.140Z","4.1.0-1":"2017-11-21T20:38:45.736Z","4.1.0-2":"2017-11-27T22:13:58.530Z","4.1.0":"2017-11-29T20:36:14.277Z","4.1.1":"2018-01-08T19:53:59.893Z","4.2.0":"2018-01-25T18:28:55.347Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist)\n\n# Playlist Plugin for video.js\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Inclusion](#inclusion)\n- [Basic Usage](#basic-usage)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nInstall videojs-playlist via npm (preferred):\n\n```sh\n$ npm install videojs-playlist\n```\n\nOr Bower:\n\n```sh\n$ bower install videojs-playlist\n```\n\n## Inclusion\n\nInclude videojs-playlist on your website using the tool(s) of your choice.\n\nThe simplest method of inclusion is a `<script>` tag after the video.js `<script>` tag:\n\n```html\n<script src=\"path/to/video.js/dist/video.js\"></script>\n<script src=\"path/to/videojs-playlist/dist/videojs-playlist.js\"></script>\n```\n\nWhen installed via npm, videojs-playlist supports Browserify-based workflows out of the box.\n\n## Basic Usage\n\nFor full details on how to use the playlist plugin can be found in [the API documentation](docs/api.md).\n\n```js\nvar player = videojs('video');\n\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://vjs.zencdn.net/v/oceans.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://www.videojs.com/img/poster.jpg'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n\n// Play through the playlist automatically.\nplayer.playlist.autoadvance(0);\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n","version":"4.2.0","downloads":3561},{"name":"videojs-playlist-autoplay","description":"Playlist plugin for videojs","author":{"name":"Brightcove, Inc."},"keywords":["playlist","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-12-22T10:08:15.156Z","created":"2016-12-22T10:08:15.156Z","3.0.0":"2016-12-22T10:08:15.156Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist)\n\n# Playlist Plugin for video.js\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Inclusion](#inclusion)\n- [Basic Usage](#basic-usage)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nInstall videojs-playlist via npm (preferred):\n\n```sh\n$ npm install videojs-playlist\n```\n\nOr Bower:\n\n```sh\n$ bower install videojs-playlist\n```\n\n## Inclusion\n\nInclude videojs-playlist on your website using the tool(s) of your choice.\n\nThe simplest method of inclusion is a `<script>` tag after the video.js `<script>` tag:\n\n```html\n<script src=\"path/to/video.js/dist/video.js\"></script>\n<script src=\"path/to/videojs-playlist/dist/videojs-playlist.js\"></script>\n```\n\nWhen installed via npm, videojs-playlist supports Browserify-based workflows out of the box.\n\n## Basic Usage\n\nFor full details on how to use the playlist plugin can be found in [the API documentation](docs/api.md).\n\n```js\nvar player = videojs('video');\n\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://vjs.zencdn.net/v/oceans.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://www.videojs.com/img/poster.jpg'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n\n// Play through the playlist automatically.\nplayer.playlist.autoadvance(0);\n```\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n","version":"3.0.0","downloads":11},{"name":"videojs-playlist-thumbs","description":"Continous play videos with thumbnail and looping","author":{"name":"Emmanuel Alves","email":"manel.pb@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-06-08T21:09:09.501Z","created":"2016-07-26T17:08:47.150Z","0.1.0":"2016-07-26T17:08:47.150Z","0.1.1":"2016-07-26T17:17:43.051Z","0.1.2":"2016-07-26T17:29:50.714Z","0.1.3":"2016-07-26T17:36:33.408Z","0.1.4":"2016-07-28T19:26:29.435Z","0.1.5":"2016-07-29T19:55:39.461Z"},"readme":"# videojs-playlist-thumbs\n\nContinous plays videos and display the list on a sidebar with thumbnail and title \n\n![alt tag](https://raw.githubusercontent.com/manelpb/videojs-playlist-thumbs/master/screenshot.png)\n\n## Installation\n\n```sh\nnpm install --save videojs-playlist-thumbs\n```\n\n## Usage\n\nTo include videojs-playlist on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-youtube/dist/Youtube.js\"></script>\n<script src=\"//path/to/videojs-playlist.min.js\"></script>\n<link href=\"//path/to/videojs-playlist.css\" rel=\"stylesheet\">\n\n<script>\n  var player = videojs('my-video', { preload: true, techOrder: [\"youtube\", \"html5\"], controls: true});\n  var videosList = [\n  \t{\n      \"src\" : \"https://www.youtube.com/watch?v=fk4BbF7B29w\",\n      \"type\": \"video/youtube\",\n      \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n      \"thumbnail\": \"https://i.ytimg.com/vi/fk4BbF7B29w/hqdefault.jpg\"\n    },\n    {\n      \"src\" : \"https://www.youtube.com/watch?v=_gMq3hRLDD0\",\n      \"type\": \"video/youtube\",\n      \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n      \"thumbnail\": \"https://i.ytimg.com/vi/_gMq3hRLDD0/hqdefault.jpg\"\n    }\n  ];\n\n  player.playlist({ videos: videosList, playlist: { hideSidebar: false, upNext: true, hideIcons: false, thumbnailSize: 300, items: 3 } });\n</script>\n```\n\n## Documentation\n\n### videos\n\nYou should pass an array of objects with the following structure\n\n```\nvar playlist = [\n        {\n          \"src\" : \"https://www.youtube.com/watch?v=fk4BbF7B29w\",\n          \"type\": \"video/youtube\",\n          \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          \"thumbnail\": \"https://i.ytimg.com/vi/fk4BbF7B29w/hqdefault.jpg\"\n        },\n        {\n          \"src\" : \"http://vjs.zencdn.net/v/oceans.mp4\",\n          \"type\": \"video/mp4\",\n          \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          \"thumbnail\": \"https://i.ytimg.com/vi/nmcdLOjGVzw/hqdefault.jpg\"\n        },\n        {\n          \"src\" : \"https://www.youtube.com/watch?v=_gMq3hRLDD0\",\n          \"type\": \"video/youtube\",\n          \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          \"thumbnail\": \"https://i.ytimg.com/vi/_gMq3hRLDD0/hqdefault.jpg\"\n        },\n        {\n          \"src\" : \"https://www.youtube.com/watch?v=_wYtG7aQTHA\",\n          \"type\": \"video/youtube\",\n          \"title\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          \"thumbnail\": \"https://i.ytimg.com/vi/_wYtG7aQTHA/hqdefault.jpg\"\n        }\n      ];\n```\n\n### playlist options\n\n#### hideSidebar\n\nIt just hides the side bar, but the playlist keeps working\n\n#### upNext\n\nShows a legend on the first video of the list\n\n#### hideIcons\n\nHides the buttons (next/prev) on the control bar\n\n#### thumbnailSize\n\nSize of the video thumbnail on the sidebar\n\n#### items\n\nNumber of videos on the sidebar \n\n\n## License\n\nMIT. Copyright (c) Emmanuel Alves / http://github.com/manelpb\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.5","downloads":55},{"name":"videojs-playlist-ui","description":"A playlist video picker for video.js","author":{"name":"Brightcove, Inc."},"keywords":["playlist","videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-09T21:27:18.078Z","created":"2015-03-30T19:28:42.727Z","1.0.0":"2015-03-30T19:28:42.727Z","1.0.1":"2015-03-30T19:55:12.132Z","1.0.2":"2015-06-25T21:11:36.159Z","1.0.3":"2015-08-03T15:57:56.690Z","1.0.4":"2015-08-06T20:19:57.552Z","2.0.0":"2015-11-23T17:48:28.430Z","2.1.0-0":"2016-01-28T21:44:35.738Z","2.1.0":"2016-02-01T22:10:10.042Z","2.1.1":"2016-02-04T22:48:11.668Z","2.1.2":"2016-02-05T19:16:32.679Z","2.2.0":"2016-05-09T19:05:30.247Z","2.2.1-0":"2016-06-15T13:23:45.530Z","2.3.0":"2016-07-18T15:39:11.153Z","3.0.0":"2016-09-08T17:37:39.220Z","3.0.1":"2017-01-30T18:22:57.386Z","2.3.1":"2017-01-30T18:31:08.081Z","3.0.2":"2017-01-30T18:38:50.490Z","2.3.2":"2017-02-10T22:16:04.171Z","2.3.3":"2017-03-24T20:13:53.431Z","3.0.3":"2017-03-24T20:20:44.724Z","3.0.4":"2017-04-26T16:25:06.070Z","3.0.5":"2017-05-19T16:45:20.826Z","2.3.4":"2017-05-30T13:53:40.165Z","3.0.6":"2017-09-05T19:51:36.618Z","3.1.0":"2017-11-15T20:46:08.613Z","3.2.0":"2017-11-29T18:17:59.320Z","3.2.1":"2017-11-29T20:29:44.858Z","3.3.0":"2017-12-04T20:56:17.392Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist-ui.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist-ui)\n\n# Video.js Playlist UI\nA playlist video picker for video.js and videojs-playlist\n\n## Getting Started\nInclude the plugin script in your page, and a placeholder list element with the class `vjs-playlist` to house the playlist menu:\n\n```html\n<!-- Include the playlist menu styles somewhere in your page: -->\n<link href=\"videojs-playlist-ui.vertical.css\" rel=\"stylesheet\">\n\n<!-- The playlist menu will be built automatically in here: -->\n<div class=\"vjs-playlist\"></div>\n\n<!-- Include video.js, the videojs-playlist plugin and this plugin: -->\n<script src=\"video.js\"></script>\n<script src=\"videojs-playlist.js\"></script>\n<script src=\"videojs-playlist-ui.js\"></script>\n\n<script>\n  // Initialize the plugin and build the playlist!\n  videojs(document.querySelector('video')).playlistUi();\n</script>\n```\n\nThere's also a [working example](example.html) of the plugin you can check out if you're having trouble.\n\n## Root Element\nBefore this plugin will work at all, it needs an element in the DOM to which to attach itself. There are three ways to find or provide this element.\n\n> **NOTE:** In v2.x of this plugin, the root element was expected to be a list element (i.e., `<ol>` or `<ul>`). As of v3.x, the plugin creates a list; so, this root element _must_ be a non-list container element (e.g., `<div>`).\n\n### Using Automatic Discovery (default, [example](example.html))\nBy default, the plugin will search for the first element in the DOM with the `vjs-playlist` class.\n\nTo defend against problems caused by multiple playlist players on a page, the plugin will only use an element with the `vjs-playlist` class if that element has not been used by another player's playlist.\n\n### Using a Custom Class ([example](example-custom-class.html))\nA custom `className` option can be passed to override the class the plugin will search for to find the root element. The same defense against multiple playlist players is reused in this case.\n\n```js\nplayer.playlistUi({\n  className: 'hello-world'\n});\n```\n\n### Using a Custom Element ([example](example-custom-element.html))\nA custom element can be passed using the `el` option to explicitly define a specific root element.\n\n```js\nplayer.playlistUi({\n  el: document.getElementById('hello-world')\n});\n```\n\n> **NOTE:** Previously, the plugin supported passing the element in lieu of passing options. That feature is deprecated and will be removed in 4.0. Please use the `el` option going forward.\n\n## Other Options\n\nThe options passed to the plugin are passed to the internal `PlaylistMenu` [video.js Component][components]; so, you may pass in [any option][components-options] that is accepted by a component.\n\nIn addition, the options object may contain the following specialized properties:\n\n#### `className`\nType: `string`\nDefault: `\"vjs-playlist\"`\n\nAs mentioned [above](#using-a-custom-class), the name of the class to search for to populate the playlist menu.\n\n#### playOnSelect\nType: `boolean`\nDefault: `false`\n\nThe default behavior is that the play state is expected to stay the same between videos. If the player is playing when switching playlist items, continue playing. If paused, stay paused.\n\nWhen this boolean is set to `true`, clicking on the playlist menu items will always play the video.\n\n## Playlists and Advertisements\n\nThe `PlaylistMenu` automatically adapts to ad integrations based on [videojs-contrib-ads][contrib-ads]. When a linear ad is being played, the menu will darken and stop responding to click or touch events. If you'd prefer to allow your viewers to change videos during ad playback, you can override this behavior through CSS. You will also need to make sure that your ad integration is properly cancelled and cleaned up before switching -- consult the documentation for your ad library for details on how to do that.\n\n\n[components]: https://github.com/videojs/video.js/blob/master/docs/guides/components.md\n[components-options]: https://github.com/videojs/video.js/blob/master/docs/guides/options.md#component-options\n[contrib-ads]: https://github.com/videojs/videojs-contrib-ads\n","version":"3.3.0","downloads":1349},{"name":"videojs-qs","description":"A wrapper for the Node querystring module equivalent provided by rollup-plugin-node-builtins for Video.js-based players.","author":{"name":"Brightcove, Inc."},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-06-01T13:52:02.538Z","created":"2017-05-31T02:30:44.466Z","1.0.0":"2017-05-31T02:30:44.466Z","1.1.0":"2017-05-31T15:14:29.300Z","1.2.0":"2017-05-31T20:01:52.532Z","1.2.1":"2017-06-01T13:52:02.538Z"},"readme":"# videojs-qs\n\nA wrapper for the [Node querystring module][node-qs] mimic provided by [rollup-plugin-node-builtins][rpnb] for Video.js-based players.\n\n**Note:** Does not support the `querystring.escape` or `querystring.unescape` properties.\n\n## Installation\n\n```sh\nnpm install --save videojs-qs\n```\n\n## API\n\nThere are two ways to use this module/plugin to retrieve a querystring-ish object. There is no particular advantage or disadvantage to one or the other - use whichever makes the most sense in your use-case.\n\n### `videojs.qs()` Method\n\nIncluding this module will add the `qs` method to the `videojs` namespace. This is a function that returns a clone of the [Node querystring built-in module][node-qs].\n\n```js\nvar qs = videojs.qs().parse(window.location.search.substr(1));\n```\n\n### `qs` Plugin\n\nIn addition to the `videojs.qs()` method, a plugin is added that registers a `qs()` method on every player instance. This method behaves identically to the `videojs.qs()` method.\n\n```js\nvar qs = player.qs().parse(window.location.search.substr(1));\n```\n\n## querystring-ish Objects\n\nThe objects returned by the aforementioned API methods have the following methods available:\n\n### `stringify()`\n\nThe general usage of this is to turn an object into a query string:\n\n```js\nqs.stringify({foo: 'bar', bop: [1, 2]}); // \"foo=bar&bop=1&bop=2\"\n```\n\n**Note:** This is also aliased as `encode()`.\n\n### `parse()`\n\nThe general usage of this is to turn a query string into an object:\n\n```js\nqs.parse('foo=bar&bop=1&bop=2'); // {foo: 'bar', bop: [1, 2]}\n```\n\n**Note:** This is also aliased as `decode()`.\n\n### `search`\n\n_This property does not come from [the Rollup plugin][rpnb]!_\n\nThe `search` property is provided by videojs-qs as a convenient way to reach a pre-`parse`ed copy of the `window.location.search` value in the current page context.\n\nFor example, if `window.location.search` is `?foo=bar&bop=1&bop=2`, the `search` property will look like: `{foo: 'bar', bop: [1, 2]}`.\n\n## License\n\nApache-2.0. Copyright (c) Brightcove, Inc.\n\n\n[node-qs]: https://nodejs.org/api/querystring.html\n[rpnb]: https://github.com/calvinmetcalf/rollup-plugin-node-builtins\n[videojs]: http://videojs.com/\n","version":"1.2.1","downloads":21},{"name":"videojs-qualityselector","description":"Simple plugin that displays a dropdown with a list of possible videos based on its resolution, also changes the source when the user selects a desired option","author":{"name":"Emmanuel Alves","email":"manel.pb@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-13T20:05:03.954Z","created":"2016-07-29T21:30:24.512Z","0.0.1":"2016-07-29T21:30:24.512Z","0.0.4":"2018-01-13T20:05:03.954Z"},"readme":"# videojs-qualityselector\n\nSimple plugin that displays a dropdown with a list of possible videos based on its resolution, also changes the source when the user selects a desired option\n\n![alt tag](https://raw.githubusercontent.com/manelpb/videojs-qualityselector/master/screenshot.png)\n\n## Installation\n\n```sh\nnpm install --save videojs-qualityselector\n```\n\n## Usage\n\nTo include videojs-qualityselector on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-qualityselector.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.qualityselector({\n        sources: [\n          { format: 'highres', src: 'http://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_1mb.mp4', type: 'video/mp4'},\n          { format: 'hd1080', src: 'http://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_1mb.mp4', type: 'video/mp4'},\n          { format: 'hd720', src: 'http://www.sample-videos.com/video/mp4/480/big_buck_bunny_480p_1mb.mp4', type: 'video/mp4'},\n          { format: 'large', src: '//vjs.zencdn.net/v/oceans.mp4', type: 'video/mp4'},\n          { format: 'medium', src: 'http://www.sample-videos.com/video/mp4/480/big_buck_bunny_480p_1mb.mp4', type: 'video/mp4'},\n          { format: 'small', src: 'http://www.sample-videos.com/video/mp4/480/big_buck_bunny_480p_1mb.mp4', type: 'video/mp4'},\n          { format: 'auto', src: 'http://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_1mb.mp4', type: 'video/mp4'}\n        ],\n        formats: [\n          { code: 'highres', name: 'High' },\n          { code: 'hd1080', name: '1080p' },\n          { code: 'hd720', name: '720p' },\n          { code: 'large', name: '480p' },\n          { code: 'medium', name: '360p' },\n          { code: 'small', name: '240p' },\n          { code: 'auto', name: 'Auto' }\n        ],\n\n        onFormatSelected: function(format) {\n          console.log(format);\n        }\n      });\n</script>\n```\n\n### Sources\n\nAn array of video sources matching the formats\n\n### Formats\n\nAn array of possible formats, it should contains a code and name\n\n\n## License\n\nMIT. Copyright (c) Emmanuel Alves / http://github.com/manelpb\n\nThanks to http://www.sample-videos.com/ to provide simple example videos in different resolutions\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.4","downloads":90},{"name":"videojs-record","description":"A video.js plugin for recording audio/video/image files.","author":{"name":"Collab"},"keywords":["waveform","audio","video","wavesurfer","videojs","videojs-plugin","player","record","stream","microphone","recorder","RecordRTC","libvorbis.js","vorbis","ogg","mp3","opus"],"license":"MIT","time":{"modified":"2018-01-15T02:52:06.964Z","created":"2015-01-06T20:20:38.870Z","0.2.0":"2015-01-06T20:20:38.870Z","0.3.0":"2015-02-11T11:15:48.006Z","0.4.0":"2015-02-19T17:00:11.250Z","0.5.0":"2015-02-21T00:48:23.781Z","0.6.0":"2015-03-23T22:13:49.270Z","0.7.0":"2015-03-28T19:33:06.445Z","0.8.0":"2015-03-29T23:06:48.105Z","0.8.1":"2015-03-29T23:37:09.434Z","0.8.2":"2015-03-30T16:14:52.111Z","0.8.3":"2015-07-09T21:16:33.883Z","0.8.4":"2015-08-26T23:32:04.485Z","0.9.0":"2015-09-25T13:24:35.211Z","0.9.1":"2015-10-04T20:04:12.136Z","0.9.2":"2015-10-06T08:52:45.949Z","0.9.3":"2015-10-12T20:27:53.438Z","1.0.0":"2015-10-14T20:06:20.497Z","1.0.1":"2015-10-15T13:10:22.353Z","1.0.2":"2015-10-18T22:13:49.775Z","1.0.3":"2015-12-20T23:13:32.642Z","1.1.0":"2016-01-19T14:21:57.705Z","1.2.0":"2016-02-26T23:31:20.686Z","1.3.0":"2016-03-25T16:38:07.199Z","1.4.0":"2016-05-25T21:44:55.702Z","1.5.0":"2016-09-30T17:03:34.201Z","1.5.1":"2016-12-02T16:45:10.311Z","1.5.2":"2017-01-15T04:17:41.297Z","1.6.0":"2017-02-26T02:08:25.282Z","1.6.1":"2017-04-08T22:56:43.875Z","1.6.2":"2017-05-27T01:31:00.261Z","1.7.0":"2017-07-25T12:29:13.150Z","1.7.1":"2017-09-23T20:20:16.064Z","2.0.0":"2017-10-05T21:36:39.680Z","2.0.1":"2017-11-10T15:06:10.292Z","2.0.2":"2017-11-15T22:26:24.065Z","2.0.3":"2017-11-30T18:50:20.285Z","2.0.4":"2017-12-13T17:20:49.683Z","2.0.5":"2017-12-30T18:41:43.166Z","2.0.6":"2018-01-15T02:52:06.964Z"},"readme":"Video.js Record\n===============\n\nVideo.js plugin for recording audio/video/image files.\n\n![Screenshot](examples/assets/img/screenshot.png?raw=true \"Screenshot\")\n\n[![npm version](https://img.shields.io/npm/v/videojs-record.svg?style=flat)](https://www.npmjs.com/package/videojs-record)\n[![npm](https://img.shields.io/npm/dm/videojs-record.svg)](https://github.com/collab-project/videojs-record/releases)\n[![License](https://img.shields.io/npm/l/videojs-record.svg)](LICENSE)\n[![Build Status](https://travis-ci.org/collab-project/videojs-record.svg?branch=master)](https://travis-ci.org/collab-project/videojs-record)\n\nTable of Contents\n-----------------\n\n- [Installation](#installation)\n- [Dependencies](#dependencies)\n- [Usage](#usage)\n  - [Audio/video/image](#audiovideoimage)\n  - [Audio-only](#audio-only)\n- [Examples](#examples)\n- [Options](#options)\n- [Methods](#methods)\n- [Events](#events)\n- [Media Constraints](#media-constraints)\n- [Get recorded data](#get-recorded-data)\n  - [Save data](#save-data)\n  - [Timestamps](#timestamps)\n  - [Upload data](#upload-data)\n- [Controlling the input and output devices](#controlling-the-input-and-output-devices)\n- [Responsive layout](#responsive-layout)\n- [Customizing controls](#customizing-controls)\n- [Other audio libraries](#other-audio-libraries)\n- [Localization](#localization)\n- [Using with React](#using-with-react)\n- [More features using other plugins](#more-features-using-other-plugins)\n- [Development](#development)\n- [Font](#font)\n- [License](#license)\n- [Donate](#donate)\n\nInstallation\n------------\n\nUse [npm](https://www.npmjs.org) (`npm install videojs-record`) to install the plugin\nor [download](https://github.com/collab-project/videojs-record/releases) the library\nand dependencies elsewhere. If you want to try the examples, check\n[these instructions below](#examples).\n\nSince v2.0 this plugin is compatible with video.js 6.0 and videojs-wavesurfer.js 2.0 or\nnewer. If you want to use this plugin with an older version, check the\n[archived releases](https://github.com/collab-project/videojs-record/releases?after=1.7.1)\nfor a 1.7.x or older release.\n\nTake a look at the [changelog](./CHANGES.md) when upgrading from a previous\nversion of videojs-record.\n\nDependencies\n------------\n\nThe plugin has the following mandatory dependencies:\n\n- [Video.js](https://github.com/videojs/video.js) - HTML5 media player that provides the user interface.\n- [webrtc-adapter](https://github.com/webrtc/adapter) - Provides cross-browser support for getUserMedia and other browser APIs used in this plugin.\n\nWhen recording audio and/or video you also need:\n\n- [RecordRTC.js](https://github.com/muaz-khan/RecordRTC) - Adds support for audio/video/GIF recording.\n\nAnd when recording audio-only, the following dependencies are also required (\nto visualize the audio waveform):\n\n- [wavesurfer.js](https://github.com/katspaugh/wavesurfer.js) - Provides a navigable waveform for audio files. Comes with a [microphone plugin](http://wavesurfer-js.org/plugins/microphone.html) used for realtime visualization of the microphone audio signal.\n- [videojs-wavesurfer](https://github.com/collab-project/videojs-wavesurfer) - Transforms Video.js into an audio-player.\n\nOptional dependencies when using [other audio libraries](#other-audio-libraries) (note that most of these audio codecs are already available in most modern browsers):\n\n- [libvorbis.js](https://github.com/collab-project/videojs-record/wiki/Plugins#libvorbisjs) - Converts PCM audio data to compressed Ogg Vorbis audio, resulting a smaller audio files with similar quality.\n- [lamejs](https://github.com/collab-project/videojs-record/wiki/Plugins#lamejs) - Converts PCM audio data to compressed MP3 audio.\n- [opus-recorder](https://github.com/collab-project/videojs-record/wiki/Plugins#opus-recorder) - Converts the output of Web Audio API nodes as Opus and exports it into an Ogg container.\n- [recorder.js](https://github.com/collab-project/videojs-record/wiki/Plugins#recorderjs) - A plugin for recording the PCM output of Web Audio API nodes.\n\nUsage\n-----\n\nStart by including the video.js stylesheet and library:\n\n```html\n<link href=\"video-js.min.css\" rel=\"stylesheet\">\n<script src=\"video.min.js\"></script>\n```\n\nIf you're going to record audio and/or video you need to include RecordRTC as well:\n\n```html\n<script src=\"RecordRTC.js\"></script>\n```\n\nThe videojs-record plugin automatically registers itself when the script\nis included on the page:\n\n```html\n<script src=\"videojs.record.js\"></script>\n```\n\nAdd the extra stylesheet for the plugin that includes a\n[custom font](font) with additional icons:\n\n```html\n<link href=\"videojs.record.css\" rel=\"stylesheet\">\n```\n\n### Audio/video/image\n\nWhen recording either audio/video, video-only, animated GIF or a single image,\ninclude a `video` element:\n\n```html\n<video id=\"myVideo\" class=\"video-js vjs-default-skin\"></video>\n```\n\n### Audio-only\n\n![Audio-only screenshot](examples/assets/img/audio-only.png?raw=true \"Audio-only screenshot\")\n\nWhen recording audio-only, also include the wavesurfer.js library and\nthe videojs-wavesurfer and microphone plugins. Make sure to place this before\nthe `videojs.record.js` script.\n\n```html\n<script src=\"wavesurfer.min.js\"></script>\n<script src=\"wavesurfer.microphone.min.js\"></script>\n<script src=\"videojs.wavesurfer.js\"></script>\n```\n\nAnd define an `audio` element:\n\n```html\n<audio id=\"myAudio\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nThere is also support for [additional audio libraries](#other-audio-libraries)\nthat allows you to record audio with alternative codecs (that otherwise might not\nbe supported in the browser) like Ogg Vorbis, MP3 and Opus.\n\nExamples\n--------\n\n- audio/video ([demo](https://collab-project.github.io/videojs-record/examples/audio-video.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/audio-video.html))\n- video-only ([demo](https://collab-project.github.io/videojs-record/examples/video-only.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/video-only.html))\n- audio-only example ([demo](https://collab-project.github.io/videojs-record/examples/audio-only.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/audio-only.html))\n- image ([demo](https://collab-project.github.io/videojs-record/examples/image-only.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/image-only.html))\n- animated GIF ([demo](https://collab-project.github.io/videojs-record/examples/animated-gif.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/animated-gif.html))\n\nTo try out the examples locally, download the [zipfile](https://github.com/collab-project/videojs-record/archive/master.zip)\nand unpack it, or checkout the repository using Git:\n\n```\ngit clone https://github.com/collab-project/videojs-record.git\n```\n\nAnd install the dependencies using npm:\n\n```\ncd videojs-record\nnpm install\n```\n\nBuild the library and assets once:\n\n```\nnpm run build\n```\n\nAnd start the local webserver:\n\n```\nnpm run start\n```\n\nAnd open http://localhost:9999/examples/audio-video.html in a browser.\n\nOptions\n-------\n\nConfigure the player using the video.js\n[options](https://github.com/videojs/video.js/blob/master/docs/guides/options.md),\nand enable the plugin by adding a `record` configuration to `plugins`. For\nexample:\n\n```javascript\nvar player = videojs('myVideo', {\n    // video.js options\n    controls: true,\n    loop: false,\n    fluid: false,\n    width: 320,\n    height: 240,\n    plugins: {\n        // videojs-record plugin options\n        record: {\n            image: false,\n            audio: false,\n            video: true,\n            maxLength: 5,\n            debug: true\n        }\n    }\n});\n```\n\nThe available options for this plugin are:\n\n| Option | Type | Default | Description |\n| --- | --- | --- | --- |\n| `image` | boolean or object | `false` | Create single snapshot image. |\n| `audio` | boolean or object | `false` | Include audio in the recorded clip. |\n| `video` | boolean or object | `false` | Include video in the recorded clip. |\n| `animation` | boolean or object | `false` | Animated GIF without audio. |\n| `debug` | boolean | `false` | Enables console log messages during recording for debugging purposes. |\n| `maxLength` | float | `10` | Maximum length of the recorded clip. |\n| `timeSlice` | float | `0` | Accepts numbers in milliseconds; use this to force intervals-based blobs and receive [timestamps](#timestamps) during recording by listening for the `timestamp` event. |\n| `frameWidth` | float | `320` | Width of the recorded video frames. Use [media constraints](#media-constraints) to change the camera resolution width. |\n| `frameHeight` | float | `240` | Height of the recorded video frames. Use [media constraints](#media-constraints) to change the camera height. |\n| `videoMimeType` | string | `'video/webm'` | The mime type for the video recorder. Use `video/mp4` (Firefox) or `video/webm;codecs=H264` (Chrome 52 and newer) for MP4. A full list of supported mime-types in the Chrome browser is listed [here](https://cs.chromium.org/chromium/src/third_party/WebKit/LayoutTests/fast/mediarecorder/MediaRecorder-isTypeSupported.html). |\n| `videoRecorderType` | string or function | `'auto'` | Video recorder type to use. This allows you to specify an alternative recorder class, e.g. `WhammyRecorder`. Defaults to `auto` which let's recordrtc specify the best available recorder type. |\n| `audioEngine` | string | `'recordrtc'` | Audio recording library/plugin to use. Legal values are `recordrtc`, `libvorbis.js`, `lamejs`, `opus-recorder` and `recorder.js`. |\n| `audioRecorderType` | string or function | `'auto'` | Audio recorder type to use. This allows you to specify an alternative recorder class, e.g. `StereoAudioRecorder`. Defaults to `auto` which let's recordrtc specify the best available recorder type. Currently this setting is only used with the `recordrtc` `audioEngine`. |\n| `audioMimeType` | string | `'auto'` | The mime type for the audio recorder. Defaults to `auto` which will pick the best option available in the browser (e.g. either `audio/wav`, `audio/ogg` or `audio/webm`). A full list of supported mime-types in the Chrome browser is listed [here](https://cs.chromium.org/chromium/src/third_party/WebKit/LayoutTests/fast/mediarecorder/MediaRecorder-isTypeSupported.html).|\n| `audioBufferSize` | float | `4096` | The size of the audio buffer (in sample-frames per second). Legal values: 0, 256, 512, 1024, 2048, 4096, 8192 and 16384. |\n| `audioSampleRate` | float | `44100` | The audio sample rate (in sample-frames per second) at which the `AudioContext` handles audio. Legal values are in the range of 22050 to 96000. |\n| `audioChannels` | float | `2` | Number of audio channels. Using a single channel results in a smaller filesize. |\n| `audioWorkerURL` | string | `''` | URL for the audio worker, for example: `/opus-recorder/build/encoderWorker.min.js`. Currently only used for opus-recorder and lamejs plugins. |\n| `animationFrameRate` | float | `200` | Frame rate for animated GIF (in frames per second). |\n| `animationQuality` | float | `10` | Sets quality of color quantization (conversion of images to the maximum 256 colors allowed by the GIF specification). Lower values (minimum = 1) produce better colors, but slow processing significantly. The default produces good color mapping at reasonable speeds. Values greater than 20 do not yield significant improvements in speed. |\n\nMethods\n-------\n\nMethods for this plugin documented below are available using the `record` method\nof the video.js player instance. For example:\n\n```javascript\nplayer.record().destroy();\n```\n\n| Method | Description |\n| --- | --- |\n| `isRecording` | Returns a boolean indicating whether recording is active or not. |\n| `getRecordType` | Get recorder type as string. Either `image_only`, `animation`, `audio_only`, `video_only` or `audio_video`. |\n| `saveAs` | Show save as dialog in browser so the user can [store the recorded media locally](#save-data). |\n| `destroy` | Destroys the recorder instance and children (including the video.js player). |\n| `reset` | Not as destructive as `destroy`: use this if you want to reset the player interface and recorder state. |\n| `stopDevice` | Stop the recording and the active audio and/or video device(s). |\n| `getDevice` | Start the audio and/or video device(s). |\n| `getDuration` | Get the length of the recorded stream in seconds. Returns 0 if no recording is available (yet). |\n| `getCurrentTime` | Get the current time of the recorded stream during playback. Returns 0 if no recording is available (yet). |\n| `enumerateDevices` | [Get async list of media input and output devices](#controlling-the-input-and-output-devices) available on the system. |\n| `start` | Start recording. |\n| `stop` | Stop recording. |\n| `pause` | Pause recording. |\n| `resume` | Resume recording. |\n\nEvents\n------\n\nPlugin events that are available on the video.js player instance. For example:\n\n```javascript\nplayer.on('startRecord', function() {\n    console.log('started recording!');\n});\n```\n\n| Event | Description |\n| --- | --- |\n| `deviceReady` | The webcam and/or microphone is ready to use. |\n| `deviceError` | User doesn't allow the browser to access the webcam and/or microphone. Check `player.deviceErrorCode` for the specific [error code](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia#errorCallback). |\n| `startRecord` | User pressed the record or camera button to start recording. |\n| `progressRecord` | Fires continuously during recording (until recording is stopped or paused). |\n| `stopRecord` | User pressed the stop button to stop recording. |\n| `timestamp` | Fires continuously during recording [whenever a new timestamp is available](#timestamps). Only fires if the `timeSlice` option is set. |\n| `finishRecord` | The recorded stream or image is available. [Check the](#get-recorded-data) `player.recordedData` object for the recorded data. |\n| `enumerateReady` | `enumerateDevices` returned the devices successfully. The list of devices is stored in the `player.record().devices` array. |\n| `enumerateError` | An error occured after calling `enumerateDevices`. Check the `player.enumerateErrorCode` property for an description of the error. |\n\nMedia Constraints\n-----------------\n\n[Media stream constraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Parameters)\nallow you to specify the types of media to request, along with any requirements\nfor each type.\n\nThe following example shows how to change the camera resolution to 1280 by 720\npixels:\n\n```javascript\nvar player = videojs('myVideo', {\n    controls: true,\n    loop: false,\n    // dimensions of video.js player\n    fluid: false,\n    width: 1280,\n    height: 720,\n    plugins: {\n        record: {\n            maxLength: 5,\n            debug: true,\n            audio: false,\n            video: {\n                // video constraints: set resolution of camera\n                mandatory: {\n                    minWidth: 1280,\n                    minHeight: 720,\n                },\n            },\n            // dimensions of captured video frames\n            frameWidth: 1280,\n            frameHeight: 720\n        }\n    }\n});\n```\n\nGet recorded data\n-----------------\n\nListen for the `finishRecord` event and obtain the recorded data from the\n`player.recordedData` object for further processing:\n\n```javascript\n// user completed recording and stream is available\nplayer.on('finishRecord', function() {\n    // the recordedData object contains the stream data that\n    // can be downloaded by the user, stored on server etc.\n    console.log('finished recording: ', player.recordedData);\n});\n```\n\n### Save data\n\nUse the `saveAs` method to show a 'Save as' browser dialog where the user can\nchoose the storage location for the recorded data. It accepts a `name` object that\ncontains a mapping between the media type and the filename. For example:\n\n```javascript\nplayer.on('finishRecord', function() {\n    // show save as dialog\n    player.record().saveAs({'video': 'my-video-file-name.webm'});\n});\n```\n\n### Timestamps\n\nIt's also possible to get data during recording with specific time-intervals. This could\nbe useful in scenarios where you're recording a long clip and planning to upload\nrecorded blobs to a server periodically, where the clip is stiched it together.\n\nEnable the event with the `timeSlice` option:\n\n```javascript\nrecord: {\n    audio: false,\n    video: true,\n    maxLength: 5,\n    debug: true,\n    // fire the timestamp event every 2 seconds\n    timeSlice: 2000\n}\n```\n\nAnd listen for the `timestamp` event. For example:\n\n```javascript\n// monitor stream data during recording\nplayer.on('timestamp', function() {\n    // timestamps\n    console.log('current timestamp: ', player.currentTimestamp);\n    console.log('all timestamps: ', player.allTimestamps);\n\n    // stream data\n    console.log('array of blobs: ', player.recordedData);\n    // or construct a single blob:\n    // var blob = new Blob(blobs, {\n    //     type: 'video/webm'\n    // });\n});\n```\n\n### Upload data\n\nThe example below shows how to 'stream' upload recorded data segments to a server\nusing the [jQuery](http://jquery.com/) library and the `timestamp` event:\n\n```javascript\nvar segmentNumber = 0;\n\nplayer.on('timestamp', function() {\n    if (player.recordedData && player.recordedData.length > 0) {\n        var binaryData = player.recordedData[player.recordedData.length - 1];\n\n        segmentNumber++;\n\n        var formData = new FormData();\n        formData.append('SegmentNumber', segmentNumber);\n        formData.append('Data', binaryData);\n\n        $.ajax({\n            url: '/api/Test',\n            method: 'POST',\n            data: formData,\n            cache: false,\n            processData: false,\n            contentType: false,\n            success: function (res) {\n                console.log(\"segment: \" + segmentNumber);\n            }\n        });\n    }\n});\n```\n\nCheck the [jquery.fileupload](https://github.com/collab-project/videojs-record/blob/master/examples/upload/jquery.fileupload.html) or\n[Fine Uploader](https://github.com/collab-project/videojs-record/blob/master/examples/upload/fine-uploader.html)\nexamples on how to upload the data to a server using these libraries.\n\nControlling the input and output devices\n----------------------------------------\n\nUse `enumerateDevices` to get a list of the available input and output devices\non the user's system, e.g. `FaceTime HD-camera`, `default (Built-in microphone)`\netc.\n\nCheck out the `enumerateDevices` example\n([demo](https://collab-project.github.io/videojs-record/examples/enumerate-devices.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/enumerate-devices.html)).\n\nAfter you aquired the device id (called `deviceId` in the example below) specify it in the player configuration\nusing [constraints](#media-constraints):\n\n```javascript\nrecord: {\n    maxLength: 20,\n    debug: true,\n    audio: true,\n    video: {\n        // video constraints: use preset device\n        optional: [{sourceId: deviceId}]\n    },\n}\n```\n\nResponsive layout\n-----------------\n\nThe `fluid` option for video.js will resize the player according to the size\nof the window.\n\nConfigure the player; enable the video.js `'fluid'` option:\n\n```javascript\nfluid: true\n```\n\nCustomizing controls\n--------------------\n\nTo disable and hide specific controls, use the video.js `controlBar`\noption:\n\n```javascript\ncontrolBar: {\n    // hide fullscreen and volume controls\n    fullscreenToggle: false,\n    volumePanel: false\n},\n```\n\nOther audio libraries\n---------------------\n\nRecordRTC is the default recording library but there is also support\nfor other audio libraries. Check the\n[plugins](https://github.com/collab-project/videojs-record/wiki/Plugins) wiki\npage for more information.\n\nLocalization\n------------\n\nThis plugin supports multiple languages. Each language has it's own file\n(found in the `lang` directory) that contains the translated text.\n\nUsing a different language, for example Dutch (`nl`), is done by including\nthe plugin's language file and the Video.js language file:\n\n```html\n<script src=\"videojs-record/dist/lang/nl.js\"></script>\n<script src=\"video.js/dist/lang/nl.js\"></script>\n```\n\nAnd setting the Video.js player's `language` option:\n\n```javascript\nlanguage: \"nl\"\n```\n\nAdding support for an additional language is done by adding a new file with\na filename that consists of the countrycode and the `.json` extension, eg.\n`fr.json`. The [build script](#development) compiles the JSON into a usable\nlanguage file, eg. `fr.js`. Check the Video.js wiki for a\n[list of supported countrycodes](https://github.com/videojs/video.js/blob/master/docs/guides/languages.md#language-codes).\nPull requests to add more languages to this plugin are always welcome!\nYou can also help out using the Transifex [online translation tool](https://www.transifex.com/collab/videojs-record/).\n\n\nUsing with React\n----------------\n\nThe `react` example shows how to integrate this plugin in a [React](https://reactjs.org) component\n([demo](https://collab-project.github.io/videojs-record/examples/react/index.html) or\n[source](https://github.com/collab-project/videojs-record/blob/master/examples/react/index.html)).\n\n\nMore features using other plugins\n---------------------------------\n\nThe Video.js community created\n[lots of plugins](https://github.com/videojs/video.js/wiki/Plugins)\nthat can be used to enhance the player's functionality.\n\nDevelopment\n-----------\n\nInstall dependencies using npm:\n\n```\nnpm install\n```\n\nBuild a minified version:\n\n```\nnpm run build\n```\n\nGenerated files are placed in the `dist` directory.\n\nDuring development:\n\n```\nnpm run start\n```\n\nThis will watch the source directory and rebuild when any changes\nare detected. It will also serve the files on http://127.0.0.1:9999.\n\nAll commands for development are listed in the `package.json` file and\nare run using:\n\n```\nnpm run <command>\n```\n\nFont\n----\n\nCheck the [the font readme](font/README.md) for more information.\n\nLicense\n-------\n\nThis work is licensed under the [MIT License](LICENSE).\n\nDonate\n------\n\nPlease consider donating if you like this project. Bitcoin is accepted\nand can be sent to `3PmXCqUggtq7KUWPbpN8WhMnb1Mfb1jbq8`.\n","version":"2.0.6","downloads":1135},{"name":"videojs-related","description":"Load related videos after clip is finished.","author":{"name":"Gustaf Elbander","email":"gustaf.elbander@flownetwork.se"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-12-15T15:05:06.060Z","created":"2016-12-15T15:05:06.060Z","0.0.1":"2016-12-15T15:05:06.060Z"},"readme":"# videojs-related\n\nLoad related videos after clip is finished.\nNot working properly, just a draft sofar.\n\n## Installation\n\n```sh\nnpm install --save videojs-related\n```\n\n## Usage\n\nTo include videojs-related on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-related.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.on('ended', function(){\n    // build queryparam\n    var query = 'somekey=value1&otherkey=value2';\n\n    this.related.loadSource(query);\n  });\n\n  // When response is fetched create the wall\n  // TODO: Could be removed.\n  player.on('related:fetched', function(event, data) {\n    /**\n     * Map your response accordingly.\n     * data.response = {[\n     *     duration: '00:00:11',\n     *     image: 'http://example.com/image.jpg',\n     *     title: 'The best clip',\n     *     url: 'http://somesource/index.m3u8'\n     * ],}\n     */\n    this.related.createWall(data.response)\n  });\n\n  player.related({\n    base_url: 'http://example.com',\n    gotoUrl: false\n  });\n</script>\n```\n\n## License\n\nMIT. Copyright (c) Gustaf Elbander &lt;gustaf.elbander@flownetwork.se&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.1","downloads":10},{"name":"videojs-replay","description":"Adds a replay button to video.js player","author":{"name":"Derk-Jan Hartman"},"keywords":["videojs","videojs-plugin"],"license":"(MIT OR Apache-2.0)","time":{"modified":"2016-05-03T17:47:24.125Z","created":"2016-05-03T14:30:52.134Z","1.0.0":"2016-05-03T14:30:52.134Z","1.1.0":"2016-05-03T17:47:24.125Z"},"readme":"# videojs-replay\n\n[![Current version](https://img.shields.io/npm/v/videojs-replay.svg)](https://www.npmjs.com/package/videojs-replay) [![Dependencies](https://img.shields.io/versioneye/d/nodejs/videojs-replay.svg)](https://www.versioneye.com/nodejs/videojs-replay)\n\nA [Video.js](https://www.videojs.com) plugin that turns the play button into a replay button at the end of playback\n\n## Installation\n\n```sh\nnpm install --save videojs-replay\n```\n\n## Usage\n\nTo include videojs-replay on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-replay.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.replayButton();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-replay via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-replay');\n\nvar player = videojs('my-video');\n\nplayer.replayButton();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-replay'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.replayButton();\n});\n```\n\n## License\n\nMIT or Apache-2.0. Copyright (c) Derk-Jan Hartman\n\n\n[videojs]: http://videojs.com/\n","version":"1.1.0","downloads":141},{"name":"videojs-resize","description":"Detects videojs player resize and adds/removes  classes","author":{"name":"Yanko Shterev","email":"yanko@streamingvideoprovider.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-11-09T09:59:58.642Z","created":"2016-11-08T13:35:09.486Z","0.0.1":"2016-11-08T13:35:09.486Z","1.0.0":"2016-11-08T14:38:57.503Z","1.0.1":"2016-11-09T09:59:58.642Z"},"readme":"# videojs-resize\n\nDetects videojs player resize and adds/removes classes.\n\nResize detection inspired by [Daniel Buchner's post](http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/).\n\n## Installation\n\n```sh\nnpm install --save videojs-resize\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-resize\n```\n\n## Options\nYou can pass breakpoints as options to the plugin. These are the defaults.\n\nThe class is added if `player width < breakpoint key`.\n\n```\nplayer.resize({\n  breakpoints: {\n    300: 'vjs-size-tiny',\n    400: 'vjs-size-small'\n  }\n});\n```\n\n## Usage\n\nTo include videojs-resize on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-resize.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.resize();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-resize via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-resize');\n\nvar player = videojs('my-video');\n\nplayer.resize();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-resize'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.resize();\n});\n```\n","version":"1.0.1","downloads":18},{"name":"videojs-resolution-switcher","description":"Resolution switcher for video.js 5","author":{"name":"Kasper Moskwiak","email":"kasper.moskwiak@gmail.com","url":"http://kspr.pl"},"keywords":["videojs","html5","flash","video","player","resolution","source","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-06-01T17:06:23.917Z","created":"2015-09-29T18:59:48.312Z","0.1.0":"2015-09-29T18:59:48.312Z","0.1.1":"2015-09-29T19:06:07.271Z","0.1.2":"2015-10-17T23:04:26.258Z","0.1.3":"2015-10-28T19:51:17.758Z","0.1.4":"2015-10-29T20:21:53.176Z","0.1.5":"2015-10-31T11:29:33.071Z","0.2.0":"2015-10-31T20:09:10.787Z","0.2.1":"2015-11-08T22:06:38.290Z","0.2.2":"2015-11-09T08:30:56.077Z","0.2.3":"2015-12-19T17:51:05.379Z","0.3.0":"2015-12-19T22:48:11.196Z","0.3.1":"2015-12-28T19:53:38.099Z","0.3.2":"2016-02-08T10:43:08.343Z","0.3.3":"2016-03-13T18:20:24.896Z","0.3.4":"2016-03-13T19:06:39.647Z","0.4.0":"2016-03-13T20:13:20.038Z","0.4.1":"2016-03-13T20:23:03.913Z","0.4.2":"2016-04-05T17:22:02.609Z"},"readme":"# Video.js Resolution Switcher [![Build Status](https://travis-ci.org/kmoskwiak/videojs-resolution-switcher.svg?branch=master)](https://travis-ci.org/kmoskwiak/videojs-resolution-switcher) \n\nResolution switcher for [video.js v5](https://github.com/videojs/video.js)\n\n## Example\n\n[Working examples](examples) of the plugin you can check out if you're having trouble. Or check out this [demo](https://kmoskwiak.github.io/videojs-resolution-switcher/).\n\n## Getting Started\n\nInstall plugin with\n\n**npm**\n```\nnpm i videojs-resolution-switcher\n```\n\nor **bower**\n```\nbower install videojs-resolution-switcher\n```\n\n\n### Setup sources dynamically:\n\n```html\n<video id='video' class=\"video-js vjs-default-skin\"></video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-resolution-switcher.js\"></script>\n<script>\n  videojs('video', {\n    controls: true,\n    plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'high',\n          dynamicLabel: true\n        }\n      }\n  }, function(){\n  \n    // Add dynamically sources via updateSrc method\n    player.updateSrc([\n        {\n          src: 'http://media.xiph.org/mango/tears_of_steel_1080p.webm',\n          type: 'video/webm',\n          label: '360'\n        },\n        {\n          src: 'http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4',\n          type: 'video/mp4',\n          label: '720'\n        }\n      ])\n\n      player.on('resolutionchange', function(){\n        console.info('Source changed to %s', player.src())\n      })\n      \n  })\n</script>\n```\n\n### Or use `<source>` tags:\n\n```html\n\n<video id=\"video\" class=\"video-js vjs-default-skin\" width=\"1000\" controls data-setup='{}'>\n   <source src=\"http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4\" type='video/mp4' label='SD' />\n   <source src=\"http://media.xiph.org/mango/tears_of_steel_1080p.webm\" type='video/webm' label='HD'/>\n</video>\n<script>\n  videojs('video').videoJsResolutionSwitcher()\n</script>\n\n```\n\n\n### YouTube tech\n\nYouTube tech form https://github.com/eXon/videojs-youtube\n\n```html\n<video id='video' class=\"video-js vjs-default-skin\"></video>\n<script src=\"../lib/videojs-resolution-switcher.js\"></script>\n<script>\n\tvideojs('video', {\n\t\tcontrols: true,\n\t\ttechOrder:  [\"youtube\"],\n\t\tsources: [{ \"type\": \"video/youtube\", \"src\": \"https://www.youtube.com/watch?v=iD_MyDbP_ZE\"}],\n\t\tplugins: {\n\t\t\tvideoJsResolutionSwitcher: {\n\t\t\t\tdefault: 'low',\n\t\t\t\tdynamicLabel: true\n\t\t\t}\n\t\t}\n\t}, function(){\n\t\tvar player = this;\n\t\tplayer.on('resolutionchange', function(){\n\t\t\tconsole.info('Source changed')\n\t\t})\n\t});\n\n</script>\n\n```\n\n### Flash tech\n\nWhen using flash tech `preload=\"auto\"` is required.\n\n## Source options\n\nSources can passed to player using `updateSrc` method or `<source>` tag as shown above. Avalible options for each source are:\n* label - `String` (required) is shown in menu (ex. 'SD' or '360p')\n* res - `Number` is resolution of video used for sorting (ex. 360 or 1080)\n\n## Plugin options\n\nYou can pass options to plugin like this:\n\n```javascript\n\nvideojs('video', {\n      controls: true,\n      muted: true,\n      width: 1000,\n      plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'low'\n        }\n      }\n    }, function(){\n      // this is player\n    })\n```\n### Avalible options:\n* default - `{Number}|'low'|'high'` - default resolution. If any `Number` is passed plugin will try to choose source based on `res` parameter. If `low` or `high` is passed, plugin will choose respectively worse or best resolution (if `res` parameter is specified). If `res` parameter is not specified plugin assumes that sources array is sorted from best to worse.\n* dynamicLabel - `{Boolean}` - if `true` current label will be displayed in control bar. By default gear icon is displayed.\n* customSourcePicker - `{Function}` - custom function for selecting source.\n\n\n## Methods\n\n\n### updateSrc([source])\nReturns video.js player object if used as setter. If `source` is not passed it acts like [player.src()](http://docs.videojs.com/docs/api/player.html#Methodssrc)\n```javascript\n\n// Update video sources\nplayer.updateSrc([\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'HD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: '4k' }\n])\n\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| source| array| no | array of sources |\n\n### currentResolution([label], [customSourcePicker])\nIf used as getter returns current resolution object:\n```javascript\n  {\n    label: 'SD', // current label\n    sources: [\n      { type: \"video/webm\", src: \"http://www.example.com/path/to/video.webm\", label: 'SD' },\n      { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' }\n    ] // array of sources with current label\n  }\n```\n\nIf used as setter returns video.js player object.\n\n\n```javascript\n\n// Get current resolution\nplayer.currentResolution(); // returns object {label '', sources: []}\n\n// Set resolution\nplayer.currentResolution('SD'); // returns videojs player object\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| label| string| no | label name |\n| customSourcePicker | function | no | cutom function to choose source |\n\n#### customSourcePicker\nIf there is more than one source with the same label, player will choose source automatically. This behavior can be changed if `customSourcePicker` is passed.\n\n`customSourcePicker` must return `player` object.\n```javascript\nplayer.currentResolution('SD', function(_player, _sources, _label){\n  return _player.src(_sources[0]); \\\\ Always select first source in array\n});\n```\n`customSourcePicker` accepst 3 arguments.\n\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| player| Object | yes | videojs player object |\n| sources | Array | no | array of sources |\n| label | String | no | name of label |\n\n`customSourcePicker` may be passed in options when player is initialized:\n```javascript\n\nvar myCustomSrcPicker = function(_p, _s, _l){\n  // select any source you want\n  return _p.src(selectedSource);\n}\n\nvideojs('video', {\n      controls: true,\n      muted: true,\n      width: 1000,\n      plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'low',\n          customSourcePicker: myCustomSrcPicker\n        }\n      }\n    }, function(){\n      // this is player\n    })\n```\n\n\n### getGroupedSrc()\nReturns sources grouped by label, resolution and type.\n\n\n## Events\n\n### resolutionchange `EVENT`\n\n> Fired when resolution is changed\n","version":"0.4.2","downloads":3240},{"name":"videojs-resolution-switcher-v6","description":"Resolution switcher for video.js 5","author":{"name":"Kasper Moskwiak","email":"kasper.moskwiak@gmail.com","url":"http://kspr.pl"},"keywords":["videojs","html5","flash","video","player","resolution","source","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-10-02T10:30:16.080Z","created":"2017-09-07T08:59:08.614Z","0.4.2":"2017-09-07T08:59:08.614Z","0.5.0":"2017-09-07T10:03:09.562Z","0.6.0":"2017-10-02T10:30:16.080Z"},"readme":"# Video.js Resolution Switcher [![Build Status](https://travis-ci.org/kmoskwiak/videojs-resolution-switcher.svg?branch=master)](https://travis-ci.org/kmoskwiak/videojs-resolution-switcher) \n\nResolution switcher for [video.js v5](https://github.com/videojs/video.js)\n\n## Example\n\n[Working examples](examples) of the plugin you can check out if you're having trouble. Or check out this [demo](https://kmoskwiak.github.io/videojs-resolution-switcher/).\n\n## Getting Started\n\nInstall plugin with\n\n**npm**\n```\nnpm i videojs-resolution-switcher\n```\n\nor **bower**\n```\nbower install videojs-resolution-switcher\n```\n\n\n### Setup sources dynamically:\n\n```html\n<video id='video' class=\"video-js vjs-default-skin\"></video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-resolution-switcher.js\"></script>\n<script>\n  videojs('video', {\n    controls: true,\n    plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'high',\n          dynamicLabel: true\n        }\n      }\n  }, function(){\n  \n    // Add dynamically sources via updateSrc method\n    player.updateSrc([\n        {\n          src: 'http://media.xiph.org/mango/tears_of_steel_1080p.webm',\n          type: 'video/webm',\n          label: '360'\n        },\n        {\n          src: 'http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4',\n          type: 'video/mp4',\n          label: '720'\n        }\n      ])\n\n      player.on('resolutionchange', function(){\n        console.info('Source changed to %s', player.src())\n      })\n      \n  })\n</script>\n```\n\n### Or use `<source>` tags:\n\n```html\n\n<video id=\"video\" class=\"video-js vjs-default-skin\" width=\"1000\" controls data-setup='{}'>\n   <source src=\"http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4\" type='video/mp4' label='SD' />\n   <source src=\"http://media.xiph.org/mango/tears_of_steel_1080p.webm\" type='video/webm' label='HD'/>\n</video>\n<script>\n  videojs('video').videoJsResolutionSwitcher()\n</script>\n\n```\n\n\n### YouTube tech\n\nYouTube tech form https://github.com/eXon/videojs-youtube\n\n```html\n<video id='video' class=\"video-js vjs-default-skin\"></video>\n<script src=\"../lib/videojs-resolution-switcher.js\"></script>\n<script>\n\tvideojs('video', {\n\t\tcontrols: true,\n\t\ttechOrder:  [\"youtube\"],\n\t\tsources: [{ \"type\": \"video/youtube\", \"src\": \"https://www.youtube.com/watch?v=iD_MyDbP_ZE\"}],\n\t\tplugins: {\n\t\t\tvideoJsResolutionSwitcher: {\n\t\t\t\tdefault: 'low',\n\t\t\t\tdynamicLabel: true\n\t\t\t}\n\t\t}\n\t}, function(){\n\t\tvar player = this;\n\t\tplayer.on('resolutionchange', function(){\n\t\t\tconsole.info('Source changed')\n\t\t})\n\t});\n\n</script>\n\n```\n\n### Flash tech\n\nWhen using flash tech `preload=\"auto\"` is required.\n\n## Source options\n\nSources can passed to player using `updateSrc` method or `<source>` tag as shown above. Avalible options for each source are:\n* label - `String` (required) is shown in menu (ex. 'SD' or '360p')\n* res - `Number` is resolution of video used for sorting (ex. 360 or 1080)\n\n## Plugin options\n\nYou can pass options to plugin like this:\n\n```javascript\n\nvideojs('video', {\n      controls: true,\n      muted: true,\n      width: 1000,\n      plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'low'\n        }\n      }\n    }, function(){\n      // this is player\n    })\n```\n### Avalible options:\n* default - `{Number}|'low'|'high'` - default resolution. If any `Number` is passed plugin will try to choose source based on `res` parameter. If `low` or `high` is passed, plugin will choose respectively worse or best resolution (if `res` parameter is specified). If `res` parameter is not specified plugin assumes that sources array is sorted from best to worse.\n* dynamicLabel - `{Boolean}` - if `true` current label will be displayed in control bar. By default gear icon is displayed.\n* customSourcePicker - `{Function}` - custom function for selecting source.\n\n\n## Methods\n\n\n### updateSrc([source])\nReturns video.js player object if used as setter. If `source` is not passed it acts like [player.src()](http://docs.videojs.com/docs/api/player.html#Methodssrc)\n```javascript\n\n// Update video sources\nplayer.updateSrc([\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'HD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: '4k' }\n])\n\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| source| array| no | array of sources |\n\n### currentResolution([label], [customSourcePicker])\nIf used as getter returns current resolution object:\n```javascript\n  {\n    label: 'SD', // current label\n    sources: [\n      { type: \"video/webm\", src: \"http://www.example.com/path/to/video.webm\", label: 'SD' },\n      { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' }\n    ] // array of sources with current label\n  }\n```\n\nIf used as setter returns video.js player object.\n\n\n```javascript\n\n// Get current resolution\nplayer.currentResolution(); // returns object {label '', sources: []}\n\n// Set resolution\nplayer.currentResolution('SD'); // returns videojs player object\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| label| string| no | label name |\n| customSourcePicker | function | no | cutom function to choose source |\n\n#### customSourcePicker\nIf there is more than one source with the same label, player will choose source automatically. This behavior can be changed if `customSourcePicker` is passed.\n\n`customSourcePicker` must return `player` object.\n```javascript\nplayer.currentResolution('SD', function(_player, _sources, _label){\n  return _player.src(_sources[0]); \\\\ Always select first source in array\n});\n```\n`customSourcePicker` accepst 3 arguments.\n\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| player| Object | yes | videojs player object |\n| sources | Array | no | array of sources |\n| label | String | no | name of label |\n\n`customSourcePicker` may be passed in options when player is initialized:\n```javascript\n\nvar myCustomSrcPicker = function(_p, _s, _l){\n  // select any source you want\n  return _p.src(selectedSource);\n}\n\nvideojs('video', {\n      controls: true,\n      muted: true,\n      width: 1000,\n      plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'low',\n          customSourcePicker: myCustomSrcPicker\n        }\n      }\n    }, function(){\n      // this is player\n    })\n```\n\n\n### getGroupedSrc()\nReturns sources grouped by label, resolution and type.\n\n\n## Events\n\n### resolutionchange `EVENT`\n\n> Fired when resolution is changed\n","version":"0.6.0","downloads":42},{"name":"videojs-responsive-controls","description":"Adapts controls to different player sizes","author":{"name":"Tomasz Janiczek","email":"tjaniczek@twig-world.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-09-27T15:54:39.489Z","created":"2017-06-22T09:14:10.495Z","1.0.0":"2017-06-22T09:14:10.495Z","1.0.1":"2017-06-22T11:52:26.626Z"},"readme":"# videojs-responsive-controls\n\nAdapts Video.js controls to different player sizes.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of contents\n\n- [Installation](#installation)\n- [Basics](#basics)\n- [Defaults](#defaults)\n- [Features](#features)\n    - [Visible by default](#visible-by-default)\n    - [Specifying own breakpoints](#specifying-own-breakpoints)\n    - [Using with legacy plugins](#using-with-legacy-plugins)\n- [Bundling with legacy systems](#bundling-with-legacy-systems)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-responsive-controls\n```\n\n\n## Basics\n\nBasic usage:\n\n```js\nimport 'videojs-responsive-controls';\n\nplayer.responsiveControls({\n    controls: {\n      remainingTimeDisplay: { mini: false, small: false },\n      'vjs-resolution-button': { mini: false },\n      'vjs-language-container': { mini: false }\n    }\n});\n```\n\nAllows controlling both Video.js native plugins and legacy plugins (via their class names).\n\n## Defaults\n\nDefault breakpoints are:\n\n- `mini`: <450px,\n- `small`: <600px,\n- `default`: any higher resolution\n\nDefault settings are:\n\n```\ncurrentTimeDisplay: {\n  mini: false,\n},\ntimeDivider: {\n  mini: false,\n},\ndurationDisplay: {\n  mini: false,\n},\nremainingTimeDisplay: {\n  mini: false,\n  small: false,\n},\ncaptionsButton: {\n  mini: false,\n},\n```\n\n## Features\n\n#### Visible by default\n\nIf user did not specified visibility for given plugin/breakpoint, and the visibility is also\nnot specified in default settings - the plugin will be visible.\n\n#### Specifying own breakpoints\n\nYou can specify own breakpoints like this:\n\n```js\nplayer.responsiveControls({\n    sizes: {\n        custom: 1024,\n    },\n    controls: {\n        remainingTimeDisplay: { custom: false }\n    }\n});\n```\n\nDefault breakpoints will be overwritten by this setting, therefore if you wish to use defaults too\nyou'll have to specify default breakpoints along with your custom ones like so:\n\n\n```js\nplayer.responsiveControls({\n    sizes: {\n        mini: 450,\n        small: 600,\n        custom: 1024,\n    },\n    controls: {\n        remainingTimeDisplay: { custom: false }\n    }\n});\n```\n\nBreakpoints are mobile-up so specified value is a maximum size video player can have to be affected by this breakpoint.\n\nTo hide element by default use `default` breakpoint:\n\n```js\nplayer.responsiveControls({\n    controls: {\n        remainingTimeDisplay: { default: false, mini: true }\n    }\n});\n```\n\n\n#### Using with legacy plugins\n\nLegacy plugins does not register in `videojs.controlBar` space but you can still manage them throught\nthis script passing class name in options, like this:\n\n```js\nplayer.responsiveControls({\n    controls: {\n        'vjs-language-container': { mini: false }\n    }\n});\n```\n\n\n\n## Bundling with legacy systems\n\nTo include videojs-responsive-controls on your website or web application, use any of the following legacy methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-responsive-controls.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.responsiveControls();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-responsive-controls via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-responsive-controls');\n\nvar player = videojs('my-video');\n\nplayer.responsiveControls();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-responsive-controls'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.responsiveControls();\n});\n```\n\n## License\n\nMIT. Copyright (c) Tomasz Janiczek &lt;tjaniczek@twig-world.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.1","downloads":865},{"name":"videojs-responsive-layout","description":"A plugin which reacts to the width of your Video.js player to change the layout.","author":{"name":"Derk-Jan Hartman"},"keywords":["videojs","videojs-plugin"],"license":"(MIT OR Apache-2.0)","time":{"modified":"2016-04-11T15:44:37.859Z","created":"2015-12-10T22:27:53.529Z","1.0.0":"2015-12-10T22:27:53.529Z","1.1.0":"2015-12-17T23:17:19.115Z","1.1.1":"2016-04-11T15:44:37.859Z"},"readme":"# videojs-responsive-layout\n\n[![Current version](https://img.shields.io/npm/v/videojs-responsive-layout.svg)](https://www.npmjs.com/package/videojs-responsive-layout) [![Dependencies](https://img.shields.io/versioneye/d/nodejs/videojs-responsive-layout.svg)](https://www.versioneye.com/nodejs/videojs-responsive-layout)\n\nA plugin that reacts to the width of your player to change the layout of your Video.js player.\n\nThis plugin changes the layout of the controlbar of your Video.js player, based on the width of the player. When it has calculated that not all controls will fit inside the player, it applies one of 3 different layout classes, which are provided by the default skin of Video.js.\n```\n* vjs-layout-tiny\n* vjs-layout-x-small\n* vjs-layout-small\n```\n\n## Getting started\nSimply install from npm, using `npm install videojs-responsive-layout`.\nNow add the `dist/videojs-responsive-layout.js` or `dist/videojs-responsive-layout.min.js` to your page and make sure it loads after the main `videojs` javascript.\n\nNow configure it like:\n```javascript\nvar player = videojs( 'really-cool-video',\n  {\n    controlBar: {\n      volumeMenuButton: {\n          inline: false\n      }\n    },\n    plugins: {\n      responsiveLayout: {}\n    }\n  },\n  function() {\n    console.log('Good to go!');\n    this.play();\n  }\n);\n```\nThe `inline:false` option is important, because the plugin cannot deal with an inline and horizontal volume control at this time.\n\n\n## Advanced options\nWill follow soon...\n\n## Contributing\nI really appreciate any help in maintaining and advancing this library. Check out the [contributing guide](CONTRIBUTING.md).\n\n## License\n\nMIT and Apache-2.0.\nCopyright (c) Derk-Jan Hartman\n","version":"1.1.1","downloads":39},{"name":"videojs-resumecard","description":"Video.js plugin for resuming playback.","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com","url":"http://www.careyhinoki.me/"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-09-02T19:19:20.492Z","created":"2016-06-09T22:40:38.275Z","1.0.0":"2016-06-09T22:40:38.275Z","1.0.1":"2016-06-15T02:07:46.463Z","1.0.2":"2016-06-15T21:07:12.595Z","1.0.3":"2016-06-15T22:12:59.023Z","1.0.4":"2016-06-16T03:10:39.920Z","2.0.0":"2016-06-23T23:48:42.168Z","2.1.0":"2016-08-11T00:09:16.395Z","2.1.1":"2016-09-02T19:19:20.492Z"},"readme":"# videojs-resumecard\n\n> Video.js plugin for resuming playback.\n\n## Getting Started\n\n#### Include\n\n```html\n<!-- optional: default styles -->\n<link href=\"/path/to/videojs.resumecard.min.css\" rel=\"stylesheet\">\n\n<script src=\"/path/to/videojs.resumecard.min.js\"></script>\n```\n\n#### Enable\n\n```js\nvideojs('player_id').resumecard({\n  time: 42,\n});\n```\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### [className]\n\nType: `string`  \nDefault: `vjs-resumecard`  \n\nHTMLElement class.\n\n#### [id]\n\nType: `string`  \nDefault: `vjs_resumecard`  \n\nHTMLElement id.\n\n#### [preload]\n\nType: `boolean`\nDefault: `false`\n\nHave the player *immediately* seek to time specified.\n\n#### [restartCallback]\n\nType: `function(event)`  \n\nEnables customization for the restart event.\n\n#### [resumeCallback]\n\nType: `function(event)`  \n\nEnables customization for the resume event.\n\n#### template\n\nType: `function(restartCallback, resumeCallback):HTMLElement`  \n\nEnables HTML customization for the template. **MUST return DOM Element**.\n\n#### time\n\nType: `number`  \n\nIn seconds.\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli # only needed for contributing\n\nnpm install\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-resumecard/blob/master/LICENSE).\n","version":"2.1.1","downloads":796},{"name":"videojs-s3bubble-meta-overlay","description":"A simple overlay for S3Bubble to display meta data title and description","author":{"name":"Media Streaming Websites","email":"support@s3bubble.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-01-20T22:13:24.149Z","created":"2017-01-20T17:16:14.850Z","0.0.0":"2017-01-20T17:16:14.850Z","0.0.1":"2017-01-20T17:16:39.343Z","0.0.2":"2017-01-20T17:21:13.021Z","0.0.3":"2017-01-20T17:24:09.829Z","0.0.4":"2017-01-20T22:13:24.149Z"},"readme":"# Videojs S3Bubble Meta Overlay\n\nA simple overlay for S3Bubble video meta data title and description\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-s3bubble-meta-overlay\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-s3bubble-meta-overlay\n```\n\n## Usage\n\nTo include videojs-s3bubble-meta-overlay on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n\t<video id=\"s3bubble-video\" class=\"video-js vjs-16-9 vjs-default-skin\" controls preload=\"auto\">\n    \t<source src=\"https://s3.amazonaws.com/s3bubble.videojs/claire-in-motion.mp4\" type=\"video/mp4\">\n  \t</video>\n    <script src=\"//path/to/video.min.js\"></script>\n\t<script src=\"//path/to/videojs-s3bubble-meta-overlay.min.js\"></script>\n  \t<script>\n     \n   \tvar player = videojs('s3bubble-video', {\n       \tautoplay: true\n   \t}, function() {\n\n       \tplayer.s3BubbleMetaOverlay({\n        \tsubTitle: \"You're watching\",\n           \ttitle: \"S3Bubble AWS Media Streaming\",\n           \tpara: \"This is a simple overlay used for the S3Bubble AWS media streaming platform.\"\n       \t});\n\n   \t});\n    \n  </script>\n```\n\nCheck out our <a href=\"http://jsbin.com/borotev/edit?html,output\" target=\"_blank\">live example</a> if you're having trouble.\n\n### Browserify\n\nWhen using with Browserify, install videojs-s3bubble-meta-overlay via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-s3bubble-meta-overlay');\n\nvar player = videojs('my-video');\n\nplayer.s3BubbleMetaOverlay({\n    subTitle: \"You're watching\",\n    title: \"S3Bubble AWS Media Streaming\",\n    para: \"This is a simple overlay used for the S3Bubble AWS media streaming platform.\"\n});\n\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-s3bubble-meta-overlay'], function(videojs) {\n\n  \tvar player = videojs('my-video');\n\n  \tplayer.s3BubbleMetaOverlay({\n    \tsubTitle: \"You're watching\",\n    \ttitle: \"S3Bubble AWS Media Streaming\",\n    \tpara: \"This is a simple overlay used for the S3Bubble AWS media streaming platform.\"\n\t});\n\n});\n```\n\n## License\n\nMIT. Copyright (c) Media Streaming Websites &lt;support@s3bubble.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.4","downloads":26},{"name":"videojs-s3bubble-multi-adverts","description":"Add multiple video adverts to video js from Amazon Web Serivces","author":{"name":"S3Bubble"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-01-20T17:17:31.745Z","created":"2017-01-19T23:30:05.229Z","0.0.1":"2017-01-19T23:30:05.229Z","0.0.2":"2017-01-20T17:17:31.745Z"},"readme":"# S3bubble Videojs Multi Adverts\n\nAdd multiple video adverts to video js from Amazon Web Services\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-s3bubble-multi-adverts\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-s3bubble-multi-adverts\n```\n\n## Usage\n\nTo include videojs-s3bubble-multi-adverts on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<video id=\"s3bubble-video\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"268\">\n    <source src=\"https://s3.amazonaws.com/s3bubble.videojs/claire-in-motion.mp4\" type=\"video/mp4\">\n</video>\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-s3bubble-multi-adverts.min.js\"></script>\n<script>\n  \tvar player = videojs('s3bubble-video');\n    \n    // this is just a dummy example replace with your video code\n  \t$.ajax({\n        url: \"https://xe309ni835.execute-api.us-east-1.amazonaws.com/testing/adverts\",\n        type: \"POST\",\n        data: JSON.stringify({\n            \"code\": \"cnAW19541\"\n        }),\n        contentType: 'application/json',\n        dataType: \"json\",\n        success: function(response){\n\n            if(response.statusCode === \"200\"){\n\n                player.s3BubbleMultiAdverts(response);\n\n            }else{\n\n                console.log(\"error\",response);\n\n            }\n           \n        }\n\n    });\n</script>\n```\n\nCheck out our <a href=\"http://jsbin.com/tafanac/edit?html,output\" target=\"_blank\">live example</a> if you're having trouble.\n\n### Browserify\n\nWhen using with Browserify, install videojs-s3bubble-multi-adverts via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-s3bubble-multi-adverts');\n\nvar player = videojs('my-video');\n\nplayer.s3BubbleMultiAdverts();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-s3bubble-multi-adverts'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.s3BubbleMultiAdverts();\n});\n```\n\n## License\n\nMIT. Copyright (c) S3Bubble\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.2","downloads":13},{"name":"videojs-sbtracking","author":{"name":"Sergey Gromkov","email":"sgromkov@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-11-27T09:39:42.505Z","created":"2017-11-24T16:01:27.258Z","1.0.0":"2017-11-24T16:01:27.258Z","1.0.1":"2017-11-27T09:39:42.505Z"},"readme":"# videojs-sbtracking\n\n\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-sbtracking\n```\n\n## Usage\n\nTo include videojs-sbtracking on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-sbtracking.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.sbtracking({\n    mediaStateCode: \"\",\n    mediaId: \"\",\n    playeri: \"\",\n    siteOwnerId: \"\",\n    mainRubric: \"\",\n    hasAds: false,\n    videoUrl: \"\",\n    url: \"/sbtracking/vplayer\"\n  });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-sbtracking via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-sbtracking');\n\nvar player = videojs('my-video');\n\nplayer.sbtracking({\n  mediaStateCode: \"\",\n  mediaId: \"\",\n  playeri: \"\",\n  siteOwnerId: \"\",\n  mainRubric: \"\",\n  hasAds: false,\n  videoUrl: \"\",\n  url: \"/sbtracking/vplayer\"\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-sbtracking'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.sbtracking({\n    mediaStateCode: \"\",\n    mediaId: \"\",\n    playeri: \"\",\n    siteOwnerId: \"\",\n    mainRubric: \"\",\n    hasAds: false,\n    videoUrl: \"\",\n    url: \"/sbtracking/vplayer\"\n  });\n});\n```\n\n## License\n\nMIT. Copyright (c) Sergey Gromkov &lt;sgromkov@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.1","downloads":20},{"name":"videojs-scene7","description":"Tech plugin for VideoJS to support Scene7 players","author":{"name":"Anthony McLin","email":"npm@anthonymclin.com"},"keywords":["videojs","videojs-plugin","scene7"],"license":"MIT","time":{"modified":"2017-10-26T23:29:34.391Z","created":"2017-10-25T00:41:27.720Z","0.5.1":"2017-10-25T00:41:27.720Z","0.6.0":"2017-10-26T18:19:34.240Z","0.7.0":"2017-10-26T23:29:34.391Z"},"readme":"# videojs-scene7\n\n[![Build Status][travis-icon]][travis-link]\n[![Coverage Status][coveralls-icon]][coveralls-link]\n\n[![NPM][npm-icon]][npm-link]\n\nTech plugin for VideoJS to support Scene7 players\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-scene7\n```\n\n## Usage\n\nTo include videojs-scene7 on your website or web application, use any of the following methods.\n\n### `<script>` Tag with a `<video>` tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available. Make sure to set:\n- techOrder so VideoJS will leverage the Scene7 plugin\n- source of the Scene7 MediaSet\n- the type to `videojs/scene7`\n- The Scene7 [player options](#options)\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-scene7.min.js\"></script>\n<video id='my-video'\n  controls\n  autoplay\n  >\n  <source src='Scene7SharedAssets/Adobe_QBP-AVS' type='videojs/scene7'>\n</video>\n<script>\n  var player = videojs('my-video',{\n    techOrder: [ 'Scene7']\n  });\n\n  player.scene7();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-scene7 via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-scene7');\n\nvar player = videojs('my-video',{\n  techOrder: [ 'Scene7']\n});\n\nplayer.scene7();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-scene7'], function(videojs) {\n  var player = videojs('my-video',{\n    techOrder: [ 'Scene7']\n  });\n\n  player.scene7();\n});\n```\n\n## Options\nProvide Scene7 options to VideoJS through the normal VideoJS options object or data-options attribute. The options\n\n```js\noptions: {\n  scene7: {\n    serverurl: \"http://s7d1.scene7.com/is/image/\", // Path to Scene7 server\n    videoserverurl: \"http://s7d1.scene7.com/is/content/\", // \n  }\n}\n```\n\n### `serverurl`\n\nURL to the image API for Scene7. Default when not set is `http://s7d1.scene7.com/is/image/`\n\n### `videoserverurl`\n\nURL to the content API for Scene7. Default when not set is `http://s7d1.scene7.com/is/content/`\n\n### `contenturl`\n\nURL to the content API for Scene7 where losed caption and chapter navigation assets are located. Default when not set is `http://s7d1.scene7.com/is/content/`\n\n\n\n## License\n\nMIT. Copyright (c) Anthony McLin &lt;npm@anthonymclin.com&gt;\n\n\n[videojs]: http://videojs.com/\n\n[coveralls-icon]: https://coveralls.io/repos/github/amclin/videojs-scene7/badge.svg?branch=master\n\n[coveralls-link]: https://coveralls.io/github/amclin/videojs-scene7?branch=master\n\n[npm-icon]: https://nodei.co/npm/videojs-scene7.png?downloads=true&downloadRank=true\n\n[npm-link]: https://nodei.co/npm/videojs-scene7/\n\n[travis-icon]: https://travis-ci.org/amclin/videojs-scene7.svg?branch=master\n\n[travis-link]: https://travis-ci.org/amclin/videojs-scene7\n","version":"0.7.0","downloads":26},{"name":"videojs-seek-buttons","description":"Plugin for video.js to add seek buttons to the control bar","author":{"name":"Ben Clifford"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-28T17:38:00.582Z","created":"2016-01-20T22:48:17.453Z","1.0.0":"2016-01-20T22:48:17.453Z","1.1.0":"2017-05-31T17:12:00.352Z","1.2.0":"2017-10-19T21:49:03.201Z","1.2.4":"2017-12-28T17:38:00.582Z"},"readme":"# videojs-seek-buttons\n\nPlugin for video.js to add seek buttons to the control bar\n\n## Installation\n\n```sh\nnpm install --save videojs-seek-buttons\n```\n\n## Usage\n\nTo include videojs-seek-buttons on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-seek-buttons.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.seekButtons({\n    forward: 30,\n    back: 10\n  });\n\n// You cam also include the plugin in the setup options, e.g.\n// var player = videojs('my-video', {\n//   plugins: {\n//     seekButtons: {\n//       forward: 30,\n//       back: 10\n//     }\n//   }\n// });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-seek-buttons via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-seek-buttons');\n\nvar player = videojs('my-video');\n\nplayer.seekButtons({\n  forward: 30,\n  back: 10\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-seek-buttons'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.seekButtons({\n    forward: 30,\n    back: 10\n  });\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Ben Clifford\n\n\n[videojs]: http://videojs.com/\n","version":"1.1.0","downloads":298},{"name":"videojs-select-subtitle","description":"Will automatically select subtitle track based on configuration","author":{"name":"Lubos Krnac","email":"lubos.krnac@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-08-29T12:58:13.415Z","created":"2016-08-29T12:47:33.108Z","0.1.0":"2016-08-29T12:47:33.108Z","0.1.1":"2016-08-29T12:58:13.415Z"},"readme":"# videojs-select-subtitle\n\nWill automatically select subtitle track based on configuration\n\n## Installation\n\n```sh\nnpm install --save videojs-select-subtitle\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-select-subtitle\n```\n\n## Usage\n\nTo include videojs-select-subtitle on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-select-subtitle.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.selectSubtitle();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-select-subtitle via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-select-subtitle');\n\nvar player = videojs('my-video');\n\nplayer.selectSubtitle();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-select-subtitle'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.selectSubtitle();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Lubos Krnac &lt;lubos.krnac@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.1.1","downloads":36},{"name":"videojs-settings-menu","description":"Settings menu for the video.js controlbar","author":{"name":"Fruitsapje","email":"hero@streamone.nl"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-02-14T16:41:34.535Z","created":"2016-08-17T14:27:02.963Z","0.0.1":"2016-08-17T14:27:02.963Z","0.0.2":"2016-09-12T09:43:57.312Z"},"readme":"# videojs-settings-menu\n\nA plugin to create a settings menu consisting of sub menus for the video.js controlbar\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify](#browserify)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\n```sh\nnpm install --save videojs-settings-menu\n```\n\n## Usage\n\nTo create a videojs-settings-menu you simply have to put a menu inside the `settingsMenuButton` as an entry. The `settingsMenuButton` is placed as a child inside the `controlBar`. Don't forget to remove the menus from the `controlBar` as children, because otherwise the menu will also been shown in the controlbar instead of only in the settings menu. Examples and methods can be found below.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.js\"></script>\n<script src=\"//path/to/videojs-settings-menu.js\"></script>\n<script>\n\tvar player = videojs('videojs-settings-menu-player', {\n\t\t'playbackRates': [0.5, 1, 1.5, 2],\n\t\tcontrolBar: {\n\t\t\tchildren: {\n\t\t\t\t'playToggle':{},\n\t\t\t\t'muteToggle':{},\n\t\t\t\t'volumeControl':{},\n\t\t\t\t'currentTimeDisplay':{},\n\t\t\t\t'timeDivider':{},\n\t\t\t\t'durationDisplay':{},\n\t\t\t\t'liveDisplay':{},\n\n\t\t\t\t'flexibleWidthSpacer':{},\n\t\t\t\t'progressControl':{},\n\n\t\t\t\t'settingsMenuButton': {\n\t\t\t\t\tentries : [\n\t\t\t\t\t\t'subtitlesButton',\n\t\t\t\t\t\t'playbackRateMenuButton'\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'fullscreenToggle':{}\n\t\t\t}\n\t\t}\n\t});\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-settings-menu via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-settings-menu');\n\nvar player = videojs('my-video', { /* options as above */});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-settings-menu'], function(videojs) {\n  var player = videojs('my-video', { /* options as above */});\n});\n```\n\n## License\n\nMIT. Copyright (c) Fruitsapje &lt;hero@streamone.nl&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.2","downloads":29},{"name":"videojs-share","description":"Share plugin for video.js","author":{"name":"Mikhail Khazov","email":"mkhazov.work@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-10T13:32:38.792Z","created":"2017-05-26T07:47:05.848Z","0.1.0":"2017-05-26T07:47:05.848Z","0.2.0":"2017-05-31T07:50:34.665Z","0.2.1":"2017-06-07T18:25:17.093Z","0.3.0":"2017-06-13T10:52:59.334Z","0.3.1":"2017-06-13T13:35:10.947Z","0.4.0":"2017-06-14T07:54:35.628Z","1.0.0":"2017-06-23T08:06:43.635Z","1.0.1":"2017-06-27T10:04:13.484Z"},"readme":"# videojs-share\n\nShare plugin for [video.js][videojs]. Allows user to copy video url / embed code and share video to social networks.\n\nList of supported social networks: Facebook, Twitter, Google Plus, LinkedIn, VK, Odnoklassniki, Mail.ru.\nSupported messengers: Messenger, Telegram, Whatsapp, Viber.\n\nSharing functioonality provided by [vanilla-sharing][vanilla-sharing] library.\nCopying to clipboard is done via [clipboard.js][clipboardjs].\n\n[![npm](https://img.shields.io/npm/v/videojs-share.svg)](https://www.npmjs.com/package/videojs-share)\n[![Build Status](https://travis-ci.org/mkhazov/videojs-share.svg?branch=master)](https://travis-ci.org/mkhazov/videojs-share)\n[![David](https://david-dm.org/neuron-digital/videojs-share.svg)](https://david-dm.org/neuron-digital/videojs-share)\n[![David](https://david-dm.org/neuron-digital/videojs-share/dev-status.svg)](https://david-dm.org/neuron-digital/videojs-share?type=dev)\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n  - [Plugin initialization](#plugin-initialization)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-share\n```\n\n## Usage\n\nTo include videojs-share on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-share.min.js\"></script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-share via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-share');\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-share'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.share();\n});\n```\n\n### Plugin initialization\n\n```js\nvar player = videojs('my-video');\n\nvar shareOptions = {\n  socials: ['fb', 'tw', 'gp', 'messenger', 'linkedin', 'telegram', 'whatsapp', 'viber', 'vk', 'ok', 'mail'],\n\n  url: window.location.href,\n  title: 'videojs-share',\n  description: 'video.js share plugin',\n  image: 'https://dummyimage.com/1200x630',\n\n  // required for Facebook and Messenger\n  fbAppId: '12345', \n  // optional for Facebook\n  redirectUri: window.location.href + '#close',\n\n  // optional for VK\n  isVkParse: true,\n}\n\nplayer.share(shareOptions);\n```\n\n[videojs]: https://github.com/videojs/video.js\n[clipboardjs]: https://github.com/zenorocha/clipboard.js\n[vanilla-sharing]: https://github.com/avdeev/vanilla-sharing\n","version":"1.0.1","downloads":128},{"name":"videojs-single-tns-counter","description":"Video.js plugin for one-time Mediascope TNS counter","author":{"name":"Sergey Gromkov","email":"sgromkov@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-11-21T12:22:49.413Z","created":"2017-11-21T12:12:55.180Z","1.0.0":"2017-11-21T12:12:55.180Z","1.0.1":"2017-11-21T12:22:49.413Z"},"readme":"# videojs-single-tns-counter\n\nVideo.js plugin for one-time Mediascope TNS counter\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-single-tns-counter\n```\n\n## Usage\n\nTo include videojs-single-tns-counter on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-single-tns-counter.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.singleTnsCounter({\n    tnsSiteCode: \"your own code\",\n    events: {\n      // any event you need, include your custom events\n      // for example:\n      loadstart: \"text to send on loadstart event\",\n      play: \"text to send on play event\",\n      ended: \"text to send on ended event\"\n    }\n  });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-single-tns-counter via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-single-tns-counter');\n\nvar player = videojs('my-video');\n\nplayer.singleTnsCounter({\n  tnsSiteCode: \"your own code\",\n  events: {\n    // any event you need, include your custom events\n    // for example:\n    loadstart: \"text to send on loadstart event\",\n    play: \"text to send on play event\",\n    ended: \"text to send on ended event\"\n  }\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-single-tns-counter'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.singleTnsCounter({\n    tnsSiteCode: \"your own code\",\n    events: {\n      // any event you need, include your custom events\n      // for example:\n      loadstart: \"text to send on loadstart event\",\n      play: \"text to send on play event\",\n      ended: \"text to send on ended event\"\n    }\n  });\n});\n```\n\n## License\n\nMIT. Copyright (c) Sergey Gromkov &lt;sgromkov@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.1","downloads":22},{"name":"videojs-skippy","description":"Skip past broken or invalid segments","author":{"name":"Pedro","email":"pedro@younow.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-06-21T17:37:35.661Z","created":"2016-06-12T00:35:57.864Z","0.0.0":"2016-06-12T00:35:57.864Z","1.0.3":"2016-06-21T17:33:03.518Z","1.0.4":"2016-06-21T17:37:35.661Z"},"readme":"# videojs-skippy\n\nSkip past broken or invalid segments\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-skippy\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-skippy\n```\n\n## Usage\n\nThe options you can pass in are limited to:\n\n*maxErrors* The max amount of errors before the player stops trying to skip segments. (defaults to 10)  \n\n*onLiveError* A callback function in the case of an error on a live HLS stream. (defaults to noop)  \n\nTo include videojs-skippy on your website or web application, use any of the following methods.\n\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-skippy.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.skippy();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-skippy via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-skippy');\n\nvar player = videojs('my-video');\n\nplayer.skippy();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-skippy'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.skippy();\n});\n```\n\n## License\n\nMIT. Copyright (c) Pedro &lt;pedro@younow.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.4","downloads":49},{"name":"videojs-slides","description":"Plugin to show slides according to the time, auhtor and resources list","author":{"name":"DNAMIC"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-02-24T20:04:32.068Z","created":"2017-02-24T17:41:14.017Z","0.0.0":"2017-02-24T17:41:14.017Z","0.1.0":"2017-02-24T19:54:56.026Z","0.2.0":"2017-02-24T20:02:38.182Z","0.3.0":"2017-02-24T20:04:32.068Z"},"readme":"# videojs-slides\n\nPlugin to show slides according to the time, author name and resources list\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-slides\n```\n\n## Usage\n\nTo include videojs-slides on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-slides.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n  slides = [{url:'image url',time:9}]\n  player.slides(slide);\n</script>\n```\n\n### Browserify\nWhen using with Browserify, install videojs-slides via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-slides');\n\nvar player = videojs('my-video');\n\nplayer.slides();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-slides'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.slides();\n});\n```\n### Options\n```js\nslides: [\n  {\n    url:'path', time:'seconds'\n  }\n]\nresources: [\n  {\n    url:'path',name:'string',icon:'iconclass',cta:'string'\n  }\n]\nlinks: [\n  {\n    name:'string', url:'path'\n  }\n]\nlogo: [\n  {\n    url:'path',link:'string'\n  }\n]\nauthor: [\n  {\n    name:'string',image:'path'\n  }\n]\n```\n\n### Example:\n```js\nplayer.slides({slides, author, resources, links, logo});\n```\n\n### License\n\nMIT. Copyright (c) Jairo Campos Vargas\n\n\n[videojs]: http://videojs.com/\n","version":"0.3.0","downloads":18},{"name":"videojs-socialshare","description":"Video.js plugin to display a social share tool on hover.","author":{"name":"Justin McCraw","email":"jmccraw1+socialShare@gmail.com","url":"http://twitter.com/justinmccraw"},"keywords":["videojs","social","sharing","social media","twitter","facebook","videojs-plugin"],"license":"MIT","time":{"modified":"2017-06-01T17:06:12.347Z","created":"2016-01-06T21:54:37.932Z","1.0.0":"2016-01-06T21:54:37.932Z","1.0.1":"2016-01-06T21:58:39.608Z"},"readme":"# videojs-socialShare\nAdds social sharing buttons to the video widget for Facebook and Twitter.\n____\n\n### Purpose\nShare your embeded video URL directly from the unit itself. This plugin adds a Facebook and Twitter (more possible) widget to your player to share the page URL without having to scroll to your page’s own share tools.\n\n![Suggested Social Share Screenshot](https://lh3.googleusercontent.com/-Lm8716TKNAI/Vo2K97wnD5I/AAAAAAAAGOs/xWGffoJrwYI/s800-Ic42/videojs-socialshare.png)\n\n### Usage\nThis plugin requires [Video.js](https://github.com/videojs/video.js) and was created with version 5.4.4.\n\nIt also uses [flexbox](http://caniuse.com/flexbox).\n\n1. Install [Video.js](https://github.com/videojs/video.js)\n2. Add the [videojs-socialShare](https://github.com/jmccraw/videojs-socialShare/blob/master/videojs.socialShare.css) CSS to your page\n3. Add the [videojs-socialShare](https://github.com/jmccraw/videojs-socialShare/blob/master/videojs.socialShare.js) JavaScript to your page\n4. Initialize the plugin with some social sharing information in JSON format\n5. Test to see that the social sharing tools appear\n\n### Example\nBelow is a sample use case. Feel free to add the videojs-socialShare CSS/JS to your own project how you see fit. Separated here as an example.\n\n```html\n<link rel=\"stylesheet\" href=\"videojs-socialShare.css\">\n<video id=\"my-video\" data-setup=\"{}\" preload=\"auto\" controls\">\n  <source src=\"my-video.mp4\">\n  <source src=\"my-video.webm\">\n</video>\n<script src=\"videojs-socialShare.js\"></script>\n<script>\n  'use strict';\n  \n  var video = videojs('my-video');\n  video.socialShare({\n    facebook: { // optional, includes a Facebook share button (See the [Facebook documentation](https://developers.facebook.com/docs/sharing/reference/share-dialog) for more information)\n      shareUrl: '', // optional, defaults to window.location.href\n      shareImage: '', // optional, defaults to the Facebook-scraped image\n      shareText: ''\n    },\n    twitter: { // optional, includes a Twitter share button (See the [Twitter documentation](https://dev.twitter.com/web/tweet-button/web-intent) for more information)\n      handle: '', // optional, appends `via @handle` to the end of the tweet \n      shareUrl: '', // optional, defaults to window.location.href\n      shareText: '' \n    }\n  });\n</script>\n```\n\n### Notes\nFor Facebook to work to the best of its ability, you need to have implemented the Facebook SDK or at least the og metadata, include the `fb:app_id`.\n\nYou should also style this to work across viewports, since this is only a cursory example for desktop, although it'll probably work fine on smaller screens. It also doesn't have a fallback for mobile, for example, appearing under or over the video itself, since it appears on hover and mobile devices don't do that.\n\nLet me know if you run into any bugs or recommendations.","version":"1.0.1","downloads":17},{"name":"videojs-spellbook","description":"An official web project builder for video.js and its plugins","author":{"name":"Brandon Casey"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-04-25T20:04:07.146Z","created":"2016-10-06T20:58:01.571Z","1.0.0":"2016-10-06T20:58:01.571Z","1.0.1":"2016-10-11T14:56:50.149Z","1.0.2":"2016-10-11T15:00:49.463Z","1.0.3":"2016-10-11T18:31:30.370Z","1.0.4":"2016-10-11T20:09:24.308Z","1.0.5":"2016-10-11T21:14:00.916Z","1.0.6":"2016-10-12T18:28:33.502Z","1.0.7":"2016-10-12T18:50:44.922Z","1.0.8":"2016-10-13T18:13:43.814Z","1.0.9":"2016-10-24T18:25:02.225Z","2.0.0":"2016-10-28T19:59:50.585Z","2.0.1":"2016-11-03T21:13:16.800Z","2.0.2":"2016-11-03T22:08:52.553Z","2.1.0":"2016-12-08T21:03:24.863Z","2.1.1":"2017-01-05T17:30:31.612Z","2.1.2":"2017-01-11T19:11:03.813Z","2.1.3":"2017-02-13T17:04:18.372Z","2.1.4":"2017-02-13T18:22:13.918Z","2.1.5":"2017-04-05T16:41:39.986Z","3.0.0":"2017-04-05T17:29:54.543Z","3.0.1":"2017-04-05T18:29:29.564Z","3.0.2":"2017-04-05T18:32:59.476Z","2.1.6":"2017-04-05T18:34:20.832Z","3.1.0":"2017-04-11T21:28:57.990Z","3.1.1":"2017-04-12T17:13:39.323Z","3.1.2":"2017-04-12T19:18:15.995Z","3.1.3":"2017-04-12T19:50:16.297Z","4.0.0":"2017-04-24T21:27:37.093Z","4.0.1":"2017-04-25T20:04:07.146Z"},"readme":"# videojs-spellbook\n\n[![Build Status](https://travis-ci.org/videojs/spellbook.svg?branch=master)](https://travis-ci.org/videojs/spellbook)\n[![NPM](https://nodei.co/npm/videojs-spellbook.png)](https://nodei.co/npm/videojs-spellbook/)\n\n## Table of Contents\n\n* [Features](#features)\n* [Installation](#installation)\n* [Things to know](#things-to-know)\n* [Known issues & Workarounds](#known-issues--workarounds)\n* [More Information](#more-information)\n\n## Features\n\n* General\n  * Small browser dists by using all of the latest technologies\n  * External source maps for all js and css files\n  * Automatic licence/banner insertion at the top of minified files\n  * support for linting js, css, documentation, and documenation examples (js only)\n  * super fast incremental rebuilds `--watch`\n* JavaScript\n  * es6 -> es5 for publishing on npm\n  * Ability to support IE8 (or not) effortlessly (NOTE: this will add a lot of bytes to your dist)\n  * Support for es6 -> es6 imports using `jsnext:main` pointing to es6 entry files in package.json\n  * Support for shimming `video.js` so that it will be included in the page for testing but not included in the dist file\n  * Automatic unit test generation for `webpack` and `browserify`\n* CSS\n  * support for vanilla css with concatination via `postcss-import` (like require for css)\n  * support for sass\n* Docs\n  * API documenation generated into html files from jsdoc comments\n  * Manual documenation generated into html files\n  * Automatic table of contents for manual documenation\n* Test\n  * QUnitjs supported out of the box\n  * sinon supported out of the box (local installation not necessary or recommended)\n  * Manual debuging via karma debug page and --watch\n* Server\n  * `--tunnel` option to share your local dev server over the internet\n  * `sb-start` to:\n    * start a dev server\n    * build everything and re-build on change\n    * lint everything and re-lint on change\n    * test everything and re-build tests on change\n    * auto-reload when files change in\n      * `<project-root>/dist/**/*.js`\n      * `<project-root>/dist/**/*.css`\n      * `<project-root>/dist/**/*.html`\n      * `<project-root>/examples/**/*.html`\n      * `<project-root>/index.html`\n    * Proxy karma to `http://localhost:9999/test` so:\n      * manual debugging is easier\n      * it can be included in a tunnel over the internet\n      * auto-reloads will happen when code changes\n  * browser-sync which will:\n    * reload on file change\n    * offers a ui for configuration at `http://localhost:10000`\n    * can be used to turn off auto reload etc.\n* Release mangagement\n  * Support for use as an npm script or standalone\n  * Does the following:\n    1. Release un-released changelog entries with `chg`\n    1. update the version in package.json\n    1. support/build dists for bower in the tag so they don't clutter the main repo\n    1. make a git commit with the version name as the message\n    1. tag a git branch\n    1. Advise the user on how to push to git, and publish to npm\n\n## Installation\n\n1. Run `npm install --save-dev videojs-spellbook`\n1. Read the [sb man page](/docs/sb.md) to lean about how your project should be structured.\n\n## Things to know\n\n* `jsnext:main` must point to your es6 main file in each project that you want to bundle together (this will make\n  the dist files much smaller).\n* `global`/`sinon` are included in spellbook and will be used for your project if your project does not have/need\n  local versions. If you need the for browser dists though, you will have to install them\n\n## Known issues & Workarounds\n\n* rollup is not used during watch (rollupify and watchify don't play nice)\n  * this is not really something that can be worked around yet but it should\n    not be an issue as rollup will be used during `build` and `watch` should only\n    be used in development\n* es6 code changes in sub projects don't trigger a rebuild on watch\n  * This is due to rollupify not working with watchify, see the above issue. Have spellbook or your\n    current build system watch your sub-project and rebuild its es5 dist on change.\n\n## More Information\n\n* [Man Pages](/docs/)\n* [TODO](TODO.md)\n","version":"4.0.1","downloads":175},{"name":"videojs-splash-play","description":"Replaces the default videojs play icon with a custom icon for video and audio players","author":{"name":"Adam Oliver","email":"mail@adamoliver.net"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-06-26T16:47:43.921Z","created":"2017-01-13T16:42:14.412Z","1.0.0":"2017-01-13T16:42:14.412Z","0.0.0":"2017-01-13T18:15:45.512Z","0.1.0":"2017-01-17T20:11:15.534Z","1.0.1":"2017-06-26T16:47:43.921Z"},"readme":"# videojs-splash-play\n\nReplaces the default videojs play icon with a custom icon for video and audio players\n\n## Installation\n\n```sh\nnpm install --save videojs-splash-play\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-splash-play\n```\n\n## Usage\n\nTo include videojs-splash-play on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-splash-play.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.splashPlay();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-splash-play via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-splash-play');\n\nvar player = videojs('my-video');\n\nplayer.splashPlay();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-splash-play'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.splashPlay();\n});\n```\n\n## License\n\nMIT. Copyright (c) Adam Oliver &lt;mail@adamoliver.net&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.1","downloads":877},{"name":"videojs-stop-button","description":"A video.js plugin that displays a stop button in the control bar","keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2016-02-29T19:00:02.973Z","created":"2016-02-29T19:00:02.973Z","0.0.0":"2016-02-29T19:00:02.973Z"},"readme":"# videojs-stop-button\n\nA video.js plugin that displays a stop button in the control bar\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-stop-button\n```\n\n## Usage\n\nTo include videojs-stop-button on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-stop-button.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.stopButton();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-stop-button via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-stop-button');\n\nvar player = videojs('my-video');\n\nplayer.stopButton();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-stop-button'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.stopButton();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) \n\n\n[videojs]: http://videojs.com/\n","version":"0.0.0","downloads":16},{"name":"videojs-straas-live-event-listener","description":"Fetching straas live streaming state","author":{"name":"kiwi.liu","email":"kiwi.liu@ikala.tv"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-30T07:33:34.481Z","created":"2018-01-26T03:52:14.317Z","1.0.0":"2018-01-26T03:52:14.317Z","1.0.1":"2018-01-26T08:53:10.344Z","1.0.2":"2018-01-26T09:56:58.563Z","1.0.3":"2018-01-29T01:53:57.494Z","1.0.4":"2018-01-29T02:01:57.357Z","1.0.5":"2018-01-29T03:01:34.356Z","1.0.6":"2018-01-29T04:58:26.844Z","1.0.7":"2018-01-29T05:04:54.171Z","1.0.7-test":"2018-01-29T05:11:34.201Z","1.0.8":"2018-01-29T05:53:40.915Z","1.0.9":"2018-01-29T06:48:39.731Z","1.0.10":"2018-01-29T06:58:56.490Z","1.0.11":"2018-01-29T07:14:52.956Z","1.0.12":"2018-01-29T09:25:28.785Z","1.0.14":"2018-01-30T02:30:40.444Z","1.0.15":"2018-01-30T02:56:28.479Z","1.0.16":"2018-01-30T03:12:59.346Z","1.0.17":"2018-01-30T07:33:34.481Z"},"readme":"# videojs-straas-live-event-listener\n\nFetching straas live streaming state\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-straas-live-event-listener\n```\n\n## Usage\n\nTo include videojs-straas-live-event-listener on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-straas-live-event-listener.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.straasLiveEventListener();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-straas-live-event-listener via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-straas-live-event-listener');\n\nvar player = videojs('my-video');\n\nplayer.straasLiveEventListener();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-straas-live-event-listener'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.straasLiveEventListener();\n});\n```\n\n## License\n\nMIT. Copyright (c) kiwi.liu &lt;kiwi.liu@ikala.tv&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.17","downloads":548},{"name":"videojs-structure","description":"This will update the default video structure for custom functionality ","author":{"name":"Jairo Campos Vargas"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-07-12T23:53:27.419Z","created":"2017-03-05T16:16:40.754Z","0.0.0":"2017-03-05T16:16:40.754Z","0.1.0":"2017-03-05T17:59:46.231Z","0.2.0":"2017-03-06T01:32:04.069Z","1.2.0":"2017-03-13T22:07:34.456Z","1.3.0":"2017-03-28T22:22:37.565Z","1.4.0":"2017-07-12T23:53:27.419Z"},"readme":"# videojs-structure\n\nThis will update the default video structure, this is perfect when you need to work with react and need to add new component into the video plugin tag, you will have\ntwo components zones: \n\n```html\n <div data-vjs-player>\n    <video id=\"videojs-structure-player\" class=\"video-js vjs-default-skin\" controls>\n      <source src=\"//vjs.zencdn.net/v/oceans.mp4\" type=\"video/mp4\">\n      <source src=\"//vjs.zencdn.net/v/oceans.webm\" type=\"video/webm\">\n    </video>\n    <div class=\"vjs-header\">Header React Components</div>\n    <div class=\"vjs-footer\">Footer React Components</div>\n  </div>\n```\n\n## Default Component Tree\n\nThe default component structure of the Video.js player looks something like this:\n\n```tree\nPlayer\n├── MediaLoader (has no DOM element)\n├── PosterImage\n├── TextTrackDisplay\n├── LoadingSpinner\n├── BigPlayButton\n├─┬ ControlBar\n│ ├── PlayToggle\n│ ├── VolumeMenuButton\n│ ├── CurrentTimeDisplay (hidden by default)\n│ ├── TimeDivider (hidden by default)\n│ ├── DurationDisplay (hidden by default)\n│ ├─┬ ProgressControl (hidden during live playback)\n│ │ └─┬ SeekBar\n│ │   ├── LoadProgressBar\n│ │   ├── MouseTimeDisplay\n│ │   └── PlayProgressBar\n│ ├── LiveDisplay (hidden during VOD playback)\n│ ├── RemainingTimeDisplay\n│ ├── CustomControlSpacer (has no UI)\n│ ├── PlaybackRateMenuButton (hidden, unless playback tech supports rate changes)\n│ ├── ChaptersButton (hidden, unless there are relevant tracks)\n│ ├── DescriptionsButton (hidden, unless there are relevant tracks)\n│ ├── SubtitlesButton (hidden, unless there are relevant tracks)\n│ ├── CaptionsButton (hidden, unless there are relevant tracks)\n│ ├── AudioTrackButton (hidden, unless there are relevant tracks)\n│ └── FullscreenToggle\n├── ErrorDisplay (hidden, until there is an error)\n└── TextTrackSettings\n```\n\n## The Update Component Tree\n\nThe new component structure of the Video.js player looks something like this:\n\n```tree\nPlayer\n├─┬ Header (Custom React Components)\n├─┬ New Wrapper with Custom Class (Name will be the customClass parameter into the object parameters)\n│ ├── MediaLoader (has no DOM element)\n│ ├── PosterImage\n│ ├── TextTrackDisplay\n│ ├── LoadingSpinner\n│ ├── BigPlayButton\n│ ├── ErrorDisplay (hidden, until there is an error)\n│ └── TextTrackSettings\n  └── Custom React Components\n├─┬ ControlBar (only if option moveControl is true)\n│ ├── PlayToggle\n│ ├── VolumeMenuButton\n│ ├── CurrentTimeDisplay (hidden by default)\n│ ├── TimeDivider (hidden by default)\n│ ├── DurationDisplay (hidden by default)\n│ ├─┬ ProgressControl (hidden during live playback)\n│ │ └─┬ SeekBar\n│ │   ├── LoadProgressBar\n│ │   ├── MouseTimeDisplay\n│ │   └── PlayProgressBar\n│ ├── LiveDisplay (hidden during VOD playback)\n│ ├── RemainingTimeDisplay\n│ ├── CustomControlSpacer (has no UI)\n│ ├── PlaybackRateMenuButton (hidden, unless playback tech supports rate changes)\n│ ├── ChaptersButton (hidden, unless there are relevant tracks)\n│ ├── DescriptionsButton (hidden, unless there are relevant tracks)\n│ ├── SubtitlesButton (hidden, unless there are relevant tracks)\n│ ├── CaptionsButton (hidden, unless there are relevant tracks)\n│ ├── AudioTrackButton (hidden, unless there are relevant tracks)\n│ └── FullscreenToggle\n├─ Footer (Custom React Components)\n```\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-structure\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-structure\n```\n\n## Usage\n\nTo include videojs-structure on your website or web application, use any of the following methods.\n\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-structure.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.structure({customClass: 'vjs-custom-wrapper',moveControl: true});\n</script>\n```\n## Options\n\nYou can pass the customClass name for the new wrap video and moveControl true to move the controls video to new parent.\nIf you pass components like true will add a custom wrapper for your components like React or Angular.\n\n## Options List\n\ncustomClass String : Will be the media wrapper\nheader Bool : Header Zone \nfooter Bool : Footer Zone \n\n### Browserify\n\nWhen using with Browserify, install videojs-structure via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-structure');\n\nvar player = videojs('my-video');\n\nplayer.structure();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-structure'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.structure();\n});\n```\n\n## License\n\nMIT. Copyright (c) Jairo Campos Vargas\n\n\n[videojs]: http://videojs.com/\n","version":"1.4.0","downloads":414},{"name":"videojs-suggestedvideoendcap","description":"Video.js plugin to display a grid of suggested content after a video plays.","author":{"name":"Justin McCraw","email":"jmccraw1+suggestedVideoEndcap@gmail.com","url":"http://twitter.com/justinmccraw"},"keywords":["videojs","endcap","videojs-plugin"],"license":"MIT","time":{"modified":"2016-01-06T22:02:13.757Z","created":"2015-12-23T22:12:10.852Z","1.0.0":"2015-12-23T22:12:10.852Z","1.0.1":"2015-12-23T22:33:51.408Z","1.1.1":"2016-01-06T22:02:13.757Z"},"readme":"# videojs-suggestedVideoEndcap\nCreates an endcap screen with a grid of suggested video links to watch, similar to YouTube. Inspired by Funny or Die’s [videojs-relatedCarousel](https://github.com/funnyordie/videojs-relatedCarousel).\n____\n\n### Purpose\nRecirculation is important for increasing page views and disseminating your videos. This Suggested Video Endcap looks to offer such a solution. By displaying a grid of suggested video content, a la YouTube, users may be more inclined to stay on your site and click around to content, not necessarily just videos.\n\n![Suggested Video Endcap Screenshot](https://lh3.googleusercontent.com/-9W5CiLk-t0c/VnwQESr9-0I/AAAAAAAAGKE/Ja841qexZyc/s800-Ic42/suggestedVideoEndcap.png)\n\n### Usage\nThis plugin requires [Video.js](https://github.com/videojs/video.js) and was created with version 5.4.4.\n\nIt also uses [flexbox](http://caniuse.com/flexbox).\n\n1. Install [Video.js](https://github.com/videojs/video.js)\n2. Add the [videojs-suggestedVideoEndcap](https://github.com/jmccraw/videojs-suggestedVideoEndcap/blob/master/videojs.suggestedVideoEndcap.css) CSS to your page\n3. Add the [videojs-suggestedVideoEndcap](https://github.com/jmccraw/videojs-suggestedVideoEndcap/blob/master/videojs.suggestedVideoEndcap.js) JavaScript to your page\n4. Initialize the plugin with some related endcap content in JSON format\n5. Test to see that, after the video ends, the related endcap appears with your related content\n\n### Example\nBelow is a sample use case. Feel free to add the videojs-suggestedVideoEndcap CSS/JS to your own project how you see fit. Separated here as an example.\n\n```html\n<link rel=\"stylesheet\" href=\"videojs-suggestedVideoEndcap.css\">\n<video id=\"my-video\" data-setup=\"{}\" preload=\"auto\" controls\">\n  <source src=\"my-video.mp4\">\n  <source src=\"my-video.webm\">\n</video>\n<script src=\"videojs-suggestedVideoEndcap.js\"></script>\n<script>\n  'use strict';\n  \n  var video = videojs('my-video');\n  video.suggestedVideoEndcap({\n    header: 'You may also like…',\n    suggestions: [\n      {\n        title: 'Suggested Video One',\n        url: '/another-video.html',\n        image: 'http://placehold.it/250', // could be an animated GIF\n        alt: 'Description of photo', // optional photo description, defaults to the title\n        target: '_blank' // can be any anchor target type\n      },\n      {\n        title: 'Suggested Article One',\n        url: '/a-different-article.html',\n        image: 'http://placehold.it/250',\n        target: '_self' // defaults to self if no target value is present\n      }\n    ]\n  });\n</script>\n```\n\n### Notes\nThe CSS needs updating to conform to the size of your given media player and to add things like transitions and other effects. Currently, it's set up for a rather large implementation and truncated in the code for this case. Should also be extended for media queries, but that's a more case-by-case level.\n\nLet me know if you run into any bugs or recommendations.","version":"1.1.1","downloads":16},{"name":"videojs-theater-mode","description":"Adds a class the video.js container that can be used to put your video into \"theater mode\"","author":{"name":"Jon","email":"jon@jgubman.com"},"keywords":["videojs","videojs-plugin","theater mode"],"license":"MIT","time":{"modified":"2017-06-27T00:14:37.963Z","created":"2017-06-27T00:14:37.963Z","1.0.0":"2017-06-27T00:14:37.963Z"},"readme":"# videojs-theater-mode\n\nAdds a class the video.js container that can be used to put your video into &#34;theater mode&#34;\n\n## Installation\n\n```sh\nnpm install --save videojs-theater-mode\n```\n\n## Usage\n\nTo include videojs-theater-mode on your website or web application, use any of the following methods. After including the script, have the player listen for the 'theaterMode' trigger and respond to the theaterModeIsOn: true/false object any way you'd like.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-theater-mode.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.theaterMode({ elementToToggle: 'page');\n\n  player.on('theaterMode', function(elm, data) {\n    if (data.theaterModeIsOn) {\n      $('#page').turnOnTheaterMode(); // or whatever\n    } else {\n      $('#page').turnOffTheaterMode();\n    }\n  });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-theater-mode via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-theater-mode');\n\nvar player = videojs('my-video');\n\nplayer.theaterMode({ elementToToggle: 'page' });\n\nplayer.on('theaterMode', function(elm, data) {\n  if (data.theaterModeIsOn) {\n    $('#page').turnOnTheaterMode(); // or whatever\n  } else {\n    $('#page').turnOffTheaterMode();\n  }\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-theater-mode'], function(videojs) {\n  var player = videojs('my-video');\n  player.theaterMode({ elementToToggle: 'page' });\n\n  player.on('theaterMode', function(elm, data) {\n    if (data.theaterModeIsOn) {\n      $('#page').turnOnTheaterMode(); // or whatever\n    } else {\n      $('#page').turnOffTheaterMode();\n    }\n  });\n\n});\n```\n\n## License\n\nMIT. Copyright (c) Jon &lt;jon@jgubman.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.0","downloads":11},{"name":"videojs-theater-toggle","description":"A plugin to enable Theater Mode and save the state using LocalStorage in VideoJS 6.4+","author":{"name":"Will Xavier","email":"willyelnsg.x@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-12-19T03:19:23.096Z","created":"2017-12-18T17:24:23.714Z","0.0.1":"2017-12-18T17:24:23.714Z","0.0.2":"2017-12-18T17:51:27.869Z","0.0.3":"2017-12-18T18:58:05.845Z","0.0.4":"2017-12-19T03:19:23.096Z"},"readme":"# videojs-theater-toggle\n\nA plugin to enable Theater Mode in VideoJS 6.4+\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-theater-toggle\n```\n\n[![NPM](https://nodei.co/npm/videojs-theater-toggle.png?compact=true)](https://npmjs.org/package/videojs-theater-toggle)\n\n\n## Usage\n\nTo include videojs-theater-toggle on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<link rel=\"stylesheet\" href=\"//path/to/videojs-theater-toggle.css\">\n<script src=\"//path/to/videojs-theater-toggle.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.theaterToggle();\n\n  player.on(\"theaterMode\",function(){\n    if(player.theaterToggle().isTheater()){\n      //The 'Theater' is enabled\n    }else {\n      //The 'Theater' is disabled\n    }\n  });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-theater-toggle via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-theater-toggle');\n\nvar player = videojs('my-video');\n\nplayer.theaterToggle();\n\nplayer.on(\"theaterMode\",function(){\n  if(player.theaterToggle().isTheater()){\n    //The 'Theater' is enabled\n  }else {\n    //The 'Theater' is disabled\n  }\n});\n\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-theater-toggle'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.theaterToggle();\n\n  player.on(\"theaterMode\",function(){\n    if(player.theaterToggle().isTheater()){\n      //The 'Theater' is enabled\n    }else {\n      //The 'Theater' is disabled\n    }\n  });\n\n});\n```\n\n## License\n\nMIT. Copyright (c) Will Xavier &lt;willyelnsg.x@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.4","downloads":50},{"name":"videojs-thumbnails","description":"Thumbnails images on video progress bar.","author":{"name":"Mariusz Rajczakowski","email":"mrajczakowski@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2017-03-15T18:13:21.554Z","created":"2017-03-14T13:34:17.076Z","0.0.0":"2017-03-14T13:34:17.076Z","1.0.0":"2017-03-14T13:55:19.112Z","1.0.1":"2017-03-14T14:10:18.395Z","1.0.2":"2017-03-15T09:45:59.888Z","1.0.3":"2017-03-15T18:13:21.554Z"},"readme":"# videojs-thumbnails\n\nThumbnails images on video progress bar.\nExample of the thumbnail:\n![Thumbnail example](https://github.com/TwigWorld/videojs-thumbnails/raw/master/thumbnails.jpg \"Thumbnail example\")\n\nThe plugin works with sprites. Example of sprite generated from the video:\n![Thumbnail sprite example](https://github.com/TwigWorld/videojs-thumbnails/raw/master/sprite.jpg \"Thumbnail sprite example\")\n\n## Installation\n\n```sh\nnpm install --save videojs-thumbnails\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-thumbnails\n```\n\n## Usage\n\nTo include videojs-thumbnails on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\nSetup and initialisation below is an example of thumbnail shown in the screenshot above.\nDepending on the ratio of your video you will generate specific size of the sprite so some adjustments to variable to best position and display thumbnails.\nThe sprite created in the example is 100th px ( depending on the video length ) wide and 58px high with the clip width of 100px ( see example above ).\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-thumbnails.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n  \n  // example of setup for specific size of the sprite\n  // adjust if necessary \n    player.thumbnails(\n      {\n        // width of the single sprite clip\n        width: 100,\n        // url to sprite image\n        spriteUrl: \"//path/to/sprite.jpg\",\n        // how often to change thumbnail on timeline ( ex. every 2sec )\n        stepTime: 2,\n      }\n    );\n</script>\n```\n\n### Styles\n\nThumbnail styles need to be also included for thumbnails to work correctly.\n\n```html\n <link href=\"//path/to/videojs-thumbnails.css\" rel=\"stylesheet\">\n```\nTo adjust style simply overide style in css file. For example .vjs-thumbnail-img class padding, background and height.\n\n### Browserify\n\nWhen using with Browserify, install videojs-thumbnails via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-thumbnails');\n\nvar player = videojs('my-video');\n\nplayer.thumbnails();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-thumbnails'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.thumbnails();\n});\n```\n\n## License\n\nMIT. Copyright (c) Mariusz Rajczakowski &lt;mrajczakowski@gmail.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.3","downloads":891},{"name":"videojs-time-offset","description":"This repo is forked from https://github.com/cladera/videojs-time-offset, ported to es6, fixed somebugs","author":{"name":"Can Küçükyılmaz","email":"can@vngrs.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-08-31T10:38:34.903Z","created":"2016-03-02T12:43:03.745Z","0.0.1":"2016-03-02T12:43:03.745Z","0.1.0":"2016-03-02T13:24:49.951Z","0.1.1":"2016-03-09T09:38:27.321Z","0.2.0":"2016-03-09T16:03:12.811Z","0.2.1":"2016-03-15T15:54:42.220Z","0.2.2":"2016-07-29T16:07:51.860Z","0.3.0":"2016-08-31T10:38:34.903Z"},"readme":"# videojs-time-offset\nThis repo is forked from https://github.com/cladera/videojs-time-offset, ported to es6, fixed somebugs\n\n## Installation\n\n```sh\nnpm install --save videojs-time-offset\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-time-offset\n```\n\n## Usage\n\nTo include videojs-time-offset on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-time-offset.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.timeOffset({\n    start: 5, // in seconds\n    end: 10\n  });\n</script>\n```\nAlso you can use pagination params,\n\n```html\n<script>\nvar player = videojs('my-video');\n\nplayer.timeOffset({\n  page: 1, // starts from 1\n  perPageInMinutes: 10\n});\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-time-offset via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-time-offset');\n\nvar player = videojs('my-video');\n\nplayer.time-offset();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-time-offset'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.time-offset();\n});\n```\n\n## License\n\nMIT.\n\n\n[videojs]: http://videojs.com/\n","version":"0.3.0","downloads":91},{"name":"videojs-titleoverlay","description":"Simple title overlay plugin for VideoJS","author":{"name":"Steven K Melendez"},"keywords":["videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2018-01-17T21:22:02.446Z","created":"2018-01-16T20:29:49.171Z","1.0.0":"2018-01-16T20:29:49.171Z","1.1.0":"2018-01-16T20:36:24.962Z"},"readme":"# videojs-titleoverlay\r\nTitle Overlay plugin for VideoJS\r\n\r\nThis plugin is used to add a simple title overlay for video js. Usage is as follows:\r\n\r\n```javascript\r\n    <video id=\"id_for_videoplayer\" class=\"video-js\" controls preload=\"auto\" width=\"640\" height=\"264\" data-setup=\"{}\">\r\n        <source src=\"PATH-TO-VIDEO-FILE\" type='FILETYPE'>\r\n    </video>\r\n\r\n    <script src=\"PATH-TO/video.js\"></script>\r\n    <script src=\"PATH-TO/videojs-titleoverlay.js\"></script>\r\n    <script>\r\n        var player = videojs('id_for_videoplayer');\r\n        var options = {};\r\n        player.titleoverlay(options);\r\n    </script>\r\n```\r\n\r\nYou can specify the following options:\r\n\r\n```javascript\r\n    var options = {\r\n        title: 'My Video Title',  //Title for movie\r\n        floatPosition: 'right', //Float left or right (to prevent big play button overlap) (default left)\r\n        margin: '10px', //Margin from top/left/right (default 10px)\r\n        fontSize: '1.5em', //font size (default 1em)\r\n        debug: false, //true or false. Will output debug messages for title status\r\n        logger: LOGOBJECT //must have a function called log that it can call to, otherwise will use a default basic log func\r\n    }\r\n```\r\n\r\nYou can hide/show the title overlay by calling the following:\r\n\r\n```javascript\r\n    player.titleoverlay.showOverlay();\r\n\r\n    //or\r\n\r\n    player.titleoverlay.hideOverlay();\r\n```\r\n\r\nYou can update the title text if you are loading clips in dynamically with the following:\r\n\r\n```javascript\r\n    player.titleoverlay.updateTitle('TITLE TO UPDATE TO');\r\n```\r\n\r\nIf you have any questions, please shoot me an email @ melendez.stevenk@gmail.com or smelendez@franklyinc.com","version":"1.1.0","downloads":48},{"name":"videojs-tracking-events","description":"event tracker","author":{"name":"lribelle@tbxnet.com","email":"lribelle@tbxnet.com"},"keywords":["videojs","videojs-plugin"],"license":"UNLICENSED","time":{"modified":"2017-09-28T18:58:20.375Z","created":"2017-08-22T18:18:23.297Z","0.0.1":"2017-08-22T18:18:23.297Z","0.0.2":"2017-08-22T19:02:46.484Z","0.0.3":"2017-08-24T20:41:39.960Z","0.0.4":"2017-08-24T21:07:08.315Z","0.0.5":"2017-08-24T21:10:59.822Z","0.0.6":"2017-08-31T21:43:39.133Z","0.0.7":"2017-08-31T22:03:05.610Z","0.0.8":"2017-09-05T18:10:33.808Z","0.0.9":"2017-09-06T14:48:08.435Z","0.0.10":"2017-09-06T19:58:43.862Z","0.0.11":"2017-09-27T19:33:18.453Z","0.0.12":"2017-09-27T19:48:02.516Z","0.0.13":"2017-09-27T20:29:51.145Z","0.0.14":"2017-09-27T21:07:08.465Z","0.0.15":"2017-09-28T18:58:20.375Z"},"readme":"# videojs-tracking-events\n\nevent tracker\n\n## Table of Contents\n\n<!-- START doctoc -->\n<!-- END doctoc -->\n## Installation\n\n```sh\nnpm install --save videojs-tracking-events\n```\n\n## Usage\n\nTo include videojs-tracking-events on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-tracking-events.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.trackingEvents();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-tracking-events via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-tracking-events');\n\nvar player = videojs('my-video');\n\nplayer.trackingEvents();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-tracking-events'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.trackingEvents();\n});\n```\n\n## License\n\nUNLICENSED. Copyright (c) lribelle@tbxnet.com &lt;lribelle@tbxnet.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.15","downloads":81},{"name":"videojs-upnext","description":"Youtube like plugin for up next videos","author":{"name":"Fernando Godino","email":"fernando@varsityviews.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-11-06T17:29:11.718Z","created":"2017-02-22T20:20:09.634Z","2.0.0":"2017-02-22T20:20:09.634Z","2.0.1":"2017-02-22T20:55:51.859Z","2.0.2":"2017-02-22T21:07:05.688Z","2.0.3":"2017-02-22T22:15:11.496Z","2.0.4":"2017-02-22T22:25:17.798Z","2.0.5":"2017-02-24T16:06:15.220Z","2.2.0":"2017-05-09T18:49:58.077Z","2.2.1":"2017-11-06T17:29:11.718Z"},"readme":"# videojs-upnext\n\nYoutube like plugin for up next videos\n\n## Installation\n\n```sh\nnpm install --save videojs-upnext\n```\n\n## Usage\n\nTo include videojs-upnext on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-upnext.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n  player.upnext({\n    timeout : 5000,\n    headText : 'Up Next',\n    cancelText: 'Cancel',\n    getTitle : function() { return 'Next video title' },\n    next : function () { performActionAfterTimeout() }\n  });\n</script>\n```\n\n### Browserify / Webpack\n\nWhen using with Browserify, install videojs-upnext via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-upnext');\n\nvar player = videojs('my-video');\n\nplayer.upnext({\n  timeout : 5000,\n  headText : 'Up Next',\n  cancelText: 'Cancel',\n  getTitle : function() { return 'Next video title' },\n  next : function () { performActionAfterTimeout() }\n});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-upnext'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.upnext({\n    timeout : 5000,\n    headText : 'Up Next',\n    cancelText: 'Cancel',\n    getTitle : function() { return 'Next video title' },\n    next : function () { performActionAfterTimeout() }\n  });\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Fernando Godino <fernando@varsityviews.com>\n\n\n[videojs]: http://videojs.com/\n","version":"2.2.1","downloads":74},{"name":"videojs-vjsdownload","description":"downloads video","author":{"name":"7Ds7"},"keywords":["videojs","videojs-plugin","videojs-vjsdownload","download"],"license":"Apache-2.0","time":{"modified":"2017-09-20T04:22:11.443Z","created":"2016-02-05T18:28:54.329Z","0.0.0":"2016-02-05T18:28:54.329Z","1.0.0":"2016-02-05T18:31:56.085Z","1.0.1":"2016-02-05T18:57:08.434Z","1.0.2":"2016-02-07T18:11:25.577Z"},"readme":"# videojs-vjsdownload\n\nAdds a button to download the video inside the player\n\n## Usage\nInclude the plugin files\n\n* videojs-vjsdownload.js\n* videojs-vjsdownload.css\n\n```\nvar player = videojs(document.querySelector('.video-js'), {\n  \"playbackRates\": [1, 2],\n  plugins: {\n    vjsdownload:{\n      beforeElement: 'playbackRateMenuButton',\n      textControl: 'Download video',\n      name: 'downloadButton'\n    }\n  }\n} , function() {\n  console.log('Callback video-js initiated');\n  this.on('downloadvideo', function(){\n    console.log('downloadvideo triggered');\n  });\n});\n```\n\n## Options\n * beforeElement: name of the player.controlBar component for the button to be attached before\n  - default:  fullscreenMenuToggle\n * textControl: String for the controlText\n  - default: 'Download Video'\n * name: name of the DownloadButton component\n  - default: 'downloadButton'\n\n## Style\nBy default the download icon is the play button icon rotated 90deg with some suggar on top, to include a custom icon please refer to videojs-vjsdownload.css file","version":"1.0.2","downloads":69},{"name":"videojs-vr","description":"A plugin to add 360 and VR video support to video.js.","author":{"name":"James Broberg","email":"james.broberg@metacdn.com"},"keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2017-12-04T20:42:20.072Z","created":"2016-11-07T22:06:31.536Z","0.2.0":"2016-11-07T22:06:31.536Z","0.2.2":"2016-11-29T04:31:58.209Z","0.3.0":"2017-01-20T04:20:41.614Z","0.3.1":"2017-02-16T00:13:10.086Z","0.3.2":"2017-03-02T03:09:56.070Z","0.3.3":"2017-03-02T03:21:08.595Z","0.3.4":"2017-04-17T22:59:49.777Z","1.0.0":"2017-08-24T18:21:54.129Z","1.0.1":"2017-08-29T20:10:15.543Z","1.0.2":"2017-10-19T20:52:35.743Z","1.0.3":"2017-12-04T20:42:20.072Z"},"readme":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [VR](#vr)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [`<script>` Tag](#script-tag)\n    - [Browserify/CommonJS](#browserifycommonjs)\n    - [RequireJS/AMD](#requirejsamd)\n    - [Optional integration with videojs-errors](#optional-integration-with-videojs-errors)\n  - [Setting a global projection](#setting-a-global-projection)\n    - [Passing a projection on a source by source basis](#passing-a-projection-on-a-source-by-source-basis)\n  - [Oculus Rift and HTC Vive Support](#oculus-rift-and-htc-vive-support)\n  - [Accessing the Camera Position](#accessing-the-camera-position)\n  - [Accessing THREE.js objects](#accessing-threejs-objects)\n  - [Options](#options)\n    - [`forceCardboard`](#forcecardboard)\n    - [`projection`](#projection)\n      - [`'360'`, `'Sphere'`, or `'equirectangular'`](#360-sphere-or-equirectangular)\n      - [`'Cube'` or `'360_CUBE'`](#cube-or-360_cube)\n      - [`'NONE'`](#none)\n      - [`'AUTO'`](#auto)\n      - [`'360_LR'`](#360_lr)\n      - [`'360_TB'`](#360_tb)\n    - [`player.mediainfo.projection`](#playermediainfoprojection)\n    - [`debug`](#debug)\n  - [Credits](#credits)\n  - [Support](#support)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n# VR\n\nA video.js plugin that turns a video element into a HTML5 Panoramic 360 video player. Project video onto different shapes. Optionally supports Oculus Rift, HTC Vive and the GearVR.\n\n## Installation\n\n```sh\nnpm install --save videojs-vr\n```\n\n## Usage\n\nTo include videojs-vr on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-vr.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.vr();\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-vr via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-vr');\n\nvar player = videojs('my-video');\n\nplayer.vr({projection: '360'});\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-vr'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.vr({projection: '360'});\n});\n```\n\n### Optional integration with videojs-errors\nIf the [videojs-errors](https://github.com/brightcove/videojs-errors) plugin is intialized before `videojs-vr`, then it will be used to display errors to users.\n\n## Setting a global projection\nIf you are only going to be playing 360 videos you can set the global plugin projection like so:\n\n```js\n\nvar player = videojs('my-video');\n\nplayer.vr({projection: '360'});\n\n// or change player.vr.defaultProjection\n// and call player.vr.initScene again\n\n```\n\n### Passing a projection on a source by source basis\nSet `player.mediainfo` and `player.mediainfo.projection` to a valid projection value and pass in 'AUTO' or nothing for the `projection` key when initializing this plugin.\nEX:\n```js\nvar player = videojs('my-video');\n\nif (!player.mediainfo) {\n  player.mediainfo = {};\n}\n\nif (!player.mediainfo.projection) {\n  player.mediainfo.projection = '360';\n}\n\nplayer.vr({projection: 'AUTO'});\n\n// or player.vr(); since 'AUTO' is the default\n```\n\n## Oculus Rift and HTC Vive Support\nThis plugin leverages the [webvr-boilerplate](https://github.com/borismus/webvr-boilerplate) project (which in turn uses [webvr-polyfill](https://github.com/borismus/webvr-polyfill) and [three.js](https://github.com/mrdoob/three.js)) to create a 'responsive VR' experience across multiple devices.\n\nOculus Rift and HTC Vive playback requires Firefox >= 55, experimental WebVR-enabled builds of Chromium, or via Chrome by enabling webvr in `chrome://flags`. Go to [WebVR.info](http://www.webvr.info) for more info.\n\nGearVR playback requires the latest Samsung Internet for Gear VR with WebVR support enabled. Go [here](https://webvr.rocks/samsung_internet) for more info.\n\n## Accessing the Camera Position\nThe Three.js rotation values are exposed under the property `cameraVector` on the `vr` plugin namespace.\n\n```js\nvar player = videojs('my-video');\n\nplayer.vr().cameraVector;\n```\n\n## Accessing THREE.js objects\nThe Three.js Scene, renderer, and perspective camera are exposed under the `threeJs` object as the properties `scene`, `renderer`, and `camera` on the `vr` plugin namespace.\n\n```\nvar player = videojs('my-video');\n\nplayer.vr().camera;\nplayer.vr().scene;\nplayer.vr().rendeer;\n```\n\n## Options\n### `forceCardboard`\n> Type: `boolean`, default: `false`\n\nForce the cardboard button to display on all devices even if we don't think they support it.\n\n### `projection`\n\n> Type `string`, default: `'auto'`\nCan be any of the following:\n\n#### `'360'`, `'Sphere'`, or `'equirectangular'`\nThe video is a sphere\n\n#### `'Cube'` or `'360_CUBE'`\nThe video is a cube\n\n#### `'NONE'`\nThis video is not a 360 video\n\n#### `'AUTO'`\nCheck `player.mediainfo.projection` to see if the current video is a 360 video.\n\n#### `'360_LR'`\nUsed for side-by-side 360 videos\n\n#### `'360_TB'`\nUsed for top-to-bottom 360 videos\n\n### `player.mediainfo.projection`\n\n> type: `string`\n\nThis should be set on a source-by-source basis to turn 360 videos on an off depending upon the video.\n\nSee [`projection`](#projection) above for information of values. Note that `AUTO` is the same as `NONE` for `player.mediainfo.projection`.\n\n### `debug`\n\n> type: `boolean`, default: `false`\n\nEnable debug logging for this plugin\n\n## Credits ##\n\nThis project is a conglomeration of a few amazing open source libraries.\n\n* [VideoJS](http://www.videojs.com)\n* [Three.js](http://threejs.org)\n* [webvr-boilerplate](https://github.com/borismus/webvr-boilerplate)\n* [webvr-polyfill](https://github.com/borismus/webvr-polyfill)\n\n## Support ##\nThis work is sponsored by [Brightcove](https://www.brightcove.com), [HapYak](http://corp.hapyak.com/) and [StreamShark](https://streamshark.io)\n","version":"1.0.3"},{"name":"videojs-vtt-thumbnails","description":"Display thumnails on progress bar hover, driven by external VTT files.","author":{"name":"Chris Boustead","email":"chris@forgemotion.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2018-01-19T18:30:49.857Z","created":"2017-11-10T17:21:36.891Z","0.0.0":"2017-11-10T17:21:36.891Z","0.0.1":"2017-11-10T17:22:24.055Z","0.0.2":"2017-11-15T17:53:20.950Z","0.0.3":"2017-11-15T21:06:04.223Z","0.0.4":"2017-11-15T21:47:22.104Z","0.0.5":"2017-11-15T21:54:57.552Z","0.0.6":"2017-11-15T21:58:41.899Z","0.0.7":"2017-11-15T22:11:17.749Z","0.0.8":"2018-01-19T18:30:49.857Z"},"readme":"# videojs-vtt-thumbnails\n\nVideo.js plugin that displays thumbnails on progress bar hover, driven by external VTT files.  Based on the spec at: https://support.jwplayer.com/customer/portal/articles/1407439-adding-preview-thumbnails\n\nNote: Plugin hides the default skin's mouse display timestamp on hover.\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Installation\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`<script>` Tag](#script-tag)\n  - [Browserify/CommonJS](#browserifycommonjs)\n  - [RequireJS/AMD](#requirejsamd)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## Installation\n\n```sh\nnpm install --save videojs-vtt-thumbnails\n```\n\n## Usage\n\nTo include videojs-vtt-thumbnails on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-vtt-thumbnails.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n  player.vttThumbnails({\n    src: 'example/thumbs.vtt'\n  });\n</script>\n```\n\n### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-vtt-thumbnails via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-vtt-thumbnails');\n\nvar player = videojs('my-video');\n\nplayer.vttThumbnails();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-vtt-thumbnails'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.vttThumbnails();\n});\n```\n\n## License\n\nMIT. Copyright (c) Chris Boustead &lt;chris@forgemotion.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"0.0.8","downloads":141},{"name":"videojs-watchdog-plugin","description":"Internet watchdog for video.js","author":{"name":"Vitaly Domnikov","email":"dotcypress@gmail.com"},"keywords":["videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2016-02-18T14:31:30.763Z","created":"2016-02-15T14:34:08.474Z","0.1.0":"2016-02-15T14:34:08.474Z","0.1.1":"2016-02-15T14:56:17.921Z","0.1.2":"2016-02-17T11:20:22.618Z","0.1.3":"2016-02-18T10:22:10.838Z","0.1.4":"2016-02-18T14:31:30.763Z"},"readme":"[![Build Status](https://travis-ci.org/dotcypress/videojs-watchdog-plugin.svg?branch=master)](https://travis-ci.org/dotcypress/videojs-watchdog-plugin)\n\n# videojs-watchdog-plugin\n\nInternet watchdog for video.js\n\n## Installation\n\n```sh\nnpm install --save videojs-watchdog-plugin\n```\n\nThe npm installation is preferred, but Bower works, too.\n\n```sh\nbower install  --save videojs-watchdog-plugin\n```\n\n## Usage\n\nTo include videojs-watchdog-plugin on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-watchdog-plugin.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.watchdogPlugin();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-watchdog-plugin via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-watchdog-plugin');\n\nvar player = videojs('my-video');\n\nplayer.watchdogPlugin();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-watchdog-plugin'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.watchdogPlugin();\n});\n```\n\n## License\n\nMIT. Copyright (c) Vitaly Domnikov <dotcypress@gmail.com>\n\n[videojs]: http://videojs.com/\n","version":"0.1.4","downloads":67},{"name":"videojs-watermark","description":"Adds a watermark image the video player","author":{"name":"Brooks Lyrette","email":"brooks@dotsub.com"},"keywords":["videojs","videojs-plugin","watermark"],"license":"Apache-2.0","time":{"modified":"2017-08-11T10:54:10.351Z","created":"2016-05-10T17:23:29.674Z","0.1.0":"2016-05-10T17:23:29.674Z","0.1.1":"2016-05-10T18:12:14.315Z","0.2.0":"2016-09-29T10:45:51.923Z","1.0.0":"2016-10-21T13:20:17.444Z","1.0.1":"2016-12-20T11:57:49.238Z","2.0.0":"2017-08-11T10:54:10.351Z"},"readme":"[![Build Status](https://travis-ci.org/dotsub/videojs-watermark.svg?branch=master)](https://travis-ci.org/dotsub/videojs-watermark) [![npm version](https://badge.fury.io/js/videojs-watermark.svg)](https://badge.fury.io/js/videojs-watermark)\n\n# videojs-watermark\n\nAdds a watermark image the video player. After the initial 'fadeTime' the watermark will be shown when the video players controls are shown. This also provides the ability to use the watermark as a link.\n\n![Player Preview](https://cloud.githubusercontent.com/assets/1881100/15156352/9be2dac6-16b4-11e6-9981-d63e1421bac2.png)\n\n## Installation\n\n```sh\nnpm install --save videojs-watermark\n```\n\n## Configuration\n\n**image: Required** The URL to the image to be used as the watermark.\n\n**position:** The location to place the watermark (top-left, top-right, bottom-left, bottom-right). Defaults to 'top-right'.\n\n**fadeTime:** The amount of time in milliseconds for the initial watermark fade. Defaults to 3000. To make watermark permanently visible, use `null`.\n\n**url:** A url to be linked to from the watermark. If the user clicks the watermark the video will be paused and the link will open in a new window.\n\n## Usage\n\nTo include videojs-watermark on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-watermark.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.watermark();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-watermark via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-watermark');\n\nvar player = videojs('my-video');\n\nplayer.watermark();\n```\n\n### Browserify ES6\n\nWhen using with Browserify, install videojs-watermark via npm and `import` the plugin as you would any other module.\n\n```js\nimport videojs from 'video.js';\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nimport 'videojs-watermark';\n\nconst player = videojs('my-video');\nplayer.watermark();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-watermark'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.watermark();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Dotsub &lt;dev@dotsub.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"2.0.0","downloads":622},{"name":"videojs-watermark-with-text","description":"Adds a watermark image and text to the video player. Based on Brooks Lyrette <brooks@dotsub.com> solution","author":{"name":"Brooks Lyrette","email":"brooks@dotsub.com"},"keywords":["videojs","videojs-plugin","watermark"],"license":"Apache-2.0","time":{"modified":"2017-02-03T13:14:32.764Z","created":"2017-02-03T02:46:57.002Z","1.0.1":"2017-02-03T02:46:57.002Z","1.0.2":"2017-02-03T07:47:03.464Z","1.0.3-a":"2017-02-03T10:58:45.197Z","1.0.3":"2017-02-03T10:59:40.622Z","1.0.4":"2017-02-03T11:06:16.436Z","1.0.5":"2017-02-03T11:32:54.379Z","1.0.5-b":"2017-02-03T13:14:32.764Z"},"readme":"[![Build Status](https://travis-ci.org/dotsub/videojs-watermark.svg?branch=master)](https://travis-ci.org/dotsub/videojs-watermark) [![npm version](https://badge.fury.io/js/videojs-watermark.svg)](https://badge.fury.io/js/videojs-watermark)\n\n# videojs-watermark\n\nAdds a watermark image the video player. After the initial 'fadeTime' the watermark will be shown when the video players controls are shown. This also provides the ability to use the watermark as a link.\n\n![Player Preview](https://cloud.githubusercontent.com/assets/1881100/15156352/9be2dac6-16b4-11e6-9981-d63e1421bac2.png)\n\n## Installation\n\n```sh\nnpm install --save videojs-watermark\n```\n\n## Configuration\n\n**image: ** The URL to the image to be used as the watermark.\n\n**text: ** Text to be displayed as the watermark.\n\n**type: ** img or text - to select type of watermark\n\n**position:** The location to place the watermark (top-left, top-right, bottom-left, bottom-right, center). Defaults to 'top-right'.\n\n**fadeTime:** The amount of time in milliseconds for the initial watermark fade. Defaults to 3000. To make watermark permanently visible, use `null`.\n\n**url:** A url to be linked to from the watermark. If the user clicks the watermark the video will be paused and the link will open in a new window.\n\n## Usage\n\nTo include videojs-watermark on your website or web application, use any of the following methods.\n\n### `<script>` Tag\n\nThis is the simplest case. Get the script in whatever way you prefer and include the plugin _after_ you include [video.js][videojs], so that the `videojs` global is available.\n\n```html\n<script src=\"//path/to/video.min.js\"></script>\n<script src=\"//path/to/videojs-watermark.min.js\"></script>\n<script>\n  var player = videojs('my-video');\n\n  player.watermark();\n</script>\n```\n\n### Browserify\n\nWhen using with Browserify, install videojs-watermark via npm and `require` the plugin as you would any other module.\n\n```js\nvar videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-watermark');\n\nvar player = videojs('my-video');\n\nplayer.watermark();\n```\n\n### Browserify ES6\n\nWhen using with Browserify, install videojs-watermark via npm and `import` the plugin as you would any other module.\n\n```js\nimport videojs from 'video.js';\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nimport 'videojs-watermark';\n\nconst player = videojs('my-video');\nplayer.watermark();\n```\n\n### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n```js\nrequire(['video.js', 'videojs-watermark'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.watermark();\n});\n```\n\n## License\n\nApache-2.0. Copyright (c) Dotsub &lt;dev@dotsub.com&gt;\n\n\n[videojs]: http://videojs.com/\n","version":"1.0.5-b","downloads":32},{"name":"videojs-wavesurfer","description":"video.js plugin that adds a navigable waveform for audio and video files.","author":{"name":"Collab"},"keywords":["waveform","audio","video","wavesurfer","videojs","videojs-plugin","player"],"license":"MIT","time":{"modified":"2018-01-23T19:29:04.308Z","created":"2014-11-14T15:51:28.844Z","0.3.0":"2014-11-14T15:51:28.844Z","0.4.0":"2014-11-19T23:03:39.948Z","0.6.0":"2014-11-25T20:10:28.193Z","0.7.0":"2014-12-08T19:59:32.811Z","0.8.0":"2014-12-17T14:33:34.505Z","0.8.1":"2014-12-17T17:37:10.639Z","0.9.0":"2015-01-06T20:12:32.985Z","0.9.1":"2015-01-14T19:48:15.431Z","0.9.2":"2015-02-18T16:08:25.761Z","0.9.3":"2015-02-18T16:20:07.144Z","0.9.4":"2015-02-18T18:46:27.466Z","0.9.5":"2015-03-03T17:38:43.866Z","0.9.6":"2015-03-19T18:31:05.552Z","0.9.7":"2015-08-26T22:54:04.233Z","0.9.8":"2015-10-04T00:50:20.965Z","0.9.9":"2015-10-06T08:37:02.423Z","1.0.0":"2015-10-12T19:50:30.900Z","1.0.1":"2015-10-13T22:09:17.154Z","1.0.2":"2015-10-15T11:48:22.510Z","1.0.3":"2015-10-15T12:43:18.300Z","1.0.4":"2015-12-20T23:13:16.639Z","1.0.5":"2016-01-17T01:45:39.833Z","1.0.6":"2016-01-17T22:43:19.050Z","1.1.0":"2016-02-26T17:08:56.115Z","1.2.0":"2016-03-25T16:18:30.305Z","1.2.1":"2016-05-22T14:57:51.909Z","1.2.2":"2016-08-08T21:17:07.802Z","1.2.3":"2016-08-27T12:11:52.589Z","1.2.4":"2016-09-16T20:21:00.134Z","1.2.5":"2016-09-30T00:21:10.438Z","1.2.6":"2016-09-30T00:43:37.514Z","1.2.7":"2017-01-15T03:50:47.079Z","1.3.0":"2017-02-13T22:05:21.504Z","1.3.1":"2017-02-26T01:05:29.837Z","1.3.2":"2017-04-08T22:32:07.123Z","1.3.3":"2017-05-27T00:50:34.291Z","1.3.4":"2017-09-19T15:54:07.561Z","1.3.5":"2017-09-19T16:25:12.541Z","1.3.6":"2017-09-23T00:20:09.387Z","2.0.0":"2017-10-03T00:17:59.254Z","2.0.1":"2017-10-03T20:01:55.740Z","2.0.2":"2017-11-15T21:24:55.412Z","2.0.3":"2017-11-30T17:29:18.547Z","2.1.0":"2017-12-05T01:06:25.119Z","2.1.1":"2017-12-12T00:00:12.001Z","2.1.2":"2017-12-13T16:53:43.843Z","2.1.3":"2017-12-22T18:21:53.548Z","2.1.4":"2018-01-14T00:40:45.176Z","2.2.0":"2018-01-23T19:29:04.308Z"},"readme":"Video.js Wavesurfer\n===================\n\nA [video.js](http://www.videojs.com/) plugin that adds a navigable waveform\nfor audio and video files, using the [wavesurfer.js](https://github.com/katspaugh/wavesurfer.js)\nlibrary. Includes support for fullscreen mode and [real-time visualization of microphone\ninput](#microphone-plugin).\n\n![Screenshot](examples/img/screenshot.png?raw=true \"Screenshot\")\n\n[![npm version](https://img.shields.io/npm/v/videojs-wavesurfer.svg?style=flat)](https://www.npmjs.com/package/videojs-wavesurfer)\n[![npm](https://img.shields.io/npm/dm/videojs-wavesurfer.svg)](https://github.com/collab-project/videojs-wavesurfer/releases)\n[![License](https://img.shields.io/npm/l/videojs-wavesurfer.svg)](LICENSE)\n[![Build Status](https://travis-ci.org/collab-project/videojs-wavesurfer.svg?branch=master)](https://travis-ci.org/collab-project/videojs-wavesurfer)\n\nInstallation\n------------\n\nYou can use [npm](https://www.npmjs.org) (`npm install videojs-wavesurfer`) to install the\nplugin, or [download it here](https://github.com/collab-project/videojs-wavesurfer/releases).\nIf you want to try the examples, check [these instructions below](#examples).\n\nSince v2.0 this plugin is compatible with video.js 6.0 and wavesurfer.js 2.0 and\nnewer. If you want to use this plugin with an older video.js or wavesurfer.js version,\ncheck the [archived releases](https://github.com/collab-project/videojs-wavesurfer/releases?after=1.3.7)\nfor a 1.3.x or older release of this plugin.\n\nTake a look at the [changelog](./CHANGES.md) when upgrading from a previous\nversion of videojs-wavesurfer.\n\nUsing the Plugin\n----------------\n\nThe plugin depends on the video.js and wavesurfer.js libraries:\n\n```html\n<link href=\"video-js.min.css\" rel=\"stylesheet\">\n<link href=\"videojs.wavesurfer.css\" rel=\"stylesheet\">\n<script src=\"video.min.js\"></script>\n\n<script src=\"wavesurfer.min.js\"></script>\n```\n\nThe plugin automatically registers itself when the `videojs.wavesurfer.js`\nscript is loaded:\n\n```html\n<script src=\"videojs.wavesurfer.js\"></script>\n```\n\nAdd an `audio` element:\n\n```html\n<audio id=\"myClip\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nOr `video` element:\n\n```html\n<video id=\"myClip\" class=\"video-js vjs-default-skin\"></video>\n```\n\nPlugin Options\n--------------\n\nConfigure the player using the video.js\n[options](https://github.com/videojs/video.js/blob/master/docs/guides/options.md),\nand enable the plugin by adding a `wavesurfer` entry with the related wavesurfer.js\n[options](https://wavesurfer-js.org/docs/options.html):\n\n```javascript\nvar player = videojs('myClip',\n{\n    controls: true,\n    autoplay: true,\n    loop: false,\n    fluid: false,\n    width: 600,\n    height: 300,\n    plugins: {\n        wavesurfer: {\n            src: 'media/hal.wav',\n            msDisplayMax: 10,\n            debug: true,\n            waveColor: 'grey',\n            progressColor: 'black',\n            cursorColor: 'black',\n            hideScrollbar: true\n        }\n    }\n});\n```\n\nThe additional options for this plugin are:\n\n| option | type | default | description |\n| --- | --- | --- | --- |\n| `src` | string | `null` | The URL of the audio/video file or `'live'` when [using the microphone plugin](#microphone-plugin).|\n| `peaks` | string | `null` | The URL of the JSON file with peak data corresponding to the source audio/video file. This allows the waveform to be created from pre-rendered peak data. This file can be generated using the [bbc/audiowaveform](https://github.com/bbc/audiowaveform) utility. |\n| `debug` | boolean | `false` | Display internal log messages using the `videojs.log` method. |\n| `msDisplayMax` | float | `3` | Indicates the number of seconds that is considered the boundary value for displaying milliseconds in the time controls. An audio clip with a total length of 2 seconds and a `msDisplayMax` of 3 will use the format `M:SS:MMM`. Clips with a duration that is longer than `msDisplayMax` will be displayed as `M:SS` or `HH:MM:SS`.|\n\nExamples\n--------\n\nSee the full `audio` example ([demo](https://collab-project.github.io/videojs-wavesurfer/examples/index.html) or [source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/index.html)) and\nthe `video` example ([demo](https://collab-project.github.io/videojs-wavesurfer/examples/video.html) or [source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/video.html)).\n\nTo try out the examples locally, checkout the repository using Git:\n```\ngit clone https://github.com/collab-project/videojs-wavesurfer.git\n```\n\nAnd install the dependencies using npm:\n```\ncd videojs-wavesurfer\nnpm install\n```\n\nBuild the library and assets once:\n\n```\nnpm run build\n```\n\nAnd start the local webserver for the examples:\n```\nnpm run start\n```\n\nAnd open http://localhost:9999/examples/index.html in a browser.\n\nMethods\n-------\n\nMethods for this plugin documented below are available on the `wavesurfer` method\nof the video.js player instance. For example:\n\n```javascript\nplayer.on('ready', function() {\n    player.wavesurfer().destroy();\n});\n```\n\n| Method | Description |\n| --- | --- |\n| `destroy` | Destroys the wavesurfer instance and children (including the video.js player). |\n| `load(url)` | Load the clip at `url`. Also supports loading [File](https://developer.mozilla.org/nl/docs/Web/API/File) or [Blob](https://developer.mozilla.org/nl/docs/Web/API/Blob) objects. |\n| `setVolume(level)` | Set the volume level (value between 0.0 and 1.0). |\n| `play` | Start playback. |\n| `pause` | Pause playback. |\n| `getDuration` | Get the length of the stream in seconds. Returns 0 if no stream is available (yet). |\n| `getCurrentTime` | Get the current time (in seconds) of the stream during playback. Returns 0 if no stream is available (yet). |\n| `exportImage(format, quality)` | Save waveform image as data URI. Default format is `'image/png'`. |\n| `setAudioOutput(deviceId)` | Change the audio output device using its [deviceId](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/deviceId). |\n\nOther wavesurfer.js methods\n---------------------------\n\nYou can access the wavesurfer instance, for example to call the\nwavesurfer.js `seekTo` method, by using the `surfer` property of the\n`wavesurfer` plugin instance:\n\n```javascript\nplayer.wavesurfer().surfer.seekTo(1);\n```\n\nEvents\n------\n\nPlugin events that are available on the video.js player instance. For example:\n\n```javascript\nplayer.on('waveReady', function(event) {\n    console.log('waveform is ready!');\n});\n```\n\n| Event | Description |\n| --- | --- |\n| `waveReady` | Audio is loaded, decoded and the waveform is drawn. |\n| `playbackFinish` | Audio playback finished. |\n| `audioOutputReady` | Audio output was changed and is now active. |\n| `error` | Error occurred. |\n\nCustomizing controls\n--------------------\n\nTo disable and hide specific controls, use the video.js `controlBar` option:\n\n```javascript\ncontrolBar: {\n    // hide fullscreen control\n    fullscreenToggle: false\n},\n```\n\nResponsive layout\n-----------------\n\nThe `fluid` option for video.js will resize the player according to the size\nof the window.\n\nConfigure the player; enable the video.js `'fluid'` option:\n\n```javascript\nfluid: true\n```\n\nSee the full `fluid` example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/fluid.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/fluid.html)).\n\nText Tracks\n-----------\n\nText tracks (or captions/subtitles) are a feature of HTML5 for displaying\ntime-triggered text to the user. Video.js offers a cross-browser implementation\nof text tracks. For more information, check the\n[documentation](https://github.com/videojs/video.js/blob/master/docs/guides/text-tracks.md).\n\n![Text tracks screenshot](examples/img/text-tracks.png?raw=true \"Text tracks screenshot\")\n\nSee the full `texttrack` example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/texttrack.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/texttrack.html)).\n\nMicrophone plugin\n-----------------\n\nIt's also possible to use a microphone for real-time rendering of the audio waveform. This\nuses the [microphone plugin](https://github.com/katspaugh/wavesurfer.js/blob/master/plugin/wavesurfer.microphone.js)\nthat comes with wavesurfer.js.\n\nInclude the additional `wavesurfer.microphone.js` plugin on your page.\n\n```html\n<script src=\"wavesurfer.microphone.min.js\"></script>\n```\n\nAdd an `audio` element:\n\n```html\n<audio id=\"myLiveAudio\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nConfigure the player: use the value `'live'` for the `src` option:\n\n```javascript\nvar player = videojs('myLiveAudio', {\n    controls: true,\n    width: 600,\n    height: 300,\n    plugins: {\n        wavesurfer: {\n            src: 'live',\n            debug: true,\n            waveColor: 'black',\n            cursorWidth: 0,\n            interact: false,\n            hideScrollbar: true\n        }\n    }\n});\n```\n\nThe microphone plugin has additional configuration\n[options](https://wavesurfer-js.org/plugins/microphone.html).\n\nSee the full `live` example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/live.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/live.html)).\n\n\nChange audio output or input device\n-----------------------------------\n\nIf your device has multiple audio output devices, use `setAudioOutput(deviceId)` to change\nthe active audio output device, and listen for the `audioOutputReady` event to be notified\nwhen the new output device is active.\n\n```javascript\n// change audio output device\nplayer.wavesurfer().setAudioOutput(deviceId);\n```\n\nSee the full `output` example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/output.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/output.html)).\n\nIf your device has multiple audio input devices and you want to display\nthese devices and allow the user to choose one, check out the the full `input` example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/input.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/input.html)).\n\n\nUsing with React\n----------------\n\nThe `react` example shows how to integrate this plugin in a [React](https://reactjs.org) component\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/react/index.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/react/index.html)).\n\n\nMore features using other plugins\n---------------------------------\n\nThe Video.js community created\n[lots of plugins](https://github.com/videojs/video.js/wiki/Plugins)\nthat can be used to enhance the player's functionality. Plugins actually\ntested with `videojs-wavesurfer`:\n\n- [videojs-record](https://github.com/collab-project/videojs-record) - Adds\n  support for recording audio/video/image files.\n\n\nDevelopment\n-----------\n\nInstall dependencies using npm:\n\n```\nnpm install\n```\n\nBuild a minified version:\n\n```\nnpm run build\n```\n\nGenerated files are placed in the `dist` directory.\n\nDuring development:\n\n```\nnpm run start\n```\n\nThis will watch the source directory and rebuild when any changes\nare detected. It will also serve the files on http://127.0.0.1:9999.\n\nAll commands for development are listed in the `package.json` file and\nare run using:\n\n```\nnpm run <command>\n```\n\n\nLicense\n-------\n\nThis work is licensed under the [MIT License](LICENSE).\n\n\nDonate\n------\n\nPlease consider donating if you like this project. Bitcoin is accepted\nand can be sent to `3PmXCqUggtq7KUWPbpN8WhMnb1Mfb1jbq8`.\n","version":"2.2.0","downloads":1488},{"name":"videojs-skin-colors","description":"Videojs default skin with pretty colors","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2015-01-17T20:01:29.248Z","created":"2015-01-13T04:13:59.184Z","1.0.0":"2015-01-13T04:13:59.184Z","1.0.3":"2015-01-17T20:01:29.248Z"},"readme":"# videojs-theme-colors\nColor variants of the default theme. To use, simply add the class of the color scheme you'd like to use for your player.\nFor instance, if you'd like to use the \"blue\" theme, add the class `vjs-theme-colors-blue` to your player.\n","version":"1.0.3","downloads":34},{"name":"videojs-skin-twitchy","description":"Videojs skin that happens to resemble a certain video game streaming site","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2018-01-07T14:11:43.470Z","created":"2015-01-15T05:07:53.222Z","1.0.0":"2015-01-15T05:07:53.222Z","1.0.2":"2015-01-16T07:15:52.703Z","2.0.0":"2016-03-18T17:23:12.934Z","2.0.1":"2016-03-18T17:34:26.330Z"},"readme":"# videojs-skin-twitchy\n\nVideojs skin that happens to resemble a certain video game streaming site.\n","version":"2.0.1","downloads":47}]